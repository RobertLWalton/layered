// Layered Languages Parser Bracketed Command Test Data
//
// File:	ll_parser_bracketed_command_test.in
// Author:	Bob Walton (walton@acm.org)
// Date:	Thu Jan 19 01:45:48 EST 2017
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

parser print bracket ""

parser define bracket "[+"
parser define bracket "[+" ...
parser print context "default"
parser define selector text
parser define selector code
parser define selector math
parser define selector operator 1
parser print selector ""
parser print context "default"
parser define bracket "(" ... ")" [code, math, text]
parser define bracket "[" ... "]" [code, math, text]
parser print bracket "["
parser define indentation mark ":" ... ";" [code, math, text]
parser print bracket ":"
parser define bracket "[+" ... "+]" [text, operator 2]
parser define bracket "<+" ... "+>" [text + operator]
parser define bracket "<+" ... "+>" [code, operator 1]
       with parsing selectors [^ code, - math, + operator 1]
parser print bracket "<+"

parser trace [ + subexpression lines,
               + subexpression elements]
parser test "abc"
            # "def"
parser test:
	"abc"
	# "def"
parser test <+ hi there +> <+ hi [embedded] there +>

parser begin block 1
parser define bracket "[X" ... "X]" [code, operator 1]
       with parsing selectors [- code, + operator 1]
parser test [ a [ b c ] c ] [X a [ b c ] d X]
parser test this is a paragraph +:
    line 1
    line 2a:: line 2b; line 2c
    last line
parser define indentation mark "+:" ... "::" [code]
parser test this is a paragraph +:
    line 1
    line 2a:: line 2b; line 2c
    last line
parser test  <X| hi there |X>
parser end block 1

parser trace [+ foo]
parser trace [+ parser commands]
parser trace [- parser commands]
parser trace [+ parser commands]
parser trace [+ warnings]

parser begin block 1
parser define bracket "<*" ... "*>" [code]
parser test <* hi there A *>
parser end block x
parser test <* hi there B *>
parser end block 1

parser test <* hi there C *>
parser end block 1
parser define bracket "<|" ... "|>" [code]
parser test <| hi there D |>

parser begin block 1
parser undefine bracket "<|" ... "|>" [code]
parser test <| hi there E |>
parser undefine bracket "<|" ... "|>" [code]
parser end block 1

parser test <| hi there F |>
parser undefine bracket "<|" ... "|>" [code]
parser test <| hi there F |>
parser undefine bracket "<|" ... "|>" [code]

parser begin block 1
parser define bracket "`" ... "'" [code]
parser define bracket "```" ... "'''" [code]
       with parsing options []
parser print bracket ""
parser test ( ``` ) ''' )
parser test ( ```
)
''' )
parser test ( ` ) ' )
parser test ( `
)
' )
parser test ( An indented paragraph:
		```This logical line continues on no
matter what, even with a spurious ), until
    the following is encountered- '''
                Second line of indented paragraph.
	      ) // End of () bracketed subexpression
parser end block 1

parser begin block 1
parser test [? MISSING ?]
parser define bracket "[?" ... "?]" [code]
       with special reformatter
parser test [? MISSING ?]
parser test [@ x 1 @ y 2 @ w @ z 3 @]
parser define bracket "[@" ... "@]" [code]
       with multivalue reformatter ( "@" )
parser test [@ x 1 @ y 2 @ w @ z 3 @]
parser end block 1

parser begin block 1
parser define indentation offset 4
parser print indentation offset
first line with indent 0
 line with indent 1
second line with indent 0
  line with indent 2
third line with indent 0
    line with indent 4
parser end block 1

parser begin block 1
parser print indentation offset
first line with indent 0
 line with indent 1
second line with indent 0
  line with indent 2
third line with indent 0
    line with indent 4

parser test:
	well ( hello:
	        goodbye ) there
	hi there

parser test:
	( hello:
	    goodbye ) there
	    hi there
	  ) end

parser test:
	( hello:
	    goodbye there
	    hi there
	) end
parser end block 1

parser begin block 1
parser print prefix ""
parser define prefix "X" [code]
       with parsing selectors [code, math]
parser define prefix "Y" [code]
       with parsing selectors [+ text]
       with group ajax
parser define prefix "Z" [math]
       with parsing selectors [code]
       with implied subprefix {X: y = 5, z = hi there}
       with lexical master "START"
       with parsing options [end at line break]
parser print prefix ""
parser print prefix "X"
parser end block 1

parser define typed bracket "T1{" ... "|" ... "|" ... "}T1"
       [code, text, math, data]
       with element selectors [data]
       with attribute selectors [data]
       with attributes "::" ... "==" ... "#"
parser define typed bracket "T2{" ... "|" ... "|" ... "}T2"
       [code, text, math, data]
       with element selectors [data]
       with attribute selectors [data, code]
       with attributes "::" ... "==" ... "#"
       with attribute negator "NO"
       with attribute flags initiator "("
       with attribute multivalue initiator "[@"
       with prefix separators allowed
parser define bracket "[@" ... "@]" [code]
       with multivalue reformatter ( "@" )

parser test T1{ T:: x == 5 # y == 6 | A B C |T}T1
parser test T2{ T:: x(1,2) == 5 # y == [@ 6 @ 7 @]
                | A B C |T}T2
parser test (T1{T}T1 A B C)
parser test (T2{T}T2 A B C)
parser test T1{T:: X # NO Y | A B | NO Z # W | C D | }T1
parser undefine typed bracket "T2{" ... "|" ... "|" ... "}T2"
       [code, text, math, data]
parser test (T2{T}T2 A B C)

parser begin block 1
parser print string concatenator
parser test "A" # "B"
parser test "A" "B"
parser define string concatenator enabled
parser print string concatenator
parser test "A" # "B"
parser test "A" "B"
parser define string concatenator disabled
parser print string concatenator
parser test "A" # "B"
parser test "A" "B"
parser end block 1

parser begin block 1
parser define typed bracket "8" ... "|" ... "|" ... "9"
       [code, text, math, data]
       with element selectors [data]
       with attribute selectors [data, code]
       with attributes ":" ... "=" ... ","
       with attribute negator "no"
       with attribute flags initiator "["
       with attribute multivalue initiator "{*"
       with prefix separators allowed
parser test [8 my type: my attr = 99 9]
parser end block 1
parser test [8 my type: my attr = 99 9]

parser begin block 1
parser define bracket "[0" ... "0]" [code]
       with special reformatter
parser test [0 LOGICAL_LINE 0]
parser end block 1

parser begin block 1
parser define prefix "P1" [code, text]
       with parsing selectors [text]
       with group paragraph
       with implied subprefix {S1}
       with parsing options [end at paragraph break]
parser define prefix "P2" [code, text]
       with parsing selectors [text]
       with group paragraph
       with implied subprefix {S2}
       with parsing options [end at paragraph break]
parser define prefix "P3" [code, text]
       with parsing selectors [text]
       with group paragraph
       with parsing options [end at paragraph break]
parser define prefix "S1" [text]
       with group line
parser define prefix "S2" [text]
       with group line
parser define typed bracket "{" ... "|" ... "|" ... "}"
       [code, text, math]
       // no element selectors
       with attribute selectors [data]
       with attributes ":" ... "=" ... ","
       with attribute negator "no"
       with attribute flags initiator "["
       with attribute multivalue initiator "{*"
       with prefix separators allowed

parser print prefix ""

parser test:
    {P1} Hi there.
    {P2} Bye.
    {P3} And some more.

parser test:
    {P1} First sentence. {S2} Second sentence.
    {P2} {S1} Third sentence. {S2} Fourth sentence.
    {P3} {S2} Fifth sentence. {XX} Sixth sentence.
         {S1} {XX} Seventh sentence.

parser end block 1

parser begin block 1
parser define indentation mark "::" ... ";" [code]
       with implied header {p}
parser test this is the indented paragraph 1::
    with one line
parser define prefix "p" [code]
       with group paragraph
parser test this is the indented paragraph 2::
    with one line
parser define prefix "p" [code]
       with group paragraph
       with implied subprefix {l}
parser test this is the indented paragraph 3::
    with a first line
    and a second line
parser define prefix "l" [code]
       with group line
parser test this is the indented paragraph 4::
    with a first line
    and a second line
    and a third line with [ HI THERE ] embedded
parser end block 1

parser begin block 1
parser define indentation mark "::" ... ";" [code]
       with implied header {p1}
parser define typed bracket "{" ... "|" ... "|" ... "}"
       [code, text, math]
       // no element selectors
       with attribute selectors [data]
       with attributes ":" ... "=" ... ","
       with attribute negator "no"
       with attribute flags initiator "["
       with attribute multivalue initiator "{*"
       with prefix separators allowed
parser define prefix "p1" [code]
       with group paragraph
       with implied subprefix {l1}
parser define prefix "l1" [code]
       with group line
parser define prefix "p2" [code]
       with group paragraph
       with implied subprefix {l2}
parser define prefix "l2" [code]
       with group line
parser test this is the indented paragraph 5::
    with a first line
    and a second line with [HI THERE] embedded

    {p2}and a second subparagraph
    with a second line of its own

    and a third subparagraph
    with a second line of its own
    {p2} and a fourth subparagraph started
         without in a previous blank line
    with a second line of its own

parser define prefix "p3" [code]
       with group paragraph
       with implied subprefix {l3}
       with parsing options [+ continuing]
parser define prefix "l3" [code]
       with group line
parser print prefix "p3"
parser test this is the indented paragraph 6::
    with a first line
    and a second line with [HI THERE] embedded

    {p3}and a second subparagraph
    with a second line of its own

    and a third line after a blank line
    and a fourth line

    {p2} and a third subparagraph
    with a second line of its own
parser end block 1

parser begin block 1
parser define typed bracket "{" ... "|" ... "|" ... "}"
       [code, text, math]
       // no element selectors
       with attribute selectors [data]
       with attributes ":" ... "=" ... ","
       with attribute negator "no"
       with attribute flags initiator "["
       with attribute multivalue initiator "{*"
       with prefix separators allowed
parser define prefix "p1" [code]
       with group paragraph
       with implied subprefix {l1}
parser define prefix "l1" [code]
       with group line
parser define prefix "p2" [code]
       with group paragraph
       with implied subprefix {l2}
       with parsing options [+ continuing]
parser define prefix "l2" [code]
       with group line
parser define prefix "p3" [code]
       with group paragraph
       with parsing options [+ continuing]
parser print prefix ""
parser trace [+ parser output]
{p1} this is a first paragraph
and a line

and another line outside the first paragraph
{p2} this is a second paragraph
and a line

and another line outside the second paragraph
{p1} this is a third paragraph
and a line

and another line outside the third paragraph
{p3} this is a fourth paragraph
and a line

and another line outside the fourth paragraph
{p1} this is a fifth paragraph
and a line

and another line outside the fifth paragraph
parser trace [- parser output]
parser end block 1

parser begin block 1
parser define typed bracket "{" ... "|" ... "|" ... "}"
       [code, text, math]
       // no element selectors
       with attribute selectors [data]
       with attributes ":" ... "=" ... ","
       with attribute negator "no"
       with attribute flags initiator "["
       with attribute multivalue initiator "{*"
       with prefix separators allowed
parser define prefix "p1" [code]
       with group paragraph
       with implied subprefix {l1}
parser define prefix "l1" [code]
       with group line
parser define prefix "p2" [code]
       with group paragraph
       with implied subprefix {l2}
       with parsing options [+ sticky]
parser define prefix "l2" [code]
       with group line
parser define prefix "p3" [code]
       with group paragraph
       with parsing options [+ sticky]
parser trace [+ parser output]
this is paragraph 1
and another line

{p1} this is paragraph 2
and another line

this is paragraph 3
and another line

{p2} this is paragraph 4
and another line

this is paragraph 5
and another line

{p1} this is paragraph 6
and another line

this is paragraph 7
and another line

{p3} this is paragraph 8
and another line

this is paragraph 9
and another line

{p1} this is paragraph 10
and another line

this is paragraph 11
and another line

parser trace [- parser output]
parser end block 1

this is a test line

parser begin block 1
parser define typed bracket "{" ... "|" ... "|" ... "}"
       [code, text, math]
       // no element selectors
       with attribute selectors [data]
       with attributes ":" ... "=" ... ","
       with attribute negator "no"
       with attribute flags initiator "["
       with attribute multivalue initiator "{*"
       with prefix separators allowed
parser define prefix "p" [code]
       with group paragraph
       with implied subprefix {l}
parser define prefix "l" [code]
       with group line
parser define prefix "x" [code]
       with implied subprefix {l}
{x} implied `l' prefix in error
parser end block 1
