// Layered Languages Parser Bracketed Command Test Data
//
// File:	ll_parser_bracketed_command_test.in
// Author:	Bob Walton (walton@acm.org)
// Date:	Sun Feb 14 03:31:16 EST 2016
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

parser print bracket ""

parser define bracket "[+"
parser define bracket "[+" ...
parser print context "default"
parser define selector text
parser define selector code
parser define selector math
parser define selector operator 1
parser print selector ""
parser print context "default"
parser define bracket "(" ... ")" [code, math, text]
parser define bracket "[" ... "]" [code, math, text]
parser print bracket "["
parser define indentation mark ":" ... ";" [code, math, text]
parser print bracket ":"
parser define bracket "[+" ... "+]" [text, operator 2]
parser define bracket "<+" ... "+>" [text + operator]
parser define bracket "<+" ... "+>" [code, operator 1]
       with parsing selectors [^ code, - math, + operator 1]
parser print bracket "<+"

parser trace [ + subexpression lines,
               + subexpression elements]
parser test "abc"
            "def"
parser test:
	"abc"
	"def"

parser test <+ hi there +> <+ hi [embedded] there +>
parser define bracket "[X" ... "X]" [code, operator 1]
       with parsing selectors [- code, + operator 1]
parser test [ a [ b c ] c ] [X a [ b c ] d X]
parser test this is a paragraph +:
    line 1
    line 2a:: line 2b; line 2c
    last line
parser define indentation mark "+:" ... "::" [code]
parser test this is a paragraph +:
    line 1
    line 2a:: line 2b; line 2c
    last line
parser test  <X| hi there |X>
parser trace [+ foo]
parser trace [+ parser commands]
parser trace [- parser commands]
parser trace [+ parser commands]
parser trace [+ warnings]
parser begin block 1
parser define bracket "<*" ... "*>" [code]
parser test <* hi there A *>
parser end block x
parser test <* hi there B *>
parser end block 1
parser test <* hi there C *>
parser end block 1
parser define bracket "<|" ... "|>" [code]
parser test <| hi there D |>
parser begin block 1
parser undefine bracket "<|" ... "|>" [code]
parser test <| hi there E |>
parser undefine bracket "<|" ... "|>" [code]
parser end block 1
parser test <| hi there F |>
parser undefine bracket "<|" ... "|>" [code]
parser test <| hi there F |>
parser undefine bracket "<|" ... "|>" [code]

parser define bracket "`" ... "'" [code]
parser define bracket "```" ... "'''" [code]
       with parsing options []
parser print bracket ""
parser test ( ``` ) ''' )
parser test ( ```
)
''' )
parser test ( ` ) ' )
parser test ( `
)
' )
parser test ( An indented paragraph:
		```This logical line continues on no
matter what, even with a spurious ), until
    the following is encountered- '''
                Second line of indented paragraph.
	      ) // End of () bracketed subexpression

parser test [? MISSING ?]
parser define bracket "[?" ... "?]" [code]
       with special reformatter
parser test [? MISSING ?]
parser test [@ x 1 @ y 2 @ w @ z 3 @]
parser define bracket "[@" ... "@]" [code]
       with multivalue reformatter ( "@" )
parser test [@ x 1 @ y 2 @ w @ z 3 @]

parser begin block 1
parser define indentation offset 4
parser print indentation offset
first line with indent 0
 line with indent 1
second line with indent 0
  line with indent 2
third line with indent 0
    line with indent 4
parser end block 1

parser print indentation offset
first line with indent 0
 line with indent 1
second line with indent 0
  line with indent 2
third line with indent 0
    line with indent 4

parser test:
	well ( hello:
	        goodbye ) there
	hi there

parser test:
	( hello:
	    goodbye ) there
	    hi there
	  ) end

parser test:
	( hello:
	    goodbye there
	    hi there
	) end

parser print header ""
parser define header "X" [code]
       with parsing selectors [code, math]
parser print header ""
parser print header "X"

parser define typed bracket "T1{" ... "|" ... "|" ... "}T1"
       [code, text, math, parser]
       with element selectors [data, prefix]
       with attribute selectors [data]
       with attributes "::" ... "==" ... "#"
parser define typed bracket "T2{" ... "|" ... "|" ... "}T2"
       [code, text, math, parser]
       with element selectors [data, prefix]
       with attribute selectors [data, code]
       with attributes "::" ... "==" ... "#"
       with attribute negator "NO"
       with attribute flags initiator "("
       with attribute multivalue initiator "[@"
       with prefix separators allowed

parser test T1{ T:: x == 5 # y == 6 | A B C |T}T1
parser test T2{ T:: x(1,2) == 5 # y == [@ 6 @ 7 @]
                | A B C |T}T2
parser test (T1{T}T1 A B C)
parser test (T2{T}T2 A B C)
parser test T1{T:: X # NO Y | A B | NO Z # W | C D | }T1
