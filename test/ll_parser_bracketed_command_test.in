// Layered Languages Parser Bracketed Command Test Data
//
// File:	ll_parser_bracketed_command_test.in
// Author:	Bob Walton (walton@acm.org)
// Date:	Mon Jun 10 15:59:30 EDT 2019
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

*PARSER*:
    print bracket ""
    print indentation mark ""
    print typed bracket ""

*PARSER*:
    define bracket "[+"
    define bracket "[+" ...
    print top level
    define selector text
    define selector code
    define selector math
    define selector operator 1
    print selector ""
    print top level

    define quoted string concatenator "#"
    define middle break "#" ... "#"
    print quoted string concatenator
    print middle break

    define bracket "(" ... ")" [code, math, text]
    define bracket "[" ... "]" [code, math, text]
    print bracket "["

    define indentation mark ":" ... ";"
    			    [code, math, text]
    print indentation mark ":"

    define bracket "[+" ... "+]" [text, operator 2]
    define bracket "<+" ... "+>" [text + operator]
    define bracket "<+" ... "+>" [code, operator 1]
        with parsing selectors
	     [^ code, - math, + operator 1]
    print bracket "<+"

*PARSER*:
    trace [ + subexpression lines,
            + subexpression elements]
*PARSER* *TEST*:
    "abc"
        # "def"
    "abc"
    # "def"
    <+ hi there +> <+ hi [embedded] there +>

*PARSER*:
    begin block BLOCK1
    define bracket "[X" ... "X]" [code, operator 1]
        with parsing selectors [- code, + operator 1]
*PARSER* *TEST*:
    [ a [ b c ] c ] [X a [ b c ] d X]
    this is a paragraph +:
	line 1
	line 2a:: line 2b; line 2c
	last line
*PARSER*:
    define indentation mark "+:" ... "::" [code]
*PARSER* *TEST*:
    this is a paragraph +:
	line 1
	line 2a:: line 2b; line 2c
	last line
    <X| hi there |X>
*PARSER*:
    end block BLOCK1

*PARSER*:
    trace [+ foo]
    trace [+ parser commands]
    trace [- parser commands]
    trace [+ parser commands]
    trace [+ warnings]

*PARSER*:
    begin block BLOCK1
    define bracket "<*" ... "*>" [code]
*PARSER* *TEST*:
    <* hi there A *>
*PARSER*:
    end block x
*PARSER* *TEST*:
    <* hi there B *>
*PARSER*:
    end block BLOCK1

*PARSER* *TEST*:
    <* hi there C *>
*PARSER*:
    end block BLOCK1

*PARSER*:
    define bracket "<|" ... "|>" [code]
*PARSER* *TEST*:
    <| hi there D |>

*PARSER*:
    begin block BLOCK1
    undefine bracket "<|" ... "|>" [code]
*PARSER* *TEST*:
    <| hi there E |>
*PARSER*:
    undefine bracket "<|" ... "|>" [code]
    end block BLOCK1

*PARSER* *TEST*:
    <| hi there F |>
*PARSER*:
    undefine bracket "<|" ... "|>" [code]
*PARSER* *TEST*:
    <| hi there F |>
*PARSER*:
    undefine bracket "<|" ... "|>" [code]

*PARSER*:
    begin block BLOCK1
    define bracket "`" ... "'" [code]
    define bracket "```" ... "'''" [code]
        with parsing options []
    print bracket ""
*PARSER* *TEST*:
    ( ``` ) ''' )
    ( ```
)
''' )
*PARSER* *TEST*:
    ( ` ) ' )
*PARSER* *TEST*:
    ( `
)
' )
*PARSER* *TEST*:
    A line, ( containing
       ```This logical line continues on no
matter what, even with a spurious ), until
    the following is encountered- '''
                more of the containment
	      ) // End of () bracketed subexpression
	stuff after bracketed subexpression
*PARSER*:
    end block BLOCK1

*PARSER*:
    begin block BLOCK1
*PARSER* *TEST*:
    [? MISSING ?]
*PARSER*:
    define bracket "[?" ... "?]" [code]
        with special reformatter
*PARSER* *TEST*:
    [? MISSING ?]
    [@ x 1 @ y 2 @ w @ z 3 @]
*PARSER*:
    define bracket "[@" ... "@]" [code]
        with multivalue reformatter ( "@" )
*PARSER* *TEST*:
    [@ x 1 @ y 2 @ w @ z 3 @]
*PARSER*:
    end block BLOCK1

*PARSER*:
    begin block BLOCK1
    define indentation offset 4
    print indentation offset

first line with indent 0
 line with indent 1
second line with indent 0
  line with indent 2
third line with indent 0
    line with indent 4

*PARSER*:
    end block BLOCK1

*PARSER*:
    begin block BLOCK1
    print indentation offset
    trace [+ parser output, - subexpression elements]

first line with indent 0
 line with indent 1
second line with indent 0
  line with indent 2
third line with indent 0
    line with indent 4

*PARSER*:
    trace [- parser output, + subexpression elements]

*PARSER* *TEST*:
	well ( hello:
	        goodbye there
	hi there

*PARSER*:
    end block BLOCK1

*PARSER*:
    begin block BLOCK1
    print bracket type ""
    define bracket type "X" [code]
        with parsing selectors [code, math]
    define bracket type "Y" [code]
        with parsing selectors [+ text]
        with group ajax
    define bracket type "Z" [math]
        with parsing selectors [code]
        with implied subprefix {X: y = 5, z = hi there}
        with lexical master "DEFAULT"
        with parsing options [end at indent]
    print bracket type ""
    print bracket type "X"
    end block BLOCK1

*PARSER*:
    define typed bracket "T1{" ... "|" ... "|" ... "}T1"
        [code, text, math, data]
        with element selectors [data]
        with attribute selectors [data]
        with attributes "::" ... "==" ... "#"
        with prefix selectors []
    define typed bracket "T2{" ... "|" ... "|" ... "}T2"
        [code, text, math, data]
        with element selectors [data]
        with attribute selectors [data, code]
        with attributes "::" ... "==" ... "#"
        with attribute negator "NO"
        with attribute flags initiator "("
        with attribute multivalue initiator "[@"
    define bracket "[@" ... "@]" [code]
        with multivalue reformatter ( "@" )

*PARSER* *TEST*:
    T1{ T:: x == 5 # y == 6 | A B C |T}T1
    T2{ T:: x(1,2) == 5 # y == [@ 6 @ 7 @] | A B C |T}T2
    (T1{T}T1 A B C)
    (T2{T}T2 A B C)
    T1{T:: X # NO Y | A B | NO Z # W | C D | }T1
    T2{T:: X # NO Y | A B | NO Z # W | C D | }T2
*PARSER*:
    undefine typed bracket
    	    "T2{" ... "|" ... "|" ... "}T2"
        [code, text, math, data]
*PARSER* *TEST*:
    (T2{T}T2 A B C)

*PARSER*:
    begin block BLOCK1
    print quoted string concatenator
*PARSER* *TEST*:
    "A" "B"
    "A" # "B"
    "A" # # "B"
*PARSER*:
    define quoted string concatenator enabled
    print quoted string concatenator
*PARSER* *TEST*:
    "A" "B"
    "A" # "B"
    "A" # # "B"
*PARSER*:
    define quoted string concatenator disabled
    print quoted string concatenator
*PARSER* *TEST*:
    "A" "B"
    "A" # "B"
    "A" # # "B"
*PARSER*:
    end block BLOCK1

*PARSER*:
    begin block BLOCK1
    define typed bracket "8" ... "|" ... "|" ... "9"
        [code, text, math, data]
        with element selectors [data]
        with attribute selectors [data, code]
        with attributes ":" ... "=" ... ","
        with attribute negator "no"
        with attribute flags initiator "["
        with attribute multivalue initiator "{*"
*PARSER* *TEST*:
    [8 my type: my attr = 99 9]
*PARSER*:
    end block BLOCK1
*PARSER* *TEST*:
    [8 my type: my attr = 99 9]

*PARSER*:
    begin block BLOCK1
    define bracket "[0" ... "0]" [code]
        with special reformatter
*PARSER* *TEST*:
    [0 LOGICAL_LINE 0]
*PARSER*:
    end block BLOCK1

*PARSER*:
    begin block BLOCK1
    define bracket type "P1" [code, text]
        with parsing selectors [text]
        with group paragraph
        with implied subprefix {S1}
        with parsing options [end at paragraph break]
    define bracket type "P2" [code, text]
        with parsing selectors [text]
        with group paragraph
        with parsing options [end at paragraph break]
    define bracket type "P3" [code, text]
        with parsing selectors [text]
        with group paragraph
        with implied subprefix {L3}
        with parsing options [end at paragraph break,
	                      end at line separator]
    define bracket type "L3" [text]
        with group line
    define bracket type "P4" [code, text]
        with parsing selectors [text]
        with group paragraph
        with implied subprefix {L4}
    define bracket type "L4" [text]
        with group line
    define typed bracket "{" ... "|" ... "|" ... "}"
        [code, text, math]
        // no element selectors
        with attribute selectors [data]
        with attributes ":" ... "=" ... ","
        with attribute negator "no"
        with attribute flags initiator "["
        with attribute multivalue initiator "{*"

    print bracket type ""

*PARSER* *TEST*:
    {P1}
    Hi there.
    {S1}Bye.
    {S1}And some more.

    And another paragraph.

    {P2} And a third paragraph
    that is continued
    over three lines.

    {P3} And a fourth paragraph; with
    line separators; and more line separators;
    and now the end.

    {P4} And a fith paragraph.
    With a second line; and a third line.
    and a fourth line.


*PARSER*:
    end block BLOCK1

*PARSER*:
    begin block BLOCK1
    define indentation mark "::" ... ";" [code]
        with implied header {p}
*PARSER* *TEST*:
    this is the indented paragraph 1::
        with one line
*PARSER*:
    define bracket type "p" [code]
        with group paragraph
*PARSER* *TEST*:
    this is the indented paragraph 2::
	with one line
*PARSER*:
    define bracket type "p" [code]
        with group paragraph
        with implied subprefix {l}
*PARSER* *TEST*:
    this is the indented paragraph 3::
	with a first line
	and a second line
*PARSER*:
    define bracket type "l" [code]
        with group line
*PARSER* *TEST*:
    this is the indented paragraph 4::
	with a first line
	and a second line
	and a third line with [ HI THERE ] embedded
*PARSER*:
    end block BLOCK1

*PARSER*:
    begin block BLOCK1
    define indentation mark "::" ... ";" [code]
        with implied header {p1}
    define typed bracket "{" ... "|" ... "|" ... "}"
        [code, text, math]
        // no element selectors
        with attribute selectors [data]
        with attributes ":" ... "=" ... ","
        with attribute negator "no"
        with attribute flags initiator "["
        with attribute multivalue initiator "{*"
    define bracket type "p1" [code]
        with group paragraph
        with implied subprefix {l1}
    define bracket type "l1" [code]
        with group line
    define bracket type "p2" [code]
        with group paragraph
        with implied subprefix {l2}
    define bracket type "l2" [code]
        with group line
*PARSER* *TEST*:
    this is the indented paragraph 5::
	with a first line
	and a second line with [HI THERE] embedded

	{p2}and a second subparagraph
	with a second line of its own

	and a third subparagraph
	with a second line of its own
	{p2} and a fourth subparagraph started
	     without in a previous blank line
	with a second line of its own

*PARSER*:
    define bracket type "p3" [code]
        with group paragraph
        with implied subprefix {l3}
        with parsing options [+ continuing]
    define bracket type "l3" [code]
        with group line
    print bracket type "p3"
*PARSER* *TEST*:
    this is the indented paragraph 6::
	with a first line
	and a second line with [HI THERE] embedded

	{p3}and a second subparagraph
	with a second line of its own

	and a third line after a blank line
	and a fourth line

	{p2} and a third subparagraph
	with a second line of its own
*PARSER*:
    end block BLOCK1

*PARSER*:
    begin block BLOCK1
    define typed bracket "{" ... "|" ... "|" ... "}"
        [code, text, math]
        // no element selectors
        with attribute selectors [data]
        with attributes ":" ... "=" ... ","
        with attribute negator "no"
        with attribute flags initiator "["
        with attribute multivalue initiator "{*"
    define bracket type "p1" [code]
        with group paragraph
        with implied subprefix {l1}
    define bracket type "l1" [code]
        with group line
    define bracket type "p2" [code]
        with group paragraph
        with implied subprefix {l2}
        with parsing options [+ continuing]
    define bracket type "l2" [code]
        with group line
    define bracket type "p3" [code]
        with group paragraph
        with parsing options [+ continuing]
    print bracket type ""
    trace [+ parser output]

{p1}

{p1} this is a first paragraph
and a line

and another line outside the first paragraph

{p2} this is a second paragraph
and a line

and another line outside the second paragraph

{p1} this is a third paragraph
and a line

and another line outside the third paragraph

{p3} this is a fourth paragraph
and a line

and another line outside the fourth paragraph

{p1}
this is a fifth paragraph
and a line

and another line outside the fifth paragraph
*PARSER*:
    trace [- parser output]
    end block BLOCK1

*PARSER*:
    begin block BLOCK1
    define typed bracket "{" ... "|" ... "|" ... "}"
        [code, text, math]
        // no element selectors
        with attribute selectors [data]
        with attributes ":" ... "=" ... ","
        with attribute negator "no"
        with attribute flags initiator "["
        with attribute multivalue initiator "{*"
    define bracket type "p1" [code]
        with group paragraph
        with implied subprefix {l1}
    define bracket type "l1" [code]
        with group line
    define bracket type "p2" [code]
        with group paragraph
        with implied subprefix {l2}
        with parsing options [+ sticky]
    define bracket type "l2" [code]
        with group line
    define bracket type "p3" [code]
        with group paragraph
        with parsing options [+ sticky]
    define bracket type "code" [code]
        with group paragraph
        with parsing options [+ reset]
    trace [+ parser output]
this is paragraph 1
and another line

{p1} this is paragraph 2
and another line

this is paragraph 3
and another line

{p2} this is paragraph 4
and another line

this is paragraph 5
and another line

{p1} this is paragraph 6
and another line

this is paragraph 7
and another line

{p3} this is paragraph 8
and another line

this is paragraph 9
and another line

{code}this is code line 1

and code line 2

{p1} this is paragraph 10
and another line

{p1}
this is paragraph 11
and another line

this is paragraph 12
and another line

{p3} this is paragraph 13
and another line

this is paragraph 14
and another line

{code}
this is code line 3

and code line 4

*PARSER*:
    trace [- parser output]
    end block BLOCK1

this is a test line

*PARSER*:
    begin block BLOCK1
    define typed bracket "{" ... "|" ... "|" ... "}"
        [code, text, math]
        // no element selectors
        with attribute selectors [data]
        with attributes ":" ... "=" ... ","
        with attribute negator "no"
        with attribute flags initiator "["
        with attribute multivalue initiator "{*"
    define bracket type "p" [code]
        with group paragraph
        with implied subprefix {l1}
    define bracket type "l1" [code]
        with group line
    define bracket type "l2" [code]
        with group line
    define bracket type "x" [code]
        with implied subprefix {l1}
    trace [+ parser output]
{l1} this is a line

{p} this is a paragraph line
and a second paragraph line
{l2}and a third paragraph line
and a fourth paragraph line

And another paragraph
with one extra line.

{l1} This is a line {l2} and continuation.
{l1} This is a line
{l2} and continuation.
{l1} And another line.
And a last line.

{p} This is a paragraph {p} and continuation.

{x} implied `l1' prefix in error
{l1}{l2} a stray line
{x}{l2} another stray line
({l2} a third stray)
({p} a fourth stray)
{p} and a fifth stray
*PARSER*:
    trace [- parser output]
    end block BLOCK1

*PARSER*:
    begin block BLOCK1
    define top level
           with parsing options
	     [end at indent, enable indented paragraph]
    trace [+ parser output, + subexpression details]

This is a logical line.
    And a second logical line.
And a third logical line.

*PARSER*:
    trace [- parser output, - subexpression details]
    end block BLOCK1

*PARSER*:
    begin block BLOCK1
    print middle break
    trace [+ parser output, + subexpression details]

this-is-a-#
    #continued-#
    #lexme

this-is-a-~
    ~continued-~
    ~lexme

*PARSER*:
    define middle break "~" ... "~"
    print middle break

this-is-a-#
    #continued-#
    #lexme

this-is-a-~
    ~continued-~
    ~lexme

*PARSER*:
    define middle break disabled
    print middle break

this-is-a-#
    #continued-#
    #lexme

this-is-a-~
    ~continued-~
    ~lexme

*PARSER*:
    trace [- parser output, - subexpression details]
    end block BLOCK1
