parser print bracket "":
    block TOP LEVEL: bracket [< "[" "<" >] ... [< ">" "]" >] [data]
                     with label reformatter
    block TOP LEVEL: bracket [< "{" "*" >] ... [< "*" "}" >] [data]
                     with multivalue reformatter ( "," )
    block TOP LEVEL: bracket "(" ... ")" [data]
    block TOP LEVEL: bracket "[" ... "]" [data]
    block TOP LEVEL: bracket "`" ... "'" [data]
    block TOP LEVEL: bracket [< "{" "{" >] ... [< "}" "}" >] [data]
    block TOP LEVEL: bracket "{" ... "|" ... "|" ... "}"
                     // "||" is also allowed.
                     [data]
                     with attribute selectors [data]
                     with attributes ":" ... "=" ... ","
                     with attribute negator "no"
                     with attribute flags initiator "["
                     with attribute multivalue initiator [< "{" "*" >]
    block TOP LEVEL: indentation mark [< "TOP" "LEVEL" >] ... ";" []
    block TOP LEVEL: bracket [< "[" "$" >] ... [< "$" "]" >] [data]
                     with special reformatter
ERROR: in line ##: too few quoted names in:
parser define bracket "[+"
^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR: in line ##: expected quoted name after:
parser define bracket "[+" ...
                           ^^^
parser print context "default":
    block standard: default [code]
                            options [end at le indent,
                                     end at line separator,
                                     end at outer closing]
    block TOP LEVEL: default []
                             options [end at le indent,
                                      end at line separator,
                                      end at outer closing]
parser define selector text
parser define selector code
parser define selector math
parser define selector operator 1
parser print selector "":
    block standard: operator 1
    block standard: math
    block standard: text
    block standard: code
    block TOP LEVEL: data
parser print context "default":
    block standard: default [code]
                            options [end at le indent,
                                     end at line separator,
                                     end at outer closing]
    block TOP LEVEL: default []
                             options [end at le indent,
                                      end at line separator,
                                      end at outer closing]
parser define bracket "(" ... ")" [code, math, text]
parser define bracket "[" ... "]" [code, math, text]
parser print bracket "[":
    block TOP LEVEL: bracket [< "[" "<" >] ... [< ">" "]" >] [data]
                     with label reformatter
    block standard: bracket "[" ... "]" [code, text, math]
    block TOP LEVEL: bracket "[" ... "]" [data]
    block TOP LEVEL: bracket [< "[" "$" >] ... [< "$" "]" >] [data]
                     with special reformatter
parser define indentation mark ":" ... ";" [code, math, text]
parser print bracket ":":
    block standard: indentation mark ":" ... ";" [code, text, math]
                    with parsing options [end at le indent,
                                          end at line separator,
                                          end at outer closing]
ERROR: in line ##: unrecognized flag/option name:
parser define bracket "[+" ... "+]" [text, operator 2]
                                           ^^^^^^^^^^
ERROR: in line ##: expected `,' after:
parser define bracket "<+" ... "+>" [text + operator]
                                     ^^^^
parser define bracket "<+" ... "+>" [code, operator 1]
       with parsing selectors [^ code, - math, + operator 1]
parser print bracket "<+":
    block standard: bracket "<+" ... "+>" [code, operator 1]
                    with parsing selectors [^ code, - math,
                                            + operator 1]
parser trace [ + subexpression lines,
               + subexpression elements]
======= TEST: parser test "abcdef"
------- lines ##-##:
parser test "abc"
^^^^^^^^^^^^^^^^^
            # "def"
^^^^^^^^^^^^^^^^^^^
------- lines ##-##:
parser test "abc"
            ^^^^^
            # "def"
^^^^^^^^^^^^^^^^^^^
======= END TEST
======= TEST: parser test:
                  "abc"
                  # "def"
------- lines ##-##:
parser test:
^^^^^^^^^^^^
        "abc"
^^^^^^^^^^^^^
        # "def"
^^^^^^^^^^^^^^^
------- lines ##-##:
parser test:
           ^
        "abc"
^^^^^^^^^^^^^
        # "def"
^^^^^^^^^^^^^^^
------- line ##:
        "abc"
        ^^^^^
------- line ##:
        "abc"
        ^^^^^
------- line ##:
        # "def"
        ^^^^^^^
------- line ##:
        # "def"
          ^^^^^
======= END TEST
======= TEST: parser test <+ hi there +> <+ hi "[" embedded "]" there +>
------- line ##:
parser test <+ hi there +> <+ hi [embedded] there +>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ##:
parser test <+ hi there +> <+ hi [embedded] there +>
            ^^^^^^^^^^^^^^
------- line ##:
parser test <+ hi there +> <+ hi [embedded] there +>
                           ^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser begin block 1
parser define bracket "[X" ... "X]" [code, operator 1]
       with parsing selectors [- code, + operator 1]
======= TEST: parser test [a [b c] c] [X a "[" b c "]" d X]
------- line ##:
parser test [ a [ b c ] c ] [X a [ b c ] d X]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ##:
parser test [ a [ b c ] c ] [X a [ b c ] d X]
            ^^^^^^^^^^^^^^^
------- line ##:
parser test [ a [ b c ] c ] [X a [ b c ] d X]
                ^^^^^^^
------- line ##:
parser test [ a [ b c ] c ] [X a [ b c ] d X]
                            ^^^^^^^^^^^^^^^^^
======= END TEST
======= TEST: parser test this is a paragraph +:
                  line #
                  line {# 2a #} "::" line {# 2b #}; line {# 2c #}
                  last line
------- lines ##-##:
parser test this is a paragraph +:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    line #
^^^^^^^^^^
    line #a:: line #b; line #c
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    last line
^^^^^^^^^^^^^
------- lines ##-##:
parser test this is a paragraph +:
                                 ^
    line #
^^^^^^^^^^
    line #a:: line #b; line #c
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    last line
^^^^^^^^^^^^^
------- line ##:
    line #
    ^^^^^^
------- line ##:
    line #a:: line #b; line #c
    ^^^^^^^^^^^^^^^^^^
------- line ##:
    line #a:: line #b; line #c
         ^^
------- line ##:
    line #a:: line #b; line #c
                   ^^
------- line ##:
    line #a:: line #b; line #c
                       ^^^^^^^
------- line ##:
    line #a:: line #b; line #c
                            ^^
------- line ##:
    last line
    ^^^^^^^^^
======= END TEST
parser define indentation mark "+:" ... "::" [code]
======= TEST: parser test this is a paragraph+:
                  line #
                  line {# 2a #}:: line {# 2b #} ";" line {# 2c #}
                  last line
------- lines ##-##:
parser test this is a paragraph +:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    line #
^^^^^^^^^^
    line #a:: line #b; line #c
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    last line
^^^^^^^^^^^^^
------- lines ##-##:
parser test this is a paragraph +:
                                ^^
    line #
^^^^^^^^^^
    line #a:: line #b; line #c
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    last line
^^^^^^^^^^^^^
------- line ##:
    line #
    ^^^^^^
------- line ##:
    line #a:: line #b; line #c
    ^^^^^^^^^
------- line ##:
    line #a:: line #b; line #c
         ^^
------- line ##:
    line #a:: line #b; line #c
              ^^^^^^^^^^^^^^^^
------- line ##:
    line #a:: line #b; line #c
                   ^^
------- line ##:
    line #a:: line #b; line #c
                            ^^
------- line ##:
    last line
    ^^^^^^^^^
======= END TEST
======= TEST: parser test <X "|" hi there "|" X>
------- line ##:
parser test  <X| hi there |X>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser end block 1
ERROR: in line ##: unrecognized flag/option name:
parser trace [+ foo]
                ^^^
parser trace [+ parser commands]
parser trace [+ parser commands]
parser trace [+ warnings]
parser begin block 1
parser define bracket "<*" ... "*>" [code]
======= TEST: parser test <* hi there A *>
------- line ##:
parser test <* hi there A *>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ##:
parser test <* hi there A *>
            ^^^^^^^^^^^^^^^^
======= END TEST
ERROR: in line ##: innermost block name does not match `block x':
parser end block x
^^^^^^^^^^^^^^^^^^
======= TEST: parser test <* hi there B *>
------- line ##:
parser test <* hi there B *>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ##:
parser test <* hi there B *>
            ^^^^^^^^^^^^^^^^
======= END TEST
parser end block 1
======= TEST: parser test <* hi there C *>
------- line ##:
parser test <* hi there C *>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
ERROR: in line ##: innermost block name does not match `block 1':
parser end block 1
^^^^^^^^^^^^^^^^^^
parser define bracket "<|" ... "|>" [code]
======= TEST: parser test < |hi there D| >
------- line ##:
parser test <| hi there D |>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ##:
parser test <| hi there D |>
            ^^^^^^^^^^^^^^^^
======= END TEST
parser begin block 1
parser undefine bracket "<|" ... "|>" [code]
======= TEST: parser test < "|" hi there E "|" >
------- line ##:
parser test <| hi there E |>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
WARNING: in line ##: undefine found no definition:
parser undefine bracket "<|" ... "|>" [code]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
parser undefine bracket "<|" ... "|>" [code]
parser end block 1
======= TEST: parser test < |hi there F| >
------- line ##:
parser test <| hi there F |>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ##:
parser test <| hi there F |>
            ^^^^^^^^^^^^^^^^
======= END TEST
parser undefine bracket "<|" ... "|>" [code]
======= TEST: parser test < "|" hi there F "|" >
------- line ##:
parser test <| hi there F |>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
WARNING: in line ##: undefine found no definition:
parser undefine bracket "<|" ... "|>" [code]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
parser undefine bracket "<|" ... "|>" [code]
parser begin block 1
parser define bracket "`" ... "'" [code]
parser define bracket "```" ... "'''" [code]
       with parsing options []
parser print bracket "":
    block TOP LEVEL: bracket [< "[" "<" >] ... [< ">" "]" >] [data]
                     with label reformatter
    block TOP LEVEL: bracket [< "{" "*" >] ... [< "*" "}" >] [data]
                     with multivalue reformatter ( "," )
    block standard: bracket "(" ... ")" [code, text, math]
    block TOP LEVEL: bracket "(" ... ")" [data]
    block standard: indentation mark ":" ... ";" [code, text, math]
                    with parsing options [end at le indent,
                                          end at line separator,
                                          end at outer closing]
    block standard: bracket "[" ... "]" [code, text, math]
    block TOP LEVEL: bracket "[" ... "]" [data]
    block block 1: bracket "`" ... "'" [code]
    block TOP LEVEL: bracket "`" ... "'" [data]
    block TOP LEVEL: bracket [< "{" "{" >] ... [< "}" "}" >] [data]
    block TOP LEVEL: bracket "{" ... "|" ... "|" ... "}"
                     // "||" is also allowed.
                     [data]
                     with attribute selectors [data]
                     with attributes ":" ... "=" ... ","
                     with attribute negator "no"
                     with attribute flags initiator "["
                     with attribute multivalue initiator [< "{" "*" >]
    block block 1: bracket [< "`" "`" "`" >] ... [< "'" "'" "'" >]
                   [code]
                   with parsing options []
    block standard: bracket [< "<" "|" >] ... [< "|" ">" >] []
    block TOP LEVEL: indentation mark [< "TOP" "LEVEL" >] ... ";" []
    block standard: bracket "<+" ... "+>" [code, operator 1]
                    with parsing selectors [^ code, - math,
                                            + operator 1]
    block TOP LEVEL: bracket [< "[" "$" >] ... [< "$" "]" >] [data]
                     with special reformatter
======= TEST: parser test (```")"''')
------- line ##:
parser test ( ``` ) ''' )
^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ##:
parser test ( ``` ) ''' )
            ^^^^^^^^^^^^^
------- line ##:
parser test ( ``` ) ''' )
              ^^^^^^^^^
======= END TEST
======= TEST: parser test (```")"''')
------- lines ##-##:
parser test ( ```
^^^^^^^^^^^^^^^^^
)
^
''' )
^^^^^
------- lines ##-##:
parser test ( ```
            ^^^^^
)
^
''' )
^^^^^
------- lines ##-##:
parser test ( ```
              ^^^
)
^
''' )
^^^
======= END TEST
ERROR: in line ##: missing closing bracket `'' inserted before `)':
parser test ( ` ) ' )
                ^
======= TEST: parser test (`') "'" ")"
------- line ##:
parser test ( ` ) ' )
^^^^^^^^^^^^^^^^^^^^^
------- line ##:
parser test ( ` ) ' )
            ^^^^^
------- line ##:
parser test ( ` ) ' )
              ^
======= END TEST
ERROR: in line ##: missing closing bracket `'' inserted just before
       here:
)
^
ERROR: in line ##: missing closing bracket `)' inserted just before
       here:
)
^
======= TEST: parser test (`')
------- line ##:
parser test ( `
^^^^^^^^^^^^^^^
------- line ##:
parser test ( `
            ^^^
------- line ##:
parser test ( `
              ^
======= END TEST
======= TEST: parser test
                  (An indented paragraph
                   {"": .terminator = [$ INDENTED_PARAGRAPH $],
                        .initiator = ":"|
                        {"": .terminator = "<LF>", .initiator =
                             [$ LOGICAL_LINE $]|
                             ```This logical line continues on no matter
                                what "," even with a spurious ")" ","
                                until the following is encountered-'''|}
                        {"": .terminator = "<LF>", .initiator =
                             [$ LOGICAL_LINE $]|Second line of indented
                             paragraph "."|}|})
------- lines ###-###:
parser test ( An indented paragraph:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                ```This logical line continues on no
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
matter what, even with a spurious ), until
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the following is encountered- '''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                Second line of indented paragraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              ) // End of () bracketed subexpression
^^^^^^^^^^^^^^^
------- lines ###-###:
parser test ( An indented paragraph:
            ^^^^^^^^^^^^^^^^^^^^^^^^
                ```This logical line continues on no
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
matter what, even with a spurious ), until
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the following is encountered- '''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                Second line of indented paragraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              ) // End of () bracketed subexpression
^^^^^^^^^^^^^^^
------- lines ###-###:
parser test ( An indented paragraph:
                                   ^
                ```This logical line continues on no
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
matter what, even with a spurious ), until
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the following is encountered- '''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                Second line of indented paragraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
                ```This logical line continues on no
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
matter what, even with a spurious ), until
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the following is encountered- '''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
                ```This logical line continues on no
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
matter what, even with a spurious ), until
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the following is encountered- '''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
                Second line of indented paragraph.
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser end block 1
parser begin block 1
======= TEST: parser test ["?" MISSING "?"]
------- line ###:
parser test [? MISSING ?]
^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test [? MISSING ?]
            ^^^^^^^^^^^^^
======= END TEST
parser define bracket "[?" ... "?]" [code]
       with special reformatter
======= TEST: parser test [$ MISSING $]
------- line ###:
parser test [? MISSING ?]
^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
======= TEST: parser test [@ x 1 @ y 2 @ w @ z 3 @]
------- line ###:
parser test [@ x 1 @ y 2 @ w @ z 3 @]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test [@ x 1 @ y 2 @ w @ z 3 @]
            ^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser define bracket "[@" ... "@]" [code]
       with multivalue reformatter ( "@" )
======= TEST: parser test [@ [< x 1 >] @ [< y 2 >] @ w @ [< z 3 >] @]
------- line ###:
parser test [@ x 1 @ y 2 @ w @ z 3 @]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test [@ x 1 @ y 2 @ w @ z 3 @]
            ^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser end block 1
parser begin block 1
parser define indentation offset 4
parser print indentation offset:
    block block 1: 4
    block standard: 2
    block TOP LEVEL: 2
WARNING: in line ###: lexeme indent 1 too near paragraph indent 0:
 line with indent 1
 ^
WARNING: in line ###: lexeme indent 2 too near paragraph indent 0:
  line with indent 2
  ^
parser end block 1
parser begin block 1
parser print indentation offset:
    block block 1: 2
    block standard: 2
    block TOP LEVEL: 2
WARNING: in line ###: lexeme indent 1 too near paragraph indent 0:
 line with indent 1
 ^
======= TEST: parser test:
                  well
                      (hello
                       {"": .terminator = [$ INDENTED_PARAGRAPH $],
                            .initiator = ":"|
                            {"": .terminator = "<LF>", .initiator =
                                 [$ LOGICAL_LINE $]|goodbye|}|}) there
                  hi there
------- lines ###-###:
parser test:
^^^^^^^^^^^^
        well ( hello:
^^^^^^^^^^^^^^^^^^^^^
                goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        hi there
^^^^^^^^^^^^^^^^
------- lines ###-###:
parser test:
           ^
        well ( hello:
^^^^^^^^^^^^^^^^^^^^^
                goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        hi there
^^^^^^^^^^^^^^^^
------- lines ###-###:
        well ( hello:
        ^^^^^^^^^^^^^
                goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
        well ( hello:
             ^^^^^^^^
                goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
        well ( hello:
                    ^
                goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
                goodbye ) there
                ^^^^^^^
------- line ###:
        hi there
        ^^^^^^^^
======= END TEST
======= TEST: parser test:
                  (hello
                   {"": .terminator = [$ INDENTED_PARAGRAPH $],
                        .initiator = ":"|
                        {"": .terminator = "<LF>", .initiator =
                             [$ LOGICAL_LINE $]|goodbye|}|}) there hi
                      there ")" end
------- lines ###-###:
parser test:
^^^^^^^^^^^^
        ( hello:
^^^^^^^^^^^^^^^^
            goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
          ) end
^^^^^^^^^^^^^^^
------- lines ###-###:
parser test:
           ^
        ( hello:
^^^^^^^^^^^^^^^^
            goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
          ) end
^^^^^^^^^^^^^^^
------- lines ###-###:
        ( hello:
        ^^^^^^^^
            goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
          ) end
^^^^^^^^^^^^^^^
------- lines ###-###:
        ( hello:
        ^^^^^^^^
            goodbye ) there
^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
        ( hello:
               ^
            goodbye ) there
^^^^^^^^^^^^^^^^^^^
------- line ###:
            goodbye ) there
            ^^^^^^^
======= END TEST
ERROR: in line ###: missing closing bracket `)' inserted just before
       here:
        ) end
        ^
======= TEST: parser test:
                  (hello
                   {"": .terminator = [$ INDENTED_PARAGRAPH $],
                        .initiator = ":"|
                        {"": .terminator = "<LF>", .initiator =
                             [$ LOGICAL_LINE $]|goodbye there|}
                        {"": .terminator = "<LF>", .initiator =
                             [$ LOGICAL_LINE $]|hi there|}|})
                  ")" end
------- lines ###-###:
parser test:
^^^^^^^^^^^^
        ( hello:
^^^^^^^^^^^^^^^^
            goodbye there
^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
        ) end
^^^^^^^^^^^^^
------- lines ###-###:
parser test:
           ^
        ( hello:
^^^^^^^^^^^^^^^^
            goodbye there
^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
        ) end
^^^^^^^^^^^^^
------- lines ###-###:
        ( hello:
        ^^^^^^^^
            goodbye there
^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
        ( hello:
        ^^^^^^^^
            goodbye there
^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
        ( hello:
               ^
            goodbye there
^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
------- line ###:
            goodbye there
            ^^^^^^^^^^^^^
------- line ###:
            hi there
            ^^^^^^^^
------- line ###:
        ) end
        ^^^^^
======= END TEST
parser end block 1
parser begin block 1
parser print prefix "":
    not found
parser define prefix "X" [code]
       with parsing selectors [code, math]
parser define prefix "Y" [code]
       with parsing selectors [+ text]
       with group ajax
parser define prefix "Z" [math]
       with parsing selectors [code]
       with implied subprefix {X: y = 5, z = hi there}
       with lexical master "START"
       with parsing options [end at line break]
parser print prefix "":
    block block 1: prefix "X" [code]
                   with parsing selectors [code, math]
    block block 1: prefix "Y" [code]
                   with parsing selectors [+ text]
                   with group ajax
    block block 1: prefix "Z" [math]
                   with parsing selectors [code]
                   with implied subprefix
                   {X: y = "5", z = [< "hi" "there" >]||X}
                   with lexical master "START"
                   with parsing options [end at line break]
parser print prefix "X":
    block block 1: prefix "X" [code]
                   with parsing selectors [code, math]
parser end block 1
parser define typed bracket "T1{" ... "|" ... "|" ... "}T1"
       [code, text, math, data]
       with element selectors [data]
       with attribute selectors [data]
       with attributes "::" ... "==" ... "#"
parser define typed bracket "T2{" ... "|" ... "|" ... "}T2"
       [code, text, math, data]
       with element selectors [data]
       with attribute selectors [data, code]
       with attributes "::" ... "==" ... "#"
       with attribute negator "NO"
       with attribute flags initiator "("
       with attribute multivalue initiator "[@"
       with prefix separators allowed
parser define bracket "[@" ... "@]" [code]
       with multivalue reformatter ( "@" )
======= TEST: parser test {T: x = "5", y = "6"|A B C|T}
------- line ###:
parser test T1{ T:: x == 5 # y == 6 | A B C |T}T1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test T1{ T:: x == 5 # y == 6 | A B C |T}T1
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
======= TEST: parser test {T: x[+-] = "5", y = {* "6", "7" *}|A B C|T}
------- lines ###-###:
parser test T2{ T:: x(1,2) == 5 # y == [@ 6 @ 7 @]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                | A B C |T}T2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
parser test T2{ T:: x(1,2) == 5 # y == [@ 6 @ 7 @]
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                | A B C |T}T2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
======= TEST: parser test ({T||T} A B C)
------- line ###:
parser test (T1{T}T1 A B C)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test (T1{T}T1 A B C)
            ^^^^^^^^^^^^^^^
------- line ###:
parser test (T1{T}T1 A B C)
             ^^^^^^^
======= END TEST
======= TEST: parser test ({T|A B C|T})
------- line ###:
parser test (T2{T}T2 A B C)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test (T2{T}T2 A B C)
            ^^^^^^^^^^^^^^^
------- line ###:
parser test (T2{T}T2 A B C)
             ^^^^^^^^^^^^^
======= END TEST
======= TEST: parser test {T: NO Z, X, W, NO Y|A B C D|T}
------- line ###:
parser test T1{T:: X # NO Y | A B | NO Z # W | C D | }T1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test T1{T:: X # NO Y | A B | NO Z # W | C D | }T1
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser undefine typed bracket "T2{" ... "|" ... "|" ... "}T2"
       [code, text, math, data]
======= TEST: parser test (T2 "{" T "}" T2 A B C)
------- line ###:
parser test (T2{T}T2 A B C)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test (T2{T}T2 A B C)
            ^^^^^^^^^^^^^^^
======= END TEST
parser begin block 1
parser print string concatenator:
    block block 1: "#"
    block standard: "#"
    block TOP LEVEL: "#"
======= TEST: parser test "AB"
------- line ###:
parser test "A" # "B"
^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test "A" # "B"
            ^^^^^^^^^
======= END TEST
======= TEST: parser test "A" "B"
------- line ###:
parser test "A" "B"
^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test "A" "B"
            ^^^
------- line ###:
parser test "A" "B"
                ^^^
======= END TEST
parser define string concatenator enabled
parser print string concatenator:
    block block 1: enabled
    block standard: "#"
    block TOP LEVEL: "#"
======= TEST: parser test "A" # "B"
------- line ###:
parser test "A" # "B"
^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test "A" # "B"
            ^^^
------- line ###:
parser test "A" # "B"
                  ^^^
======= END TEST
======= TEST: parser test "AB"
------- line ###:
parser test "A" "B"
^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test "A" "B"
            ^^^^^^^
======= END TEST
parser define string concatenator disabled
parser print string concatenator:
    block block 1: disabled
    block standard: "#"
    block TOP LEVEL: "#"
======= TEST: parser test "A" # "B"
------- line ###:
parser test "A" # "B"
^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test "A" # "B"
            ^^^
------- line ###:
parser test "A" # "B"
                  ^^^
======= END TEST
======= TEST: parser test "A" "B"
------- line ###:
parser test "A" "B"
^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test "A" "B"
            ^^^
------- line ###:
parser test "A" "B"
                ^^^
======= END TEST
parser end block 1
parser begin block 1
parser define typed bracket "8" ... "|" ... "|" ... "9"
       [code, text, math, data]
       with element selectors [data]
       with attribute selectors [data, code]
       with attributes ":" ... "=" ... ","
       with attribute negator "no"
       with attribute flags initiator "["
       with attribute multivalue initiator "{*"
       with prefix separators allowed
======= TEST: parser test [{my type: my attr = "99"||my type}]
------- line ###:
parser test [8 my type: my attr = 99 9]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test [8 my type: my attr = 99 9]
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test [8 my type: my attr = 99 9]
             ^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser end block 1
======= TEST: parser test [8 my type ":" my attr = 99 9]
------- line ###:
parser test [8 my type: my attr = 99 9]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test [8 my type: my attr = 99 9]
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser begin block 1
parser define bracket "[0" ... "0]" [code]
       with special reformatter
======= TEST: parser test [$ LOGICAL_LINE $]
------- line ###:
parser test [0 LOGICAL_LINE 0]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser end block 1
parser begin block 1
parser define prefix "P1" [code, text]
       with parsing selectors [text]
       with group P
       with implied subprefix {S1}
       with parsing options [end at paragraph break]
parser define prefix "P2" [code, text]
       with parsing selectors [text]
       with group P
       with implied subprefix {S2}
       with parsing options [end at paragraph break]
parser define prefix "P3" [code, text]
       with parsing selectors [text]
       with group P
       with parsing options [end at paragraph break]
parser define prefix "S1" [text]
       with group S
parser define prefix "S2" [text]
       with group S
parser define typed bracket "{" ... "|" ... "|" ... "}"
       [code, text, math]
       // no element selectors
       with attribute selectors [data]
       with attributes ":" ... "=" ... ","
       with attribute negator "no"
       with attribute flags initiator "["
       with attribute multivalue initiator "{*"
       with prefix separators allowed
parser print prefix "":
    block block 1: prefix "S1" [text]
                   with group S
    block block 1: prefix "S2" [text]
                   with group S
    block block 1: prefix "P1" [code, text]
                   with parsing selectors [text]
                   with group P
                   with implied subprefix {S1||S1}
                   with parsing options [end at paragraph break]
    block block 1: prefix "P2" [code, text]
                   with parsing selectors [text]
                   with group P
                   with implied subprefix {S2||S2}
                   with parsing options [end at paragraph break]
    block block 1: prefix "P3" [code, text]
                   with parsing selectors [text]
                   with group P
                   with parsing options [end at paragraph break]
======= TEST: parser test:
                  {P1|{S1|Hi there "."|S1}|P1} {P2|{S2|Bye "."|S2}|P2}
                      {P3|And some more "."|P3}
------- lines ###-###:
parser test:
^^^^^^^^^^^^
    {P1} Hi there.
^^^^^^^^^^^^^^^^^^
    {P2} Bye.
^^^^^^^^^^^^^
    {P3} And some more.
^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
parser test:
           ^
    {P1} Hi there.
^^^^^^^^^^^^^^^^^^
    {P2} Bye.
^^^^^^^^^^^^^
    {P3} And some more.
^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
    {P1} Hi there.
    ^^^^^^^^^^^^^^
    {P2} Bye.
^^^^^^^^^^^^^
    {P3} And some more.
^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    {P1} Hi there.
    ^^^^^^^^^^^^^^
------- line ###:
    {P1} Hi there.
        ^^^^^^^^^^
------- line ###:
    {P2} Bye.
    ^^^^^^^^^
------- line ###:
    {P2} Bye.
        ^^^^^
------- line ###:
    {P3} And some more.
    ^^^^^^^^^^^^^^^^^^^
======= END TEST
ERROR: in line ###: prefix separator of type `XX' not at beginning of
       subexpression; ignored:
    {P3} {S2} Fifth sentence. {XX} Sixth sentence.
                              ^^^^
======= TEST: parser test:
                  {P1|{S1|First sentence "."|S1}
                      {S2|Second sentence "."|S2}|P1}
                      {P2|{S1|Third sentence "."|S1}
                          {S2|Fourth sentence "."|S2}|P2}
                      {P3|{S2|Fifth sentence "." Sixth sentence "."|S2}
                          {S1|{XX|Seventh sentence "."|XX}|S1}|P3}
------- lines ###-###:
parser test:
^^^^^^^^^^^^
    {P1} First sentence. {S2} Second sentence.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {P2} {S1} Third sentence. {S2} Fourth sentence.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {P3} {S2} Fifth sentence. {XX} Sixth sentence.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         {S1} {XX} Seventh sentence.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
parser test:
           ^
    {P1} First sentence. {S2} Second sentence.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {P2} {S1} Third sentence. {S2} Fourth sentence.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {P3} {S2} Fifth sentence. {XX} Sixth sentence.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         {S1} {XX} Seventh sentence.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
    {P1} First sentence. {S2} Second sentence.
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {P2} {S1} Third sentence. {S2} Fourth sentence.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {P3} {S2} Fifth sentence. {XX} Sixth sentence.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         {S1} {XX} Seventh sentence.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    {P1} First sentence. {S2} Second sentence.
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    {P1} First sentence. {S2} Second sentence.
        ^^^^^^^^^^^^^^^^
------- line ###:
    {P1} First sentence. {S2} Second sentence.
                         ^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    {P2} {S1} Third sentence. {S2} Fourth sentence.
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    {P2} {S1} Third sentence. {S2} Fourth sentence.
         ^^^^^^^^^^^^^^^^^^^^
------- line ###:
    {P2} {S1} Third sentence. {S2} Fourth sentence.
                              ^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
    {P3} {S2} Fifth sentence. {XX} Sixth sentence.
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         {S1} {XX} Seventh sentence.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    {P3} {S2} Fifth sentence. {XX} Sixth sentence.
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
         {S1} {XX} Seventh sentence.
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
         {S1} {XX} Seventh sentence.
              ^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser end block 1
