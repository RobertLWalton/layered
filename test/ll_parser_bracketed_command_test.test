parser print bracket "":
    block TOP LEVEL: bracket [< "[" "<" >] ... [< ">" "]" >] [data]
                     with parsing selectors [- TOP LEVEL]
                     with label reformatter
    block TOP LEVEL: bracket [< "{" "*" >] ... [< "*" "}" >] [data]
                     with parsing selectors [- TOP LEVEL]
                     with multivalue reformatter ( "," )
    block TOP LEVEL: bracket "(" ... ")" [data]
                     with parsing selectors [- TOP LEVEL]
    block TOP LEVEL: bracket "[" ... "]" [data]
                     with parsing selectors [- TOP LEVEL]
    block TOP LEVEL: bracket "`" ... "'" [data]
                     with parsing selectors [- TOP LEVEL]
    block TOP LEVEL: bracket [< "{" "{" >] ... [< "}" "}" >] [data]
                     with parsing selectors [- TOP LEVEL]
    block TOP LEVEL: bracket "{" ... "|" ... "|" ... "}"
                     // "||" is also allowed.
                     [data]
                     with parsing selectors [- TOP LEVEL]
                     with attribute selectors [data]
                     with attributes ":" ... "=" ... ","
                     with attribute negator "no"
                     with attribute flags initiator "["
                     with attribute multivalue initiator [< "{" "*" >]
    block TOP LEVEL: indentation mark [< "parser" ":" >] ... ";"
                     [TOP LEVEL]
                     with parsing selectors [data]
    block TOP LEVEL: indentation mark [< "parser" "test" ":" >] ... ";"
                     [TOP LEVEL]
                     with parsing selectors [- TOP LEVEL]
    block TOP LEVEL: indentation mark [< "TOP" "LEVEL" >] ... ";" []
                     with parsing selectors [- TOP LEVEL]
    block TOP LEVEL: bracket [< "[" "$" >] ... [< "$" "]" >] [data]
                     with parsing selectors [- TOP LEVEL]
                     with special reformatter
ERROR: in line ##: too few quoted names in:
parser define bracket "[+"
^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR: in line ##: expected quoted name after:
parser define bracket "[+" ...
                           ^^^
parser print context "default":
    block standard: default [TOP LEVEL, code]
                            options [end at le indent,
                                     end at line separator,
                                     end at outer closing]
    block TOP LEVEL: default [TOP LEVEL]
                             options [end at le indent,
                                      end at line separator,
                                      end at outer closing]
parser define selector text
parser define selector code
parser define selector math
parser define selector operator 1
parser print selector "":
    block standard: operator 1
    block standard: math
    block standard: text
    block standard: code
    block TOP LEVEL: data
    block TOP LEVEL: TOP LEVEL
parser print context "default":
    block standard: default [TOP LEVEL, code]
                            options [end at le indent,
                                     end at line separator,
                                     end at outer closing]
    block TOP LEVEL: default [TOP LEVEL]
                             options [end at le indent,
                                      end at line separator,
                                      end at outer closing]
parser define bracket "(" ... ")" [code, math, text]
parser define bracket "[" ... "]" [code, math, text]
parser print bracket "[":
    block TOP LEVEL: bracket [< "[" "<" >] ... [< ">" "]" >] [data]
                     with parsing selectors [- TOP LEVEL]
                     with label reformatter
    block standard: bracket "[" ... "]" [code, text, math]
                    with parsing selectors [- TOP LEVEL]
    block TOP LEVEL: bracket "[" ... "]" [data]
                     with parsing selectors [- TOP LEVEL]
    block TOP LEVEL: bracket [< "[" "$" >] ... [< "$" "]" >] [data]
                     with parsing selectors [- TOP LEVEL]
                     with special reformatter
parser define indentation mark ":" ... ";" [code, math, text]
parser print bracket ":":
    block standard: indentation mark ":" ... ";" [code, text, math]
                    with parsing selectors [- TOP LEVEL]
                    with parsing options [end at le indent,
                                          end at line separator,
                                          end at outer closing]
    block TOP LEVEL: indentation mark [< "parser" ":" >] ... ";"
                     [TOP LEVEL]
                     with parsing selectors [data]
    block TOP LEVEL: indentation mark [< "parser" "test" ":" >] ... ";"
                     [TOP LEVEL]
                     with parsing selectors [- TOP LEVEL]
ERROR: in line ##: unrecognized flag/option name:
parser define bracket "[+" ... "+]" [text, operator 2]
                                           ^^^^^^^^^^
ERROR: in line ##: expected `,' after:
parser define bracket "<+" ... "+>" [text + operator]
                                     ^^^^
parser define bracket "<+" ... "+>" [code, operator 1]
       with parsing selectors [^ code, - math, + operator 1]
parser print bracket "<+":
    block standard: bracket "<+" ... "+>" [code, operator 1]
                    with parsing selectors [- TOP LEVEL, ^ code, - math,
                                            + operator 1]
parser trace [ + subexpression lines,
               + subexpression elements]
======= PARSER TEST: "abcdef"
======= lines ##-##:
    "abc"
    ^^^^^
        # "def"
^^^^^^^^^^^^^^^
------- lines ##-##:
    "abc"
    ^^^^^
        # "def"
^^^^^^^^^^^^^^^
======= PARSER TEST: "abc"
======= line ##:
    "abc"
    ^^^^^
------- line ##:
    "abc"
    ^^^^^
======= PARSER TEST: # "def"
======= line ##:
    # "def"
    ^^^^^^^
------- line ##:
    # "def"
      ^^^^^
======= PARSER TEST: <+ hi there +> <+ hi "[" embedded "]" there +>
======= line ##:
    <+ hi there +> <+ hi [embedded] there +>
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ##:
    <+ hi there +> <+ hi [embedded] there +>
    ^^^^^^^^^^^^^^
------- line ##:
    <+ hi there +> <+ hi [embedded] there +>
                   ^^^^^^^^^^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
parser begin block 1
parser define bracket "[X" ... "X]" [code, operator 1]
       with parsing selectors [- code, + operator 1]
======= PARSER TEST: [a [b c] c] [X a "[" b c "]" d X]
======= line ##:
    [ a [ b c ] c ] [X a [ b c ] d X]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ##:
    [ a [ b c ] c ] [X a [ b c ] d X]
    ^^^^^^^^^^^^^^^
------- line ##:
    [ a [ b c ] c ] [X a [ b c ] d X]
        ^^^^^^^
------- line ##:
    [ a [ b c ] c ] [X a [ b c ] d X]
                    ^^^^^^^^^^^^^^^^^
======= PARSER TEST: this is a paragraph +:
                         line #
                         line {# 2a #} "::" line {# 2b #}; line {# 2c #}
                         last line
======= lines ##-##:
    this is a paragraph +:
    ^^^^^^^^^^^^^^^^^^^^^^
        line #
^^^^^^^^^^^^^^
        line #a:: line #b; line #c
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        last line
^^^^^^^^^^^^^^^^^
------- lines ##-##:
    this is a paragraph +:
                         ^
        line #
^^^^^^^^^^^^^^
        line #a:: line #b; line #c
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        last line
^^^^^^^^^^^^^^^^^
------- line ##:
        line #
        ^^^^^^
------- line ##:
        line #a:: line #b; line #c
        ^^^^^^^^^^^^^^^^^^
------- line ##:
        line #a:: line #b; line #c
             ^^
------- line ##:
        line #a:: line #b; line #c
                       ^^
------- line ##:
        line #a:: line #b; line #c
                           ^^^^^^^
------- line ##:
        line #a:: line #b; line #c
                                ^^
------- line ##:
        last line
        ^^^^^^^^^
======= END PARSER TEST(S)
parser define indentation mark "+:" ... "::" [code]
======= PARSER TEST: this is a paragraph+:
                         line #
                         line {# 2a #}:: line {# 2b #} ";" line {# 2c #}
                         last line
======= lines ##-##:
    this is a paragraph +:
    ^^^^^^^^^^^^^^^^^^^^^^
        line #
^^^^^^^^^^^^^^
        line #a:: line #b; line #c
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        last line
^^^^^^^^^^^^^^^^^
------- lines ##-##:
    this is a paragraph +:
                        ^^
        line #
^^^^^^^^^^^^^^
        line #a:: line #b; line #c
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        last line
^^^^^^^^^^^^^^^^^
------- line ##:
        line #
        ^^^^^^
------- line ##:
        line #a:: line #b; line #c
        ^^^^^^^^^
------- line ##:
        line #a:: line #b; line #c
             ^^
------- line ##:
        line #a:: line #b; line #c
                  ^^^^^^^^^^^^^^^^
------- line ##:
        line #a:: line #b; line #c
                       ^^
------- line ##:
        line #a:: line #b; line #c
                                ^^
------- line ##:
        last line
        ^^^^^^^^^
======= PARSER TEST: <X "|" hi there "|" X>
======= line ##:
    <X| hi there |X>
    ^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
parser end block 1
ERROR: in line ##: unrecognized flag/option name:
parser trace [+ foo]
                ^^^
parser trace [+ parser commands]
parser trace [+ parser commands]
parser trace [+ warnings]
parser begin block 1
parser define bracket "<*" ... "*>" [code]
======= PARSER TEST: <* hi there A *>
======= line ##:
    <* hi there A *>
    ^^^^^^^^^^^^^^^^
------- line ##:
    <* hi there A *>
    ^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
ERROR: in line ##: innermost block name does not match `block x':
parser end block x
^^^^^^^^^^^^^^^^^^
======= PARSER TEST: <* hi there B *>
======= line ##:
    <* hi there B *>
    ^^^^^^^^^^^^^^^^
------- line ##:
    <* hi there B *>
    ^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
parser end block 1
======= PARSER TEST: <* hi there C *>
======= line ##:
    <* hi there C *>
    ^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
ERROR: in line ##: innermost block name does not match `block 1':
parser end block 1
^^^^^^^^^^^^^^^^^^
parser define bracket "<|" ... "|>" [code]
======= PARSER TEST: < |hi there D| >
======= line ##:
    <| hi there D |>
    ^^^^^^^^^^^^^^^^
------- line ##:
    <| hi there D |>
    ^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
parser begin block 1
parser undefine bracket "<|" ... "|>" [code]
======= PARSER TEST: < "|" hi there E "|" >
======= line ##:
    <| hi there E |>
    ^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
WARNING: in line ##: undefine found no definition:
parser undefine bracket "<|" ... "|>" [code]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
parser undefine bracket "<|" ... "|>" [code]
parser end block 1
======= PARSER TEST: < |hi there F| >
======= line ##:
    <| hi there F |>
    ^^^^^^^^^^^^^^^^
------- line ##:
    <| hi there F |>
    ^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
parser undefine bracket "<|" ... "|>" [code]
======= PARSER TEST: < "|" hi there F "|" >
======= line ##:
    <| hi there F |>
    ^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
WARNING: in line ##: undefine found no definition:
parser undefine bracket "<|" ... "|>" [code]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
parser undefine bracket "<|" ... "|>" [code]
parser begin block 1
parser define bracket "`" ... "'" [code]
parser define bracket "```" ... "'''" [code]
       with parsing options []
parser print bracket "":
    block TOP LEVEL: bracket [< "[" "<" >] ... [< ">" "]" >] [data]
                     with parsing selectors [- TOP LEVEL]
                     with label reformatter
    block TOP LEVEL: bracket [< "{" "*" >] ... [< "*" "}" >] [data]
                     with parsing selectors [- TOP LEVEL]
                     with multivalue reformatter ( "," )
    block standard: bracket "(" ... ")" [code, text, math]
                    with parsing selectors [- TOP LEVEL]
    block TOP LEVEL: bracket "(" ... ")" [data]
                     with parsing selectors [- TOP LEVEL]
    block standard: indentation mark ":" ... ";" [code, text, math]
                    with parsing selectors [- TOP LEVEL]
                    with parsing options [end at le indent,
                                          end at line separator,
                                          end at outer closing]
    block standard: bracket "[" ... "]" [code, text, math]
                    with parsing selectors [- TOP LEVEL]
    block TOP LEVEL: bracket "[" ... "]" [data]
                     with parsing selectors [- TOP LEVEL]
    block block 1: bracket "`" ... "'" [code]
                   with parsing selectors [- TOP LEVEL]
    block TOP LEVEL: bracket "`" ... "'" [data]
                     with parsing selectors [- TOP LEVEL]
    block TOP LEVEL: bracket [< "{" "{" >] ... [< "}" "}" >] [data]
                     with parsing selectors [- TOP LEVEL]
    block TOP LEVEL: bracket "{" ... "|" ... "|" ... "}"
                     // "||" is also allowed.
                     [data]
                     with parsing selectors [- TOP LEVEL]
                     with attribute selectors [data]
                     with attributes ":" ... "=" ... ","
                     with attribute negator "no"
                     with attribute flags initiator "["
                     with attribute multivalue initiator [< "{" "*" >]
    block block 1: bracket [< "`" "`" "`" >] ... [< "'" "'" "'" >]
                   [code]
                   with parsing selectors [- TOP LEVEL]
                   with parsing options []
    block standard: bracket [< "<" "|" >] ... [< "|" ">" >] []
                    with parsing selectors [- TOP LEVEL]
    block TOP LEVEL: indentation mark [< "parser" ":" >] ... ";"
                     [TOP LEVEL]
                     with parsing selectors [data]
    block TOP LEVEL: indentation mark [< "parser" "test" ":" >] ... ";"
                     [TOP LEVEL]
                     with parsing selectors [- TOP LEVEL]
    block TOP LEVEL: indentation mark [< "TOP" "LEVEL" >] ... ";" []
                     with parsing selectors [- TOP LEVEL]
    block standard: bracket "<+" ... "+>" [code, operator 1]
                    with parsing selectors [- TOP LEVEL, ^ code, - math,
                                            + operator 1]
    block TOP LEVEL: bracket [< "[" "$" >] ... [< "$" "]" >] [data]
                     with parsing selectors [- TOP LEVEL]
                     with special reformatter
======= PARSER TEST: (```")"''')
======= line ###:
    ( ``` ) ''' )
    ^^^^^^^^^^^^^
------- line ###:
    ( ``` ) ''' )
    ^^^^^^^^^^^^^
------- line ###:
    ( ``` ) ''' )
      ^^^^^^^^^
======= PARSER TEST: (```")"''')
======= lines ###-###:
    ( ```
    ^^^^^
)
^
''' )
^^^^^
------- lines ###-###:
    ( ```
    ^^^^^
)
^
''' )
^^^^^
------- lines ###-###:
    ( ```
      ^^^
)
^
''' )
^^^
======= END PARSER TEST(S)
ERROR: in line ###: missing closing bracket `'' inserted before `)':
    ( ` ) ' )
        ^
======= PARSER TEST: (`') "'" ")"
======= line ###:
    ( ` ) ' )
    ^^^^^^^^^
------- line ###:
    ( ` ) ' )
    ^^^^^
------- line ###:
    ( ` ) ' )
      ^
======= END PARSER TEST(S)
ERROR: in line ###: missing closing bracket `'' inserted just before
       here:
)
^
ERROR: in line ###: missing closing bracket `)' inserted just before
       here:
)
^
======= PARSER TEST: (`')
======= line ###:
    ( `
    ^^^
------- line ###:
    ( `
    ^^^
------- line ###:
    ( `
      ^
======= END PARSER TEST(S)
======= PARSER TEST: (An indented paragraph
                      {"": .terminator = [$ INDENTED_PARAGRAPH $],
                           .initiator = ":"|
                           {"": .terminator = "<LF>", .initiator =
                                [$ LOGICAL_LINE $]|
                                ```This logical line continues on no
                                   matter what "," even with a spurious
                                   ")" "," until the following is
                                   encountered-'''|}
                           {"": .terminator = "<LF>", .initiator =
                                [$ LOGICAL_LINE $]|Second line of
                                indented paragraph "."|}|})
======= lines ###-###:
    ( An indented paragraph:
    ^^^^^^^^^^^^^^^^^^^^^^^^
                ```This logical line continues on no
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
matter what, even with a spurious ), until
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the following is encountered- '''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                Second line of indented paragraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              ) // End of () bracketed subexpression
^^^^^^^^^^^^^^^
------- lines ###-###:
    ( An indented paragraph:
    ^^^^^^^^^^^^^^^^^^^^^^^^
                ```This logical line continues on no
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
matter what, even with a spurious ), until
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the following is encountered- '''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                Second line of indented paragraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              ) // End of () bracketed subexpression
^^^^^^^^^^^^^^^
------- lines ###-###:
    ( An indented paragraph:
                           ^
                ```This logical line continues on no
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
matter what, even with a spurious ), until
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the following is encountered- '''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                Second line of indented paragraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
                ```This logical line continues on no
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
matter what, even with a spurious ), until
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the following is encountered- '''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
                ```This logical line continues on no
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
matter what, even with a spurious ), until
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the following is encountered- '''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
                Second line of indented paragraph.
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
parser end block 1
parser begin block 1
======= TEST: parser test ["?" MISSING "?"]
------- line ###:
parser test [? MISSING ?]
^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test [? MISSING ?]
            ^^^^^^^^^^^^^
======= END TEST
parser define bracket "[?" ... "?]" [code]
       with special reformatter
======= TEST: parser test [$ MISSING $]
------- line ###:
parser test [? MISSING ?]
^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
======= TEST: parser test [@ x 1 @ y 2 @ w @ z 3 @]
------- line ###:
parser test [@ x 1 @ y 2 @ w @ z 3 @]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test [@ x 1 @ y 2 @ w @ z 3 @]
            ^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser define bracket "[@" ... "@]" [code]
       with multivalue reformatter ( "@" )
======= TEST: parser test [@ [< x 1 >] @ [< y 2 >] @ w @ [< z 3 >] @]
------- line ###:
parser test [@ x 1 @ y 2 @ w @ z 3 @]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test [@ x 1 @ y 2 @ w @ z 3 @]
            ^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser end block 1
parser begin block 1
parser define indentation offset 4
parser print indentation offset:
    block block 1: 4
    block standard: 2
    block TOP LEVEL: 2
WARNING: in line ###: lexeme indent 1 too near paragraph indent 0:
 line with indent 1
 ^
WARNING: in line ###: lexeme indent 2 too near paragraph indent 0:
  line with indent 2
  ^
parser end block 1
parser begin block 1
parser print indentation offset:
    block block 1: 2
    block standard: 2
    block TOP LEVEL: 2
WARNING: in line ###: lexeme indent 1 too near paragraph indent 0:
 line with indent 1
 ^
======= PARSER TEST: well
                         (hello
                          {"": .terminator = [$ INDENTED_PARAGRAPH $],
                               .initiator = ":"|
                               {"": .terminator = "<LF>", .initiator =
                                    [$ LOGICAL_LINE $]|goodbye|}|})
                         there
======= lines ###-###:
        well ( hello:
        ^^^^^^^^^^^^^
                goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
        well ( hello:
             ^^^^^^^^
                goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
        well ( hello:
                    ^
                goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
                goodbye ) there
                ^^^^^^^
======= PARSER TEST: hi there
======= line ###:
        hi there
        ^^^^^^^^
======= END PARSER TEST(S)
======= PARSER TEST: (hello
                      {"": .terminator = [$ INDENTED_PARAGRAPH $],
                           .initiator = ":"|
                           {"": .terminator = "<LF>", .initiator =
                                [$ LOGICAL_LINE $]|goodbye|}|}) there hi
                         there ")" end
======= lines ###-###:
        ( hello:
        ^^^^^^^^
            goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
          ) end
^^^^^^^^^^^^^^^
------- lines ###-###:
        ( hello:
        ^^^^^^^^
            goodbye ) there
^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
        ( hello:
               ^
            goodbye ) there
^^^^^^^^^^^^^^^^^^^
------- line ###:
            goodbye ) there
            ^^^^^^^
======= END PARSER TEST(S)
ERROR: in line ###: missing closing bracket `)' inserted just before
       here:
        ) end
        ^
======= PARSER TEST: (hello
                      {"": .terminator = [$ INDENTED_PARAGRAPH $],
                           .initiator = ":"|
                           {"": .terminator = "<LF>", .initiator =
                                [$ LOGICAL_LINE $]|goodbye there|}
                           {"": .terminator = "<LF>", .initiator =
                                [$ LOGICAL_LINE $]|hi there|}|})
======= lines ###-###:
        ( hello:
        ^^^^^^^^
            goodbye there
^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
        ( hello:
        ^^^^^^^^
            goodbye there
^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
        ( hello:
               ^
            goodbye there
^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
------- line ###:
            goodbye there
            ^^^^^^^^^^^^^
------- line ###:
            hi there
            ^^^^^^^^
======= PARSER TEST: ")" end
======= line ###:
        ) end
        ^^^^^
======= END PARSER TEST(S)
parser end block 1
parser begin block 1
parser print prefix "":
    not found
parser define prefix "X" [code]
       with parsing selectors [code, math]
parser define prefix "Y" [code]
       with parsing selectors [+ text]
       with group ajax
ERROR: in lines ###-###: `with options' not allowed for prefix unless
       prefix group is `paragraph'; options ignored:
parser define prefix "Z" [math]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       with parsing selectors [code]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       with implied subprefix {X: y = 5, z = hi there}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       with lexical master "START"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       with parsing options [end at line break]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
parser define prefix "Z" [math]
       with parsing selectors [code]
       with implied subprefix {X: y = 5, z = hi there}
       with lexical master "START"
       with parsing options [end at line break]
parser print prefix "":
    block block 1: prefix "X" [code]
                   with parsing selectors [code, math]
    block block 1: prefix "Y" [code]
                   with parsing selectors [- TOP LEVEL, + text]
                   with group ajax
    block block 1: prefix "Z" [math]
                   with parsing selectors [code]
                   with implied subprefix
                   {X: y = "5", z = [< "hi" "there" >]||X}
                   with lexical master "START"
parser print prefix "X":
    block block 1: prefix "X" [code]
                   with parsing selectors [code, math]
parser end block 1
parser define typed bracket "T1{" ... "|" ... "|" ... "}T1"
       [code, text, math, data]
       with element selectors [data]
       with attribute selectors [data]
       with attributes "::" ... "==" ... "#"
parser define typed bracket "T2{" ... "|" ... "|" ... "}T2"
       [code, text, math, data]
       with element selectors [data]
       with attribute selectors [data, code]
       with attributes "::" ... "==" ... "#"
       with attribute negator "NO"
       with attribute flags initiator "("
       with attribute multivalue initiator "[@"
       with prefix separators allowed
parser define bracket "[@" ... "@]" [code]
       with multivalue reformatter ( "@" )
======= TEST: parser test {T: x = "5", y = "6"|A B C|T}
------- line ###:
parser test T1{ T:: x == 5 # y == 6 | A B C |T}T1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test T1{ T:: x == 5 # y == 6 | A B C |T}T1
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
======= TEST: parser test {T: x[+-] = "5", y = {* "6", "7" *}|A B C|T}
------- lines ###-###:
parser test T2{ T:: x(1,2) == 5 # y == [@ 6 @ 7 @]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                | A B C |T}T2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
parser test T2{ T:: x(1,2) == 5 # y == [@ 6 @ 7 @]
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                | A B C |T}T2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
======= TEST: parser test ({T||T} A B C)
------- line ###:
parser test (T1{T}T1 A B C)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test (T1{T}T1 A B C)
            ^^^^^^^^^^^^^^^
------- line ###:
parser test (T1{T}T1 A B C)
             ^^^^^^^
======= END TEST
======= TEST: parser test ({T|A B C|T})
------- line ###:
parser test (T2{T}T2 A B C)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test (T2{T}T2 A B C)
            ^^^^^^^^^^^^^^^
------- line ###:
parser test (T2{T}T2 A B C)
             ^^^^^^^^^^^^^
======= END TEST
======= TEST: parser test {T: NO Z, X, W, NO Y|A B C D|T}
------- line ###:
parser test T1{T:: X # NO Y | A B | NO Z # W | C D | }T1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test T1{T:: X # NO Y | A B | NO Z # W | C D | }T1
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser undefine typed bracket "T2{" ... "|" ... "|" ... "}T2"
       [code, text, math, data]
======= TEST: parser test (T2 "{" T "}" T2 A B C)
------- line ###:
parser test (T2{T}T2 A B C)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test (T2{T}T2 A B C)
            ^^^^^^^^^^^^^^^
======= END TEST
parser begin block 1
parser print string concatenator:
    block block 1: "#"
    block standard: "#"
    block TOP LEVEL: "#"
======= TEST: parser test "AB"
------- line ###:
parser test "A" # "B"
^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test "A" # "B"
            ^^^^^^^^^
======= END TEST
======= TEST: parser test "A" "B"
------- line ###:
parser test "A" "B"
^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test "A" "B"
            ^^^
------- line ###:
parser test "A" "B"
                ^^^
======= END TEST
parser define string concatenator enabled
parser print string concatenator:
    block block 1: enabled
    block standard: "#"
    block TOP LEVEL: "#"
======= TEST: parser test "A" # "B"
------- line ###:
parser test "A" # "B"
^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test "A" # "B"
            ^^^
------- line ###:
parser test "A" # "B"
                  ^^^
======= END TEST
======= TEST: parser test "AB"
------- line ###:
parser test "A" "B"
^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test "A" "B"
            ^^^^^^^
======= END TEST
parser define string concatenator disabled
parser print string concatenator:
    block block 1: disabled
    block standard: "#"
    block TOP LEVEL: "#"
======= TEST: parser test "A" # "B"
------- line ###:
parser test "A" # "B"
^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test "A" # "B"
            ^^^
------- line ###:
parser test "A" # "B"
                  ^^^
======= END TEST
======= TEST: parser test "A" "B"
------- line ###:
parser test "A" "B"
^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test "A" "B"
            ^^^
------- line ###:
parser test "A" "B"
                ^^^
======= END TEST
parser end block 1
parser begin block 1
parser define typed bracket "8" ... "|" ... "|" ... "9"
       [code, text, math, data]
       with element selectors [data]
       with attribute selectors [data, code]
       with attributes ":" ... "=" ... ","
       with attribute negator "no"
       with attribute flags initiator "["
       with attribute multivalue initiator "{*"
       with prefix separators allowed
======= TEST: parser test [{my type: my attr = "99"||my type}]
------- line ###:
parser test [8 my type: my attr = 99 9]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test [8 my type: my attr = 99 9]
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test [8 my type: my attr = 99 9]
             ^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser end block 1
======= TEST: parser test [8 my type ":" my attr = 99 9]
------- line ###:
parser test [8 my type: my attr = 99 9]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
parser test [8 my type: my attr = 99 9]
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser begin block 1
parser define bracket "[0" ... "0]" [code]
       with special reformatter
======= TEST: parser test [$ LOGICAL_LINE $]
------- line ###:
parser test [0 LOGICAL_LINE 0]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser end block 1
parser begin block 1
parser define prefix "P1" [code, text]
       with parsing selectors [text]
       with group paragraph
       with implied subprefix {S1}
       with parsing options [end at paragraph break]
parser define prefix "P2" [code, text]
       with parsing selectors [text]
       with group paragraph
       with parsing options [end at paragraph break]
parser define typed bracket "{" ... "|" ... "|" ... "}"
       [code, text, math]
       // no element selectors
       with attribute selectors [data]
       with attributes ":" ... "=" ... ","
       with attribute negator "no"
       with attribute flags initiator "["
       with attribute multivalue initiator "{*"
       with prefix separators allowed
parser print prefix "":
    block block 1: prefix "P1" [code, text]
                   with parsing selectors [text]
                   with group paragraph
                   with implied subprefix {S1||S1}
                   with parsing options [end at paragraph break]
    block block 1: prefix "P2" [code, text]
                   with parsing selectors [text]
                   with group paragraph
                   with parsing options [end at paragraph break]
======= PARSER TEST: {P1|{S1|Hi there "."|S1} {S1|Bye "."|S1}
                         {S1|And some more "."|S1}|P1}
======= lines ###-###:
    {P1}
    ^^^^
    Hi there.
^^^^^^^^^^^^^
    {S1}Bye.
^^^^^^^^^^^^
    {S1}And some more.
^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
    {P1}
        ^
    Hi there.
^^^^^^^^^^^^^
------- line ###:
    {S1}Bye.
    ^^^^^^^^
------- line ###:
    {S1}And some more.
    ^^^^^^^^^^^^^^^^^^
======= PARSER TEST: And another paragraph "."
======= line ###:
    And another paragraph.
    ^^^^^^^^^^^^^^^^^^^^^^
======= PARSER TEST: {P2|And a third paragraph that is continued over
                         three lines "."|P2}
======= lines ###-###:
    {P2} And a third paragraph
    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    that is continued
^^^^^^^^^^^^^^^^^^^^^
    over three lines.
^^^^^^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
parser end block 1
parser begin block 1
parser define indentation mark "::" ... ";" [code]
       with implied header {p}
ERROR: in line ###: implied header of type `p' does not have `paragraph'
       or `line' group; cannot begin lines with indent:
    with one line
    ^
======= TEST: parser test this is the indented paragraph 1::
                  with one line
------- lines ###-###:
parser test this is the indented paragraph 1::
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    with one line
^^^^^^^^^^^^^^^^^
------- lines ###-###:
parser test this is the indented paragraph 1::
                                            ^^
    with one line
^^^^^^^^^^^^^^^^^
------- line ###:
    with one line
    ^^^^^^^^^^^^^
======= END TEST
parser define prefix "p" [code]
       with group paragraph
======= TEST: parser test this is the indented paragraph 2::
                  {p|{"": .terminator = "<LF>", .initiator =
                          [$ LOGICAL_LINE $]|with one line|}|p}
------- lines ###-###:
parser test this is the indented paragraph 2::
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    with one line
^^^^^^^^^^^^^^^^^
------- lines ###-###:
parser test this is the indented paragraph 2::
                                            ^^
    with one line
^^^^^^^^^^^^^^^^^
------- line ###:
    with one line
    ^^^^^^^^^^^^^
------- line ###:
    with one line
    ^^^^^^^^^^^^^
======= END TEST
parser define prefix "p" [code]
       with group paragraph
       with implied subprefix {l}
======= TEST: parser test this is the indented paragraph 3::
                  {p|{"": .terminator = "<LF>", .initiator =
                          [$ LOGICAL_LINE $]|{l|with a first line|l}|}
                     {"": .terminator = "<LF>", .initiator =
                          [$ LOGICAL_LINE $]|and a second line|}|p}
------- lines ###-###:
parser test this is the indented paragraph 3::
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    with a first line
^^^^^^^^^^^^^^^^^^^^^
    and a second line
^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
parser test this is the indented paragraph 3::
                                            ^^
    with a first line
^^^^^^^^^^^^^^^^^^^^^
    and a second line
^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
    with a first line
    ^^^^^^^^^^^^^^^^^
    and a second line
^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    with a first line
    ^^^^^^^^^^^^^^^^^
------- line ###:
    with a first line
    ^^^^^^^^^^^^^^^^^
------- line ###:
    and a second line
    ^^^^^^^^^^^^^^^^^
======= END TEST
parser define prefix "l" [code]
       with group line
======= TEST: parser test this is the indented paragraph 4::
                  {p|{l|with a first line|l} {l|and a second line|l}
                     {l|and a third line with [HI THERE] embedded|l}|p}
------- lines ###-###:
parser test this is the indented paragraph 4::
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    with a first line
^^^^^^^^^^^^^^^^^^^^^
    and a second line
^^^^^^^^^^^^^^^^^^^^^
    and a third line with [ HI THERE ] embedded
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
parser test this is the indented paragraph 4::
                                            ^^
    with a first line
^^^^^^^^^^^^^^^^^^^^^
    and a second line
^^^^^^^^^^^^^^^^^^^^^
    and a third line with [ HI THERE ] embedded
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
    with a first line
    ^^^^^^^^^^^^^^^^^
    and a second line
^^^^^^^^^^^^^^^^^^^^^
    and a third line with [ HI THERE ] embedded
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    with a first line
    ^^^^^^^^^^^^^^^^^
------- line ###:
    and a second line
    ^^^^^^^^^^^^^^^^^
------- line ###:
    and a third line with [ HI THERE ] embedded
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    and a third line with [ HI THERE ] embedded
                          ^^^^^^^^^^^^
======= END TEST
parser end block 1
parser begin block 1
parser define indentation mark "::" ... ";" [code]
       with implied header {p1}
parser define typed bracket "{" ... "|" ... "|" ... "}"
       [code, text, math]
       // no element selectors
       with attribute selectors [data]
       with attributes ":" ... "=" ... ","
       with attribute negator "no"
       with attribute flags initiator "["
       with attribute multivalue initiator "{*"
       with prefix separators allowed
parser define prefix "p1" [code]
       with group paragraph
       with implied subprefix {l1}
parser define prefix "l1" [code]
       with group line
parser define prefix "p2" [code]
       with group paragraph
       with implied subprefix {l2}
parser define prefix "l2" [code]
       with group line
ERROR: in line ###: explicit prefix separator of type `p2' has
       `paragraph' group but is not at beginning of a logical line that
       is in paragraph beginning position; ignored:
    {p2} and a fourth subparagraph started
    ^^^^
======= TEST: parser test this is the indented paragraph 5::
                  {p1|{l1|with a first line|l1}
                      {l1|and a second line with [HI THERE] embedded|l1}|p1}
                  {p2|{l2|and a second subparagraph|l2}
                      {l2|with a second line of its own|l2}|p2}
                  {p1|{l1|and a third subparagraph|l1}
                      {l1|with a second line of its own|l1}
                      {l1|and a fourth subparagraph started without in a
                          previous blank line|l1}
                      {l1|with a second line of its own|l1}|p1}
------- lines ###-###:
parser test this is the indented paragraph 5::
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    with a first line
^^^^^^^^^^^^^^^^^^^^^
    and a second line with [HI THERE] embedded
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
    {p2}and a second subparagraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
    and a third subparagraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {p2} and a fourth subparagraph started
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         without in a previous blank line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
parser test this is the indented paragraph 5::
                                            ^^
    with a first line
^^^^^^^^^^^^^^^^^^^^^
    and a second line with [HI THERE] embedded
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
    {p2}and a second subparagraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
    and a third subparagraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {p2} and a fourth subparagraph started
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         without in a previous blank line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
    with a first line
    ^^^^^^^^^^^^^^^^^
    and a second line with [HI THERE] embedded
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    with a first line
    ^^^^^^^^^^^^^^^^^
------- line ###:
    and a second line with [HI THERE] embedded
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    and a second line with [HI THERE] embedded
                           ^^^^^^^^^^
------- lines ###-###:
    {p2}and a second subparagraph
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    {p2}and a second subparagraph
        ^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    with a second line of its own
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
    and a third subparagraph
    ^^^^^^^^^^^^^^^^^^^^^^^^
    with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {p2} and a fourth subparagraph started
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         without in a previous blank line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    and a third subparagraph
    ^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    with a second line of its own
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
    {p2} and a fourth subparagraph started
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         without in a previous blank line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    with a second line of its own
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser define prefix "p3" [code]
       with group paragraph
       with implied subprefix {l3}
       with parsing options [+ continuing]
parser define prefix "l3" [code]
       with group line
parser print prefix "p3":
    block block 1: prefix "p3" [code]
                   with parsing selectors [- TOP LEVEL]
                   with group paragraph
                   with implied subprefix {l3||l3}
                   with parsing options [+ continuing]
======= TEST: parser test this is the indented paragraph 6::
                  {p1|{l1|with a first line|l1}
                      {l1|and a second line with [HI THERE] embedded|l1}|p1}
                  {p3|{l3|and a second subparagraph|l3}
                      {l3|with a second line of its own|l3}
                      {l3|and a third line after a blank line|l3}
                      {l3|and a fourth line|l3}|p3}
                  {p2|{l2|and a third subparagraph|l2}
                      {l2|with a second line of its own|l2}|p2}
------- lines ###-###:
parser test this is the indented paragraph 6::
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    with a first line
^^^^^^^^^^^^^^^^^^^^^
    and a second line with [HI THERE] embedded
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
    {p3}and a second subparagraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
    and a third line after a blank line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    and a fourth line
^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
    {p2} and a third subparagraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
parser test this is the indented paragraph 6::
                                            ^^
    with a first line
^^^^^^^^^^^^^^^^^^^^^
    and a second line with [HI THERE] embedded
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
    {p3}and a second subparagraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
    and a third line after a blank line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    and a fourth line
^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
    {p2} and a third subparagraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
    with a first line
    ^^^^^^^^^^^^^^^^^
    and a second line with [HI THERE] embedded
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    with a first line
    ^^^^^^^^^^^^^^^^^
------- line ###:
    and a second line with [HI THERE] embedded
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    and a second line with [HI THERE] embedded
                           ^^^^^^^^^^
------- lines ###-###:
    {p3}and a second subparagraph
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
    and a third line after a blank line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    and a fourth line
^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    {p3}and a second subparagraph
        ^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    with a second line of its own
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    and a third line after a blank line
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    and a fourth line
    ^^^^^^^^^^^^^^^^^
------- lines ###-###:
    {p2} and a third subparagraph
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    {p2} and a third subparagraph
         ^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    with a second line of its own
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser end block 1
parser begin block 1
parser define typed bracket "{" ... "|" ... "|" ... "}"
       [code, text, math]
       // no element selectors
       with attribute selectors [data]
       with attributes ":" ... "=" ... ","
       with attribute negator "no"
       with attribute flags initiator "["
       with attribute multivalue initiator "{*"
       with prefix separators allowed
parser define prefix "p1" [code]
       with group paragraph
       with implied subprefix {l1}
parser define prefix "l1" [code]
       with group line
parser define prefix "p2" [code]
       with group paragraph
       with implied subprefix {l2}
       with parsing options [+ continuing]
parser define prefix "l2" [code]
       with group line
parser define prefix "p3" [code]
       with group paragraph
       with parsing options [+ continuing]
parser print prefix "":
    block block 1: prefix "l1" [code]
                   with parsing selectors [- TOP LEVEL]
                   with group line
    block block 1: prefix "l2" [code]
                   with parsing selectors [- TOP LEVEL]
                   with group line
    block block 1: prefix "p1" [code]
                   with parsing selectors [- TOP LEVEL]
                   with group paragraph
                   with implied subprefix {l1||l1}
    block block 1: prefix "p2" [code]
                   with parsing selectors [- TOP LEVEL]
                   with group paragraph
                   with implied subprefix {l2||l2}
                   with parsing options [+ continuing]
    block block 1: prefix "p3" [code]
                   with parsing selectors [- TOP LEVEL]
                   with group paragraph
                   with parsing options [+ continuing]
parser trace [+ parser output]
BRACKETED EXPRESSION:
    {p1|{l1|this is a first paragraph|l1} {l1|and a line|l1}|p1}
    lines ###-###:
{p1} this is a first paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
and a line
^^^^^^^^^^
BRACKETED EXPRESSION:
    and another line outside the first paragraph
    line ###:
and another line outside the first paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p2|{l2|this is a second paragraph|l2} {l2|and a line|l2}
        {l2|and another line outside the second paragraph|l2}|p2}
    lines ###-###:
{p2} this is a second paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
and a line
^^^^^^^^^^
<BLANK-LINE>
^
and another line outside the second paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p1|{l1|this is a third paragraph|l1} {l1|and a line|l1}|p1}
    lines ###-###:
{p1} this is a third paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
and a line
^^^^^^^^^^
BRACKETED EXPRESSION:
    and another line outside the third paragraph
    line ###:
and another line outside the third paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p3|{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|this
             is a fourth paragraph|}
        {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|and a
             line|}
        {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|and
             another line outside the fourth paragraph|}|p3}
    lines ###-###:
{p3} this is a fourth paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
and a line
^^^^^^^^^^
<BLANK-LINE>
^
and another line outside the fourth paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p1|{l1|this is a fifth paragraph|l1} {l1|and a line|l1}|p1}
    lines ###-###:
{p1} this is a fifth paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
and a line
^^^^^^^^^^
BRACKETED EXPRESSION:
    and another line outside the fifth paragraph
    line ###:
and another line outside the fifth paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
parser trace [- parser output]
parser end block 1
parser begin block 1
parser define typed bracket "{" ... "|" ... "|" ... "}"
       [code, text, math]
       // no element selectors
       with attribute selectors [data]
       with attributes ":" ... "=" ... ","
       with attribute negator "no"
       with attribute flags initiator "["
       with attribute multivalue initiator "{*"
       with prefix separators allowed
parser define prefix "p1" [code]
       with group paragraph
       with implied subprefix {l1}
parser define prefix "l1" [code]
       with group line
parser define prefix "p2" [code]
       with group paragraph
       with implied subprefix {l2}
       with parsing options [+ sticky]
parser define prefix "l2" [code]
       with group line
parser define prefix "p3" [code]
       with group paragraph
       with parsing options [+ sticky]
parser trace [+ parser output]
BRACKETED EXPRESSION:
    this is paragraph 1
    line ###:
this is paragraph 1
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    and another line
    line ###:
and another line
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p1|{l1|this is paragraph 2|l1} {l1|and another line|l1}|p1}
    lines ###-###:
{p1} this is paragraph 2
^^^^^^^^^^^^^^^^^^^^^^^^
and another line
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    this is paragraph 3
    line ###:
this is paragraph 3
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    and another line
    line ###:
and another line
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p2|{l2|this is paragraph 4|l2} {l2|and another line|l2}|p2}
    lines ###-###:
{p2} this is paragraph 4
^^^^^^^^^^^^^^^^^^^^^^^^
and another line
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p2|{l2|this is paragraph 5|l2} {l2|and another line|l2}|p2}
    lines ###-###:
this is paragraph 5
^^^^^^^^^^^^^^^^^^^
and another line
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p1|{l1|this is paragraph 6|l1} {l1|and another line|l1}|p1}
    lines ###-###:
{p1} this is paragraph 6
^^^^^^^^^^^^^^^^^^^^^^^^
and another line
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    this is paragraph 7
    line ###:
this is paragraph 7
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    and another line
    line ###:
and another line
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p3|{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|this
             is paragraph 8|}
        {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|and
             another line|}|p3}
    lines ###-###:
{p3} this is paragraph 8
^^^^^^^^^^^^^^^^^^^^^^^^
and another line
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p3|{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|this
             is paragraph 9|}
        {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|and
             another line|}|p3}
    lines ###-###:
this is paragraph 9
^^^^^^^^^^^^^^^^^^^
and another line
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p1|{l1|this is paragraph 10|l1} {l1|and another line|l1}|p1}
    lines ###-###:
{p1} this is paragraph 10
^^^^^^^^^^^^^^^^^^^^^^^^^
and another line
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    this is paragraph 11
    line ###:
this is paragraph 11
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    and another line
    line ###:
and another line
^^^^^^^^^^^^^^^^
parser trace [- parser output]
parser end block 1
parser begin block 1
parser define typed bracket "{" ... "|" ... "|" ... "}"
       [code, text, math]
       // no element selectors
       with attribute selectors [data]
       with attributes ":" ... "=" ... ","
       with attribute negator "no"
       with attribute flags initiator "["
       with attribute multivalue initiator "{*"
       with prefix separators allowed
parser define prefix "p" [code]
       with group paragraph
       with implied subprefix {l1}
parser define prefix "l1" [code]
       with group line
parser define prefix "l2" [code]
       with group line
parser define prefix "x" [code]
       with implied subprefix {l1}
parser trace [+ parser output]
BRACKETED EXPRESSION:
    {l1|this is a line|l1}
    line ###:
{l1} this is a line
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p|{l1|this is a paragraph line|l1}
       {l1|and a second paragraph line|l1}
       {l2|and a third paragraph line|l2}
       {l1|and a fourth paragraph line|l1}|p}
    lines ###-###:
{p} this is a paragraph line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
and a second paragraph line
^^^^^^^^^^^^^^^^^^^^^^^^^^^
{l2}and a third paragraph line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
and a fourth paragraph line
^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    And another paragraph
    line ###:
And another paragraph
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    with one extra line "."
    line ###:
with one extra line.
^^^^^^^^^^^^^^^^^^^^
ERROR: in line ###: explicit prefix separator of type `l2' has `line'
       group but is not at beginning of logical line or immediately
       after a prefix separator of `paragraph' group; ignored:
{l1} This is a line {l2} and continuation.
                    ^^^^
BRACKETED EXPRESSION:
    {l1|This is a line and continuation "."|l1}
    line ###:
{l1} This is a line {l2} and continuation.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR: in line ###: explicit prefix separator of type `p' has
       `paragraph' group but is not at beginning of a logical line that
       is in paragraph beginning position; ignored:
{p} This is a paragraph {p} and continuation.
                        ^^^
BRACKETED EXPRESSION:
    {p|{l1|This is a paragraph and continuation "."|l1}|p}
    line ###:
{p} This is a paragraph {p} and continuation.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR: in line ###: implied prefix separator of type `l1' has `line'
       group but is not at beginning of logical line or immediately
       after a prefix separator of `paragraph' group; ignored:
{x} implied `l1' prefix in error
    ^
BRACKETED EXPRESSION:
    {x|implied "`" l1 "'" prefix in error|x}
    line ###:
{x} implied `l1' prefix in error
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR: in line ###: explicit prefix separator of type `l2' has `line'
       group but is not at beginning of logical line or immediately
       after a prefix separator of `paragraph' group; ignored:
{l1}{l2} a stray line
    ^^^^
BRACKETED EXPRESSION:
    {l1|a stray line|l1}
    line ###:
{l1}{l2} a stray line
^^^^^^^^^^^^^^^^^^^^^
ERROR: in line ###: implied prefix separator of type `l1' has `line'
       group but is not at beginning of logical line or immediately
       after a prefix separator of `paragraph' group; ignored:
{x}{l2} another stray line
   ^
ERROR: in line ###: explicit prefix separator of type `l2' has `line'
       group but is not at beginning of logical line or immediately
       after a prefix separator of `paragraph' group; ignored:
{x}{l2} another stray line
   ^^^^
BRACKETED EXPRESSION:
    {x|another stray line|x}
    line ###:
{x}{l2} another stray line
^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR: in line ###: explicit prefix separator of type `l2' has `line'
       group but is not at beginning of logical line or immediately
       after a prefix separator of `paragraph' group; ignored:
({l2} a third stray)
 ^^^^
BRACKETED EXPRESSION:
    (a third stray)
    line ###:
({l2} a third stray)
^^^^^^^^^^^^^^^^^^^^
ERROR: in line ###: explicit prefix separator of type `p' has
       `paragraph' group but is not at beginning of a logical line that
       is in paragraph beginning position; ignored:
({p} a fourth stray)
 ^^^
BRACKETED EXPRESSION:
    (a fourth stray)
    line ###:
({p} a fourth stray)
^^^^^^^^^^^^^^^^^^^^
ERROR: in line ###: explicit prefix separator of type `p' has
       `paragraph' group but is not at beginning of a logical line that
       is in paragraph beginning position; ignored:
{p} and a fifth stray
^^^
BRACKETED EXPRESSION:
    and a fifth stray
    line ###:
{p} and a fifth stray
    ^^^^^^^^^^^^^^^^^
parser trace [- parser output]
parser end block 1
