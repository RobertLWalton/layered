parser print bracket "":
    block TOP LEVEL: bracket "(" ... ")" [parser]
                     with parsing options [- end at line separator]
    block TOP LEVEL: bracket "[" ... "]" [parser]
                     with parsing options [- end at line separator]
    block TOP LEVEL: indentation mark [< "TOP" "LEVEL" >] ... ";" []
ERROR: in line 13: too few quoted names in:
parser define bracket "[+"
^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR: in line 14: expected quoted name after:
parser define bracket "[+" ...
                           ^^^
parser print context "default":
    block standard: default [code]
                            options [end at le indent,
                                     end at line separator,
                                     end at outer closing]
    block TOP LEVEL: default []
                             options [end at le indent,
                                      end at line separator,
                                      end at outer closing]
parser define selector text
parser define selector code
parser define selector math
parser define selector operator 1
parser print selector "":
    block standard: operator 1
    block standard: math
    block standard: text
    block standard: code
    block TOP LEVEL: data
    block TOP LEVEL: parser
parser print context "default":
    block standard: default [code]
                            options [end at le indent,
                                     end at line separator,
                                     end at outer closing]
    block TOP LEVEL: default []
                             options [end at le indent,
                                      end at line separator,
                                      end at outer closing]
parser define bracket "(" ... ")" [code, math, text]
parser define bracket "[" ... "]" [code, math, text]
parser print bracket "[":
    block standard: bracket "[" ... "]" [code, text, math]
    block TOP LEVEL: bracket "[" ... "]" [parser]
                     with parsing options [- end at line separator]
parser define indentation mark ":" ... ";" [code, math, text]
parser print bracket ":":
    block standard: indentation mark ":" ... ";" [code, text, math]
                    with parsing options [- end at line break,
                                          + end at le indent,
                                          - end at lt indent,
                                          - end at paragraph break,
                                          + end at line separator,
                                          + end at outer closing]
ERROR: in line 27: unrecognized flag/option name:
parser define bracket "[+" ... "+]" [text, operator 2]
                                           ^^^^^^^^^^
ERROR: in line 28: expected `,' after:
parser define bracket "<+" ... "+>" [text + operator]
                                     ^^^^
parser define bracket "<+" ... "+>" [code, operator 1]
       with parsing selectors [^ code, - math, + operator 1]
parser print bracket "<+":
    block standard: bracket "<+" ... "+>" [code, operator 1]
                    with parsing selectors [^ code, - math,
                                            + operator 1]
parser trace [ + subexpression lines,
               + subexpression elements]
======= TEST: parser test "abcdef"
------- lines 35-36:
parser test "abc"
^^^^^^^^^^^^^^^^^
            "def"
^^^^^^^^^^^^^^^^^
------- lines 35-36:
parser test "abc"
            ^^^^^
            "def"
^^^^^^^^^^^^^^^^^
======= END TEST
======= TEST: parser test:
                  "abc"
                  "def"
------- lines 37-39:
parser test:
^^^^^^^^^^^^
        "abc"
^^^^^^^^^^^^^
        "def"
^^^^^^^^^^^^^
------- lines 37-39:
parser test:
           ^
        "abc"
^^^^^^^^^^^^^
        "def"
^^^^^^^^^^^^^
------- line 38:
        "abc"
        ^^^^^
------- line 38:
        "abc"
        ^^^^^
------- line 39:
        "def"
        ^^^^^
------- line 39:
        "def"
        ^^^^^
======= END TEST
======= TEST: parser test <+ hi there +> <+ hi "[" embedded "]" there +>
------- line 41:
parser test <+ hi there +> <+ hi [embedded] there +>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 41:
parser test <+ hi there +> <+ hi [embedded] there +>
            ^^^^^^^^^^^^^^
------- line 41:
parser test <+ hi there +> <+ hi [embedded] there +>
                           ^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser define bracket "[X" ... "X]" [code, operator 1]
       with parsing selectors [- code, + operator 1]
======= TEST: parser test [a [b c] c] [X a "[" b c "]" d X]
------- line 44:
parser test [ a [ b c ] c ] [X a [ b c ] d X]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 44:
parser test [ a [ b c ] c ] [X a [ b c ] d X]
            ^^^^^^^^^^^^^^^
------- line 44:
parser test [ a [ b c ] c ] [X a [ b c ] d X]
                ^^^^^^^
------- line 44:
parser test [ a [ b c ] c ] [X a [ b c ] d X]
                            ^^^^^^^^^^^^^^^^^
======= END TEST
======= TEST: parser test this is a paragraph +:
                  line 1
                  line {# 2a #} "::" line {# 2b #}; line {# 2c #}
                  last line
------- lines 45-48:
parser test this is a paragraph +:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    line 1
^^^^^^^^^^
    line 2a:: line 2b; line 2c
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    last line
^^^^^^^^^^^^^
------- lines 45-48:
parser test this is a paragraph +:
                                 ^
    line 1
^^^^^^^^^^
    line 2a:: line 2b; line 2c
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    last line
^^^^^^^^^^^^^
------- line 46:
    line 1
    ^^^^^^
------- line 47:
    line 2a:: line 2b; line 2c
    ^^^^^^^^^^^^^^^^^^
------- line 47:
    line 2a:: line 2b; line 2c
         ^^
------- line 47:
    line 2a:: line 2b; line 2c
                   ^^
------- line 47:
    line 2a:: line 2b; line 2c
                       ^^^^^^^
------- line 47:
    line 2a:: line 2b; line 2c
                            ^^
------- line 48:
    last line
    ^^^^^^^^^
======= END TEST
parser define indentation mark "+:" ... "::" [code]
======= TEST: parser test this is a paragraph+:
                  line 1
                  line {# 2a #}:: line {# 2b #} ";" line {# 2c #}
                  last line
------- lines 50-53:
parser test this is a paragraph +:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    line 1
^^^^^^^^^^
    line 2a:: line 2b; line 2c
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    last line
^^^^^^^^^^^^^
------- lines 50-53:
parser test this is a paragraph +:
                                ^^
    line 1
^^^^^^^^^^
    line 2a:: line 2b; line 2c
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    last line
^^^^^^^^^^^^^
------- line 51:
    line 1
    ^^^^^^
------- line 52:
    line 2a:: line 2b; line 2c
    ^^^^^^^^^
------- line 52:
    line 2a:: line 2b; line 2c
         ^^
------- line 52:
    line 2a:: line 2b; line 2c
              ^^^^^^^^^^^^^^^^
------- line 52:
    line 2a:: line 2b; line 2c
                   ^^
------- line 52:
    line 2a:: line 2b; line 2c
                            ^^
------- line 53:
    last line
    ^^^^^^^^^
======= END TEST
======= TEST: parser test <X "|" hi there "|" X>
------- line 54:
parser test  <X| hi there |X>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
ERROR: in line 55: unrecognized flag/option name:
parser trace [+ foo]
                ^^^
parser trace [+ parser commands]
parser trace [+ parser commands]
parser trace [+ warnings]
parser begin block 1
parser define bracket "<*" ... "*>" [code]
======= TEST: parser test <* hi there A *>
------- line 62:
parser test <* hi there A *>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 62:
parser test <* hi there A *>
            ^^^^^^^^^^^^^^^^
======= END TEST
ERROR: in line 63: innermost block name does not match `block x':
parser end block x
^^^^^^^^^^^^^^^^^^
======= TEST: parser test <* hi there B *>
------- line 64:
parser test <* hi there B *>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 64:
parser test <* hi there B *>
            ^^^^^^^^^^^^^^^^
======= END TEST
parser end block 1
======= TEST: parser test <* hi there C *>
------- line 66:
parser test <* hi there C *>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
ERROR: in line 67: innermost block name does not match `block 1':
parser end block 1
^^^^^^^^^^^^^^^^^^
parser define bracket "<|" ... "|>" [code]
======= TEST: parser test < |hi there D| >
------- line 69:
parser test <| hi there D |>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 69:
parser test <| hi there D |>
            ^^^^^^^^^^^^^^^^
======= END TEST
parser begin block 1
parser undefine bracket "<|" ... "|>" [code]
======= TEST: parser test < "|" hi there E "|" >
------- line 72:
parser test <| hi there E |>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
WARNING: in line 73: undefine found no definition:
parser undefine bracket "<|" ... "|>" [code]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
parser undefine bracket "<|" ... "|>" [code]
parser end block 1
======= TEST: parser test < |hi there F| >
------- line 75:
parser test <| hi there F |>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 75:
parser test <| hi there F |>
            ^^^^^^^^^^^^^^^^
======= END TEST
parser undefine bracket "<|" ... "|>" [code]
======= TEST: parser test < "|" hi there F "|" >
------- line 77:
parser test <| hi there F |>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
WARNING: in line 78: undefine found no definition:
parser undefine bracket "<|" ... "|>" [code]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
parser undefine bracket "<|" ... "|>" [code]
parser define bracket "`" ... "'" [code]
parser define bracket "```" ... "'''" [code]
       with parsing options []
parser print bracket "":
    block standard: bracket [< "[" "X" >] ... [< "X" "]" >]
                    [code, operator 1]
                    with parsing selectors [- code, + operator 1]
    block standard: bracket "(" ... ")" [code, text, math]
    block TOP LEVEL: bracket "(" ... ")" [parser]
                     with parsing options [- end at line separator]
    block standard: indentation mark ":" ... ";" [code, text, math]
                    with parsing options [- end at line break,
                                          + end at le indent,
                                          - end at lt indent,
                                          - end at paragraph break,
                                          + end at line separator,
                                          + end at outer closing]
    block standard: bracket "[" ... "]" [code, text, math]
    block TOP LEVEL: bracket "[" ... "]" [parser]
                     with parsing options [- end at line separator]
    block standard: bracket "`" ... "'" [code]
    block standard: bracket [< "`" "`" "`" >] ... [< "'" "'" "'" >]
                    [code]
                    with parsing options [- end at line break,
                                          - end at le indent,
                                          - end at lt indent,
                                          - end at paragraph break,
                                          - end at line separator,
                                          - end at outer closing]
    block standard: bracket [< "<" "|" >] ... [< "|" ">" >] []
    block TOP LEVEL: indentation mark [< "TOP" "LEVEL" >] ... ";" []
    block standard: bracket "<+" ... "+>" [code, operator 1]
                    with parsing selectors [^ code, - math,
                                            + operator 1]
    block standard: indentation mark [< "+" ":" >] ... "::" [code]
                    with parsing options [- end at line break,
                                          + end at le indent,
                                          - end at lt indent,
                                          - end at paragraph break,
                                          + end at line separator,
                                          + end at outer closing]
======= TEST: parser test (```")"''')
------- line 84:
parser test ( ``` ) ''' )
^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 84:
parser test ( ``` ) ''' )
            ^^^^^^^^^^^^^
------- line 84:
parser test ( ``` ) ''' )
              ^^^^^^^^^
======= END TEST
======= TEST: parser test (```")"''')
------- lines 85-87:
parser test ( ```
^^^^^^^^^^^^^^^^^
)
^
''' )
^^^^^
------- lines 85-87:
parser test ( ```
            ^^^^^
)
^
''' )
^^^^^
------- lines 85-87:
parser test ( ```
              ^^^
)
^
''' )
^^^
======= END TEST
ERROR: in line 88: missing closing bracket "'" inserted before ")":
parser test ( ` ) ' )
                ^
======= TEST: parser test (`') "'" ")"
------- line 88:
parser test ( ` ) ' )
^^^^^^^^^^^^^^^^^^^^^
------- line 88:
parser test ( ` ) ' )
            ^^^^^
------- line 88:
parser test ( ` ) ' )
              ^
======= END TEST
ERROR: in line 89: missing closing bracket "'" inserted before end of
       line:
parser test ( `
               ^
ERROR: in line 89: missing closing bracket ")" inserted before end of
       line:
parser test ( `
               ^
======= TEST: parser test (`')
------- line 89:
parser test ( `
^^^^^^^^^^^^^^^
------- line 89:
parser test ( `
            ^^^
------- line 89:
parser test ( `
              ^
======= END TEST
======= TEST: parser test
                  (An indented paragraph
                   {"": .terminator = [$ INDENTED_PARAGRAPH $],
                        .initiator = ":"|
                        {"": .terminator = "<LF>", .initiator =
                             [$ LOGICAL_LINE $]|
                             ```This logical line continues on no matter
                                what "," even with a spurious ")" ","
                                until the following is encountered-'''|}
                        {"": .terminator = "<LF>", .initiator =
                             [$ LOGICAL_LINE $]|Second line of indented
                             paragraph "."|}|})
------- lines 92-97:
parser test ( An indented paragraph:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                ```This logical line continues on no
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
matter what, even with a spurious ), until
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the following is encountered- '''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                Second line of indented paragraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              ) // End of () bracketed subexpression
^^^^^^^^^^^^^^^
------- lines 92-97:
parser test ( An indented paragraph:
            ^^^^^^^^^^^^^^^^^^^^^^^^
                ```This logical line continues on no
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
matter what, even with a spurious ), until
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the following is encountered- '''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                Second line of indented paragraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              ) // End of () bracketed subexpression
^^^^^^^^^^^^^^^
------- lines 92-96:
parser test ( An indented paragraph:
                                   ^
                ```This logical line continues on no
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
matter what, even with a spurious ), until
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the following is encountered- '''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                Second line of indented paragraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines 93-95:
                ```This logical line continues on no
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
matter what, even with a spurious ), until
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the following is encountered- '''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines 93-95:
                ```This logical line continues on no
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
matter what, even with a spurious ), until
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the following is encountered- '''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 96:
                Second line of indented paragraph.
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
======= TEST: parser test ["?" MISSING "?"]
------- line 99:
parser test [? MISSING ?]
^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 99:
parser test [? MISSING ?]
            ^^^^^^^^^^^^^
======= END TEST
parser define bracket "[?" ... "?]" [code]
       with special reformatter
======= TEST: parser test [$ MISSING $]
------- line 102:
parser test [? MISSING ?]
^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser begin block 1
parser define indentation offset 4
parser print indentation offset:
    block block 1: 4
    block standard: 2
    block TOP LEVEL: 2
WARNING: in line 108: lexeme indent 1 too near paragraph indent 0:
 line with indent 1
 ^^^^
WARNING: in line 110: lexeme indent 2 too near paragraph indent 0:
  line with indent 2
  ^^^^
parser end block 1
parser print indentation offset:
    block standard: 2
    block TOP LEVEL: 2
WARNING: in line 117: lexeme indent 1 too near paragraph indent 0:
 line with indent 1
 ^^^^
======= TEST: parser test:
                  well
                      (hello
                       {"": .terminator = [$ INDENTED_PARAGRAPH $],
                            .initiator = ":"|
                            {"": .terminator = "<LF>", .initiator =
                                 [$ LOGICAL_LINE $]|goodbye|}|}) there
                  hi there
------- lines 123-126:
parser test:
^^^^^^^^^^^^
        well ( hello:
^^^^^^^^^^^^^^^^^^^^^
                goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        hi there
^^^^^^^^^^^^^^^^
------- lines 123-126:
parser test:
           ^
        well ( hello:
^^^^^^^^^^^^^^^^^^^^^
                goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        hi there
^^^^^^^^^^^^^^^^
------- lines 124-125:
        well ( hello:
        ^^^^^^^^^^^^^
                goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines 124-125:
        well ( hello:
             ^^^^^^^^
                goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines 124-125:
        well ( hello:
                    ^
                goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^
------- line 125:
                goodbye ) there
                ^^^^^^^
------- line 126:
        hi there
        ^^^^^^^^
======= END TEST
======= TEST: parser test:
                  (hello
                   {"": .terminator = [$ INDENTED_PARAGRAPH $],
                        .initiator = ":"|
                        {"": .terminator = "<LF>", .initiator =
                             [$ LOGICAL_LINE $]|goodbye|}|}) there hi
                      there ")" end
------- lines 128-132:
parser test:
^^^^^^^^^^^^
        ( hello:
^^^^^^^^^^^^^^^^
            goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
          ) end
^^^^^^^^^^^^^^^
------- lines 128-132:
parser test:
           ^
        ( hello:
^^^^^^^^^^^^^^^^
            goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
          ) end
^^^^^^^^^^^^^^^
------- lines 129-132:
        ( hello:
        ^^^^^^^^
            goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
          ) end
^^^^^^^^^^^^^^^
------- lines 129-130:
        ( hello:
        ^^^^^^^^
            goodbye ) there
^^^^^^^^^^^^^^^^^^^^^
------- lines 129-130:
        ( hello:
               ^
            goodbye ) there
^^^^^^^^^^^^^^^^^^^
------- line 130:
            goodbye ) there
            ^^^^^^^
======= END TEST
ERROR: in line 137: missing closing bracket ")" inserted before end of
       line:
            hi there
                    ^
======= TEST: parser test:
                  (hello
                   {"": .terminator = [$ INDENTED_PARAGRAPH $],
                        .initiator = ":"|
                        {"": .terminator = "<LF>", .initiator =
                             [$ LOGICAL_LINE $]|goodbye there|}
                        {"": .terminator = "<LF>", .initiator =
                             [$ LOGICAL_LINE $]|hi there|}|})
                  ")" end
------- lines 134-138:
parser test:
^^^^^^^^^^^^
        ( hello:
^^^^^^^^^^^^^^^^
            goodbye there
^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
        ) end
^^^^^^^^^^^^^
------- lines 134-138:
parser test:
           ^
        ( hello:
^^^^^^^^^^^^^^^^
            goodbye there
^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
        ) end
^^^^^^^^^^^^^
------- lines 135-137:
        ( hello:
        ^^^^^^^^
            goodbye there
^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
------- lines 135-137:
        ( hello:
        ^^^^^^^^
            goodbye there
^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
------- lines 135-137:
        ( hello:
               ^
            goodbye there
^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
------- line 136:
            goodbye there
            ^^^^^^^^^^^^^
------- line 137:
            hi there
            ^^^^^^^^
------- line 138:
        ) end
        ^^^^^
======= END TEST
