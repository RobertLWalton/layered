*PARSER*:
    print bracket ""
        block TOP LEVEL: bracket [< "[" "<" >] ... [< ">" "]" >] [data]
                         with parsing selectors [- TOP LEVEL]
                         with label reformatter
        block TOP LEVEL: bracket [< "{" "*" >] ... [< "*" "}" >] [data]
                         with parsing selectors [- TOP LEVEL]
                         with multivalue reformatter ( "," )
        block TOP LEVEL: bracket "(" ... ")" [data]
                         with parsing selectors [- TOP LEVEL]
        block TOP LEVEL: bracket "[" ... "]" [data]
                         with parsing selectors [- TOP LEVEL]
        block TOP LEVEL: bracket "`" ... "'" [data]
                         with parsing selectors [- TOP LEVEL]
        block TOP LEVEL: bracket [< "{" "{" >] ... [< "}" "}" >] [data]
                         with parsing selectors [- TOP LEVEL]
        block TOP LEVEL: bracket "{" ... "|" ... "|" ... "}"
                         // "||" is also allowed.
                         [data]
                         with parsing selectors [- TOP LEVEL]
                         with attribute selectors [data]
                         with attributes ":" ... "=" ... ","
                         with attribute negator "no"
                         with attribute flags initiator "["
                         with attribute multivalue initiator [< "{" "*" >]
        block TOP LEVEL: indentation mark [< "*PARSER*" "*TEST*" ":" >] ... ";"
                         [TOP LEVEL]
                         with parsing selectors [- TOP LEVEL]
        block TOP LEVEL: indentation mark [< "*PARSER*" ":" >] ... ";"
                         [TOP LEVEL]
                         with parsing selectors [data]
        block TOP LEVEL: indentation mark [< "TOP" "LEVEL" >] []
                         with parsing selectors [- TOP LEVEL]
        block TOP LEVEL: bracket [< "[" "$" >] ... [< "$" "]" >] [data]
                         with parsing selectors [- TOP LEVEL]
                         with special reformatter
*PARSER*:
ERROR: in line ##: too few quoted names in:
    define bracket "[+"
    ^^^^^^^^^^^^^^^^^^^
ERROR: in line ##: expected quoted name after:
    define bracket "[+" ...
                        ^^^
    print top level
        block standard:  selectors [TOP LEVEL, code]
                         options [end at le indent,
                                  end at line separator,
                                  end at outer closing]
        block TOP LEVEL:  selectors [TOP LEVEL]
                          options [end at le indent,
                                   end at line separator,
                                   end at outer closing]
    define selector text
    define selector code
    define selector math
    define selector operator 1
    print selector ""
        block standard: operator 1
        block standard: math
        block standard: text
        block standard: code
        block TOP LEVEL: data
        block TOP LEVEL: TOP LEVEL
    print top level
        block standard:  selectors [TOP LEVEL, code]
                         options [end at le indent,
                                  end at line separator,
                                  end at outer closing]
        block TOP LEVEL:  selectors [TOP LEVEL]
                          options [end at le indent,
                                   end at line separator,
                                   end at outer closing]
    define bracket "(" ... ")" [code, math, text]
    define bracket "[" ... "]" [code, math, text]
    print bracket "["
        block TOP LEVEL: bracket [< "[" "<" >] ... [< ">" "]" >] [data]
                         with parsing selectors [- TOP LEVEL]
                         with label reformatter
        block standard: bracket "[" ... "]" [code, text, math]
                        with parsing selectors [- TOP LEVEL]
        block TOP LEVEL: bracket "[" ... "]" [data]
                         with parsing selectors [- TOP LEVEL]
        block TOP LEVEL: bracket [< "[" "$" >] ... [< "$" "]" >] [data]
                         with parsing selectors [- TOP LEVEL]
                         with special reformatter
    define indentation mark ":" ... ";"
                            [code, math, text]
    print bracket ":"
        block standard: indentation mark ":" ... ";" [code, text, math]
                        with parsing selectors [- TOP LEVEL]
                        with parsing options [end at le indent,
                                              end at line separator,
                                              end at outer closing]
        block TOP LEVEL: indentation mark [< "*PARSER*" "*TEST*" ":" >] ... ";"
                         [TOP LEVEL]
                         with parsing selectors [- TOP LEVEL]
        block TOP LEVEL: indentation mark [< "*PARSER*" ":" >] ... ";"
                         [TOP LEVEL]
                         with parsing selectors [data]
ERROR: in line ##: unrecognized flag/option name:
    define bracket "[+" ... "+]" [text, operator 2]
                                        ^^^^^^^^^^
ERROR: in line ##: expected `,' after:
    define bracket "<+" ... "+>" [text + operator]
                                  ^^^^
    define bracket "<+" ... "+>" [code, operator 1]
        with parsing selectors
             [^ code, - math, + operator 1]
    print bracket "<+"
        block standard: bracket "<+" ... "+>" [code, operator 1]
                        with parsing selectors [- TOP LEVEL, ^ code,
                                                - math, + operator 1]
*PARSER*:
    trace [ + subexpression lines,
            + subexpression elements]
======= PARSER TEST: "abcdef"
======= lines ##-##:
    "abc"
    ^^^^^
        # "def"
^^^^^^^^^^^^^^^
------- lines ##-##:
    "abc"
    ^^^^^
        # "def"
^^^^^^^^^^^^^^^
======= PARSER TEST: "abc"
======= line ##:
    "abc"
    ^^^^^
------- line ##:
    "abc"
    ^^^^^
======= PARSER TEST: # "def"
======= line ##:
    # "def"
    ^^^^^^^
------- line ##:
    # "def"
      ^^^^^
======= PARSER TEST: <+ hi there +> <+ hi "[" embedded "]" there +>
======= line ##:
    <+ hi there +> <+ hi [embedded] there +>
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ##:
    <+ hi there +> <+ hi [embedded] there +>
    ^^^^^^^^^^^^^^
------- line ##:
    <+ hi there +> <+ hi [embedded] there +>
                   ^^^^^^^^^^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    begin block BLOCK1
    define bracket "[X" ... "X]" [code, operator 1]
        with parsing selectors [- code, + operator 1]
======= PARSER TEST: [a [b c] c] [X a "[" b c "]" d X]
======= line ##:
    [ a [ b c ] c ] [X a [ b c ] d X]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ##:
    [ a [ b c ] c ] [X a [ b c ] d X]
    ^^^^^^^^^^^^^^^
------- line ##:
    [ a [ b c ] c ] [X a [ b c ] d X]
        ^^^^^^^
------- line ##:
    [ a [ b c ] c ] [X a [ b c ] d X]
                    ^^^^^^^^^^^^^^^^^
======= PARSER TEST: this is a paragraph +:
                         line #
                         line {# 2a #} "::" line {# 2b #}; line {# 2c #}
                         last line
======= lines ##-##:
    this is a paragraph +:
    ^^^^^^^^^^^^^^^^^^^^^^
        line #
^^^^^^^^^^^^^^
        line #a:: line #b; line #c
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        last line
^^^^^^^^^^^^^^^^^
------- lines ##-##:
    this is a paragraph +:
                         ^
        line #
^^^^^^^^^^^^^^
        line #a:: line #b; line #c
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        last line
^^^^^^^^^^^^^^^^^
------- line ##:
        line #
        ^^^^^^
------- line ##:
        line #a:: line #b; line #c
        ^^^^^^^^^^^^^^^^^^
------- line ##:
        line #a:: line #b; line #c
             ^^
------- line ##:
        line #a:: line #b; line #c
                       ^^
------- line ##:
        line #a:: line #b; line #c
                           ^^^^^^^
------- line ##:
        line #a:: line #b; line #c
                                ^^
------- line ##:
        last line
        ^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    define indentation mark "+:" ... "::" [code]
======= PARSER TEST: this is a paragraph+:
                         line #
                         line {# 2a #}:: line {# 2b #} ";" line {# 2c #}
                         last line
======= lines ##-##:
    this is a paragraph +:
    ^^^^^^^^^^^^^^^^^^^^^^
        line #
^^^^^^^^^^^^^^
        line #a:: line #b; line #c
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        last line
^^^^^^^^^^^^^^^^^
------- lines ##-##:
    this is a paragraph +:
                        ^^
        line #
^^^^^^^^^^^^^^
        line #a:: line #b; line #c
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        last line
^^^^^^^^^^^^^^^^^
------- line ##:
        line #
        ^^^^^^
------- line ##:
        line #a:: line #b; line #c
        ^^^^^^^^^
------- line ##:
        line #a:: line #b; line #c
             ^^
------- line ##:
        line #a:: line #b; line #c
                  ^^^^^^^^^^^^^^^^
------- line ##:
        line #a:: line #b; line #c
                       ^^
------- line ##:
        line #a:: line #b; line #c
                                ^^
------- line ##:
        last line
        ^^^^^^^^^
======= PARSER TEST: <X "|" hi there "|" X>
======= line ##:
    <X| hi there |X>
    ^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    end block BLOCK1
*PARSER*:
ERROR: in line ##: unrecognized flag/option name:
    trace [+ foo]
             ^^^
    trace [+ parser commands]
    trace [+ parser commands]
    trace [+ warnings]
*PARSER*:
    begin block BLOCK1
    define bracket "<*" ... "*>" [code]
======= PARSER TEST: <* hi there A *>
======= line ##:
    <* hi there A *>
    ^^^^^^^^^^^^^^^^
------- line ##:
    <* hi there A *>
    ^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
ERROR: in line ##: innermost block name does not match `x':
    end block x
    ^^^^^^^^^^^
======= PARSER TEST: <* hi there B *>
======= line ##:
    <* hi there B *>
    ^^^^^^^^^^^^^^^^
------- line ##:
    <* hi there B *>
    ^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    end block BLOCK1
======= PARSER TEST: <* hi there C *>
======= line ##:
    <* hi there C *>
    ^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
ERROR: in line ##: innermost block name does not match `BLOCK1':
    end block BLOCK1
    ^^^^^^^^^^^^^^^^
*PARSER*:
    define bracket "<|" ... "|>" [code]
======= PARSER TEST: < |hi there D| >
======= line ##:
    <| hi there D |>
    ^^^^^^^^^^^^^^^^
------- line ##:
    <| hi there D |>
    ^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    begin block BLOCK1
    undefine bracket "<|" ... "|>" [code]
======= PARSER TEST: < "|" hi there E "|" >
======= line ###:
    <| hi there E |>
    ^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
WARNING: in line ###: undefine found no definition:
    undefine bracket "<|" ... "|>" [code]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    undefine bracket "<|" ... "|>" [code]
    end block BLOCK1
======= PARSER TEST: < |hi there F| >
======= line ###:
    <| hi there F |>
    ^^^^^^^^^^^^^^^^
------- line ###:
    <| hi there F |>
    ^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    undefine bracket "<|" ... "|>" [code]
======= PARSER TEST: < "|" hi there F "|" >
======= line ###:
    <| hi there F |>
    ^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
WARNING: in line ###: undefine found no definition:
    undefine bracket "<|" ... "|>" [code]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    undefine bracket "<|" ... "|>" [code]
*PARSER*:
    begin block BLOCK1
    define bracket "`" ... "'" [code]
    define bracket "```" ... "'''" [code]
        with parsing options []
    print bracket ""
        block TOP LEVEL: bracket [< "[" "<" >] ... [< ">" "]" >] [data]
                         with parsing selectors [- TOP LEVEL]
                         with label reformatter
        block TOP LEVEL: bracket [< "{" "*" >] ... [< "*" "}" >] [data]
                         with parsing selectors [- TOP LEVEL]
                         with multivalue reformatter ( "," )
        block standard: bracket "(" ... ")" [code, text, math]
                        with parsing selectors [- TOP LEVEL]
        block TOP LEVEL: bracket "(" ... ")" [data]
                         with parsing selectors [- TOP LEVEL]
        block standard: indentation mark ":" ... ";" [code, text, math]
                        with parsing selectors [- TOP LEVEL]
                        with parsing options [end at le indent,
                                              end at line separator,
                                              end at outer closing]
        block standard: bracket "[" ... "]" [code, text, math]
                        with parsing selectors [- TOP LEVEL]
        block TOP LEVEL: bracket "[" ... "]" [data]
                         with parsing selectors [- TOP LEVEL]
        block BLOCK1: bracket "`" ... "'" [code]
                      with parsing selectors [- TOP LEVEL]
        block TOP LEVEL: bracket "`" ... "'" [data]
                         with parsing selectors [- TOP LEVEL]
        block BLOCK1: bracket "```" ... "'''" [code]
                      with parsing selectors [- TOP LEVEL]
                      with parsing options []
        block TOP LEVEL: bracket [< "{" "{" >] ... [< "}" "}" >] [data]
                         with parsing selectors [- TOP LEVEL]
        block TOP LEVEL: bracket "{" ... "|" ... "|" ... "}"
                         // "||" is also allowed.
                         [data]
                         with parsing selectors [- TOP LEVEL]
                         with attribute selectors [data]
                         with attributes ":" ... "=" ... ","
                         with attribute negator "no"
                         with attribute flags initiator "["
                         with attribute multivalue initiator [< "{" "*" >]
        block TOP LEVEL: indentation mark [< "*PARSER*" "*TEST*" ":" >] ... ";"
                         [TOP LEVEL]
                         with parsing selectors [- TOP LEVEL]
        block standard: bracket [< "<" "|" >] ... [< "|" ">" >] []
                        with parsing selectors [- TOP LEVEL]
        block TOP LEVEL: indentation mark [< "*PARSER*" ":" >] ... ";"
                         [TOP LEVEL]
                         with parsing selectors [data]
        block TOP LEVEL: indentation mark [< "TOP" "LEVEL" >] []
                         with parsing selectors [- TOP LEVEL]
        block standard: bracket "<+" ... "+>" [code, operator 1]
                        with parsing selectors [- TOP LEVEL, ^ code,
                                                - math, + operator 1]
        block TOP LEVEL: bracket [< "[" "$" >] ... [< "$" "]" >] [data]
                         with parsing selectors [- TOP LEVEL]
                         with special reformatter
======= PARSER TEST: (```")"''')
======= line ###:
    ( ``` ) ''' )
    ^^^^^^^^^^^^^
------- line ###:
    ( ``` ) ''' )
    ^^^^^^^^^^^^^
------- line ###:
    ( ``` ) ''' )
      ^^^^^^^^^
======= PARSER TEST: (```")"''')
======= lines ###-###:
    ( ```
    ^^^^^
)
^
''' )
^^^^^
------- lines ###-###:
    ( ```
    ^^^^^
)
^
''' )
^^^^^
------- lines ###-###:
    ( ```
      ^^^
)
^
''' )
^^^
======= END PARSER TEST(S)
ERROR: in line ###: missing closing bracket `'' inserted before `)':
    ( ` ) ' )
        ^
======= PARSER TEST: (`') "'" ")"
======= line ###:
    ( ` ) ' )
    ^^^^^^^^^
------- line ###:
    ( ` ) ' )
    ^^^^^
------- line ###:
    ( ` ) ' )
      ^
======= END PARSER TEST(S)
ERROR: in line ###: missing closing bracket `'' inserted at end of
       logical line that ends here:
    ( `
       ^
ERROR: in line ###: missing closing bracket `)' inserted at end of
       logical line that ends here:
    ( `
       ^
======= PARSER TEST: (`')
======= line ###:
    ( `
    ^^^
------- line ###:
    ( `
    ^^^
------- line ###:
    ( `
      ^
======= END PARSER TEST(S)
======= PARSER TEST: (An indented paragraph
                      {"": .terminator = [$ INDENTED_PARAGRAPH $],
                           .initiator = ":"|
                           {"": .terminator = "<LF>", .initiator =
                                [$ LOGICAL_LINE $]|
                                ```This logical line continues on no
                                   matter what "," even with a spurious
                                   ")" "," until the following is
                                   encountered-'''|}
                           {"": .terminator = "<LF>", .initiator =
                                [$ LOGICAL_LINE $]|Second line of
                                indented paragraph "."|}|})
======= lines ###-###:
    ( An indented paragraph:
    ^^^^^^^^^^^^^^^^^^^^^^^^
                ```This logical line continues on no
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
matter what, even with a spurious ), until
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the following is encountered- '''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                Second line of indented paragraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              ) // End of () bracketed subexpression
^^^^^^^^^^^^^^^
------- lines ###-###:
    ( An indented paragraph:
    ^^^^^^^^^^^^^^^^^^^^^^^^
                ```This logical line continues on no
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
matter what, even with a spurious ), until
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the following is encountered- '''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                Second line of indented paragraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              ) // End of () bracketed subexpression
^^^^^^^^^^^^^^^
------- lines ###-###:
    ( An indented paragraph:
                           ^
                ```This logical line continues on no
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
matter what, even with a spurious ), until
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the following is encountered- '''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                Second line of indented paragraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
                ```This logical line continues on no
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
matter what, even with a spurious ), until
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the following is encountered- '''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
                ```This logical line continues on no
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
matter what, even with a spurious ), until
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the following is encountered- '''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
                Second line of indented paragraph.
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    end block BLOCK1
*PARSER*:
    begin block BLOCK1
======= PARSER TEST: ["?" MISSING "?"]
======= line ###:
    [? MISSING ?]
    ^^^^^^^^^^^^^
------- line ###:
    [? MISSING ?]
    ^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    define bracket "[?" ... "?]" [code]
        with special reformatter
======= PARSER TEST: [$ MISSING $]
======= line ###:
    [? MISSING ?]
    ^^^^^^^^^^^^^
======= PARSER TEST: [@ x 1 @ y 2 @ w @ z 3 @]
======= line ###:
    [@ x 1 @ y 2 @ w @ z 3 @]
    ^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    [@ x 1 @ y 2 @ w @ z 3 @]
    ^^^^^^^^^^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    define bracket "[@" ... "@]" [code]
        with multivalue reformatter ( "@" )
======= PARSER TEST: [@ [< x 1 >] @ [< y 2 >] @ w @ [< z 3 >] @]
======= line ###:
    [@ x 1 @ y 2 @ w @ z 3 @]
    ^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    [@ x 1 @ y 2 @ w @ z 3 @]
    ^^^^^^^^^^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    end block BLOCK1
*PARSER*:
    begin block BLOCK1
    define indentation offset 4
    print indentation offset
        block BLOCK1: 4
        block standard: 2
        block TOP LEVEL: 2
WARNING: in line ###: lexeme indent 1 too near paragraph indent 0:
 line with indent 1
 ^
WARNING: in line ###: lexeme indent 2 too near paragraph indent 0:
  line with indent 2
  ^
*PARSER*:
    end block BLOCK1
*PARSER*:
    begin block BLOCK1
    print indentation offset
        block BLOCK1: 2
        block standard: 2
        block TOP LEVEL: 2
    trace [+ parser output, - subexpression elements]
WARNING: in line ###: lexeme indent 1 too near paragraph indent 0:
 line with indent 1
 ^
BRACKETED EXPRESSION: lines ###-###:
first line with indent 0
^^^^^^^^^^^^^^^^^^^^^^^^
 line with indent 1
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION: lines ###-###:
second line with indent 0
^^^^^^^^^^^^^^^^^^^^^^^^^
  line with indent 2
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION: lines ###-###:
third line with indent 0
^^^^^^^^^^^^^^^^^^^^^^^^
    line with indent 4
^^^^^^^^^^^^^^^^^^^^^^
*PARSER*:
    trace [- parser output, + subexpression elements]
ERROR: in line ###: missing closing bracket `)' inserted at end of
       logical line that ends here:
                goodbye ) there
                               ^
======= PARSER TEST: well
                         (hello
                          {"": .terminator = [$ INDENTED_PARAGRAPH $],
                               .initiator = ":"|
                               {"": .terminator = "<LF>", .initiator =
                                    [$ LOGICAL_LINE $]|goodbye ")"
                                    there|}|})
======= lines ###-###:
        well ( hello:
        ^^^^^^^^^^^^^
                goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
        well ( hello:
             ^^^^^^^^
                goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
        well ( hello:
                    ^
                goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
                goodbye ) there
                ^^^^^^^^^^^^^^^
======= PARSER TEST: hi there
======= line ###:
        hi there
        ^^^^^^^^
======= END PARSER TEST(S)
======= PARSER TEST: (hello
                      {"": .terminator = [$ INDENTED_PARAGRAPH $],
                           .initiator = ":"|
                           {"": .terminator = "<LF>", .initiator =
                                [$ LOGICAL_LINE $]|goodbye ")" there|}
                           {"": .terminator = "<LF>", .initiator =
                                [$ LOGICAL_LINE $]|hi there|}|}) end
======= lines ###-###:
        ( hello:
        ^^^^^^^^
            goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
          ) end
^^^^^^^^^^^^^^^
------- lines ###-###:
        ( hello:
        ^^^^^^^^
            goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
          ) end
^^^^^^^^^^^
------- lines ###-###:
        ( hello:
               ^
            goodbye ) there
^^^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
------- line ###:
            goodbye ) there
            ^^^^^^^^^^^^^^^
------- line ###:
            hi there
            ^^^^^^^^
======= END PARSER TEST(S)
ERROR: in line ###: missing closing bracket `)' inserted at end of
       logical line that ends here:
            hi there
                    ^
======= PARSER TEST: (hello
                      {"": .terminator = [$ INDENTED_PARAGRAPH $],
                           .initiator = ":"|
                           {"": .terminator = "<LF>", .initiator =
                                [$ LOGICAL_LINE $]|goodbye there|}
                           {"": .terminator = "<LF>", .initiator =
                                [$ LOGICAL_LINE $]|hi there|}|})
======= lines ###-###:
        ( hello:
        ^^^^^^^^
            goodbye there
^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
        ( hello:
        ^^^^^^^^
            goodbye there
^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
        ( hello:
               ^
            goodbye there
^^^^^^^^^^^^^^^^^^^^^^^^^
            hi there
^^^^^^^^^^^^^^^^^^^^
------- line ###:
            goodbye there
            ^^^^^^^^^^^^^
------- line ###:
            hi there
            ^^^^^^^^
======= PARSER TEST: ")" end
======= line ###:
        ) end
        ^^^^^
======= END PARSER TEST(S)
*PARSER*:
    end block BLOCK1
*PARSER*:
    begin block BLOCK1
    print prefix ""
        nothing found
    define prefix "X" [code]
        with parsing selectors [code, math]
    define prefix "Y" [code]
        with parsing selectors [+ text]
        with group ajax
ERROR: in lines ###-###: `with parsing options' not allowed for prefix
       unless prefix group is `paragraph'; options ignored:
    define prefix "Z" [math]
    ^^^^^^^^^^^^^^^^^^^^^^^^
        with parsing selectors [code]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with implied subprefix {X: y = 5, z = hi there}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with lexical master "DEFAULT"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with parsing options [end at indent]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    define prefix "Z" [math]
        with parsing selectors [code]
        with implied subprefix {X: y = 5, z = hi there}
        with lexical master "DEFAULT"
        with parsing options [end at indent]
    print prefix ""
        block BLOCK1: prefix "X" [code]
                      with parsing selectors [code, math]
        block BLOCK1: prefix "Y" [code]
                      with parsing selectors [- TOP LEVEL, + text]
                      with group ajax
        block BLOCK1: prefix "Z" [math]
                      with parsing selectors [code]
                      with implied subprefix
                      {X: y = "5", z = [< "hi" "there" >]||X}
                      with lexical master "DEFAULT"
    print prefix "X"
        block BLOCK1: prefix "X" [code]
                      with parsing selectors [code, math]
    end block BLOCK1
*PARSER*:
    define typed bracket "T1{" ... "|" ... "|" ... "}T1"
        [code, text, math, data]
        with element selectors [data]
        with attribute selectors [data]
        with attributes "::" ... "==" ... "#"
    define typed bracket "T2{" ... "|" ... "|" ... "}T2"
        [code, text, math, data]
        with element selectors [data]
        with attribute selectors [data, code]
        with attributes "::" ... "==" ... "#"
        with attribute negator "NO"
        with attribute flags initiator "("
        with attribute multivalue initiator "[@"
        with prefix separators allowed
    define bracket "[@" ... "@]" [code]
        with multivalue reformatter ( "@" )
======= PARSER TEST: {T: x = "5", y = "6"|A B C|T}
======= line ###:
    T1{ T:: x == 5 # y == 6 | A B C |T}T1
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    T1{ T:: x == 5 # y == 6 | A B C |T}T1
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= PARSER TEST: {T: x[+-] = "5", y = {* "6", "7" *}|A B C|T}
======= line ###:
    T2{ T:: x(1,2) == 5 # y == [@ 6 @ 7 @] | A B C |T}T2
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    T2{ T:: x(1,2) == 5 # y == [@ 6 @ 7 @] | A B C |T}T2
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= PARSER TEST: ({T||T} A B C)
======= line ###:
    (T1{T}T1 A B C)
    ^^^^^^^^^^^^^^^
------- line ###:
    (T1{T}T1 A B C)
    ^^^^^^^^^^^^^^^
------- line ###:
    (T1{T}T1 A B C)
     ^^^^^^^
======= PARSER TEST: ({T|A B C|T})
======= line ###:
    (T2{T}T2 A B C)
    ^^^^^^^^^^^^^^^
------- line ###:
    (T2{T}T2 A B C)
    ^^^^^^^^^^^^^^^
------- line ###:
    (T2{T}T2 A B C)
     ^^^^^^^^^^^^^
======= PARSER TEST: {T: NO Z, X, W, NO Y|A B C D|T}
======= line ###:
    T1{T:: X # NO Y | A B | NO Z # W | C D | }T1
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    T1{T:: X # NO Y | A B | NO Z # W | C D | }T1
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= PARSER TEST: {T: X, no Y, no Z, W|A B C D|T}
======= line ###:
    T2{T:: X # NO Y | A B | NO Z # W | C D | }T2
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    T2{T:: X # NO Y | A B | NO Z # W | C D | }T2
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    undefine typed bracket
            "T2{" ... "|" ... "|" ... "}T2"
        [code, text, math, data]
======= PARSER TEST: (T2 "{" T "}" T2 A B C)
======= line ###:
    (T2{T}T2 A B C)
    ^^^^^^^^^^^^^^^
------- line ###:
    (T2{T}T2 A B C)
    ^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    begin block BLOCK1
    print string concatenator
        block BLOCK1: "#"
        block standard: "#"
        block TOP LEVEL: "#"
======= PARSER TEST: "AB"
======= line ###:
    "A" # "B"
    ^^^^^^^^^
------- line ###:
    "A" # "B"
    ^^^^^^^^^
======= PARSER TEST: "A" "B"
======= line ###:
    "A" "B"
    ^^^^^^^
------- line ###:
    "A" "B"
    ^^^
------- line ###:
    "A" "B"
        ^^^
======= END PARSER TEST(S)
*PARSER*:
    define string concatenator enabled
    print string concatenator
        block BLOCK1: enabled
        block standard: "#"
        block TOP LEVEL: "#"
======= PARSER TEST: "A" # "B"
======= line ###:
    "A" # "B"
    ^^^^^^^^^
------- line ###:
    "A" # "B"
    ^^^
------- line ###:
    "A" # "B"
          ^^^
======= PARSER TEST: "AB"
======= line ###:
    "A" "B"
    ^^^^^^^
------- line ###:
    "A" "B"
    ^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    define string concatenator disabled
    print string concatenator
        block BLOCK1: disabled
        block standard: "#"
        block TOP LEVEL: "#"
======= PARSER TEST: "A" # "B"
======= line ###:
    "A" # "B"
    ^^^^^^^^^
------- line ###:
    "A" # "B"
    ^^^
------- line ###:
    "A" # "B"
          ^^^
======= PARSER TEST: "A" "B"
======= line ###:
    "A" "B"
    ^^^^^^^
------- line ###:
    "A" "B"
    ^^^
------- line ###:
    "A" "B"
        ^^^
======= END PARSER TEST(S)
*PARSER*:
    end block BLOCK1
*PARSER*:
    begin block BLOCK1
    define typed bracket "8" ... "|" ... "|" ... "9"
        [code, text, math, data]
        with element selectors [data]
        with attribute selectors [data, code]
        with attributes ":" ... "=" ... ","
        with attribute negator "no"
        with attribute flags initiator "["
        with attribute multivalue initiator "{*"
        with prefix separators allowed
======= PARSER TEST: [{my type: my attr = "99"||my type}]
======= line ###:
    [8 my type: my attr = 99 9]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    [8 my type: my attr = 99 9]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    [8 my type: my attr = 99 9]
     ^^^^^^^^^^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    end block BLOCK1
======= PARSER TEST: [8 my type ":" my attr = 99 9]
======= line ###:
    [8 my type: my attr = 99 9]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    [8 my type: my attr = 99 9]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    begin block BLOCK1
    define bracket "[0" ... "0]" [code]
        with special reformatter
======= PARSER TEST: [$ LOGICAL_LINE $]
======= line ###:
    [0 LOGICAL_LINE 0]
    ^^^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    end block BLOCK1
*PARSER*:
    begin block BLOCK1
    define prefix "P1" [code, text]
        with parsing selectors [text]
        with group paragraph
        with implied subprefix {S1}
        with parsing options [end at paragraph break]
    define prefix "P2" [code, text]
        with parsing selectors [text]
        with group paragraph
        with parsing options [end at paragraph break]
    define prefix "P3" [code, text]
        with parsing selectors [text]
        with group paragraph
        with implied subprefix {L3}
        with parsing options [end at paragraph break,
                              end at line separator]
    define prefix "L3" [text]
        with group line
    define prefix "P4" [code, text]
        with parsing selectors [text]
        with group paragraph
        with implied subprefix {L4}
    define prefix "L4" [text]
        with group line
    define typed bracket "{" ... "|" ... "|" ... "}"
        [code, text, math]
        // no element selectors
        with attribute selectors [data]
        with attributes ":" ... "=" ... ","
        with attribute negator "no"
        with attribute flags initiator "["
        with attribute multivalue initiator "{*"
        with prefix separators allowed
    print prefix ""
        block BLOCK1: prefix "L3" [text]
                      with parsing selectors [- TOP LEVEL]
                      with group line
        block BLOCK1: prefix "L4" [text]
                      with parsing selectors [- TOP LEVEL]
                      with group line
        block BLOCK1: prefix "P1" [code, text]
                      with parsing selectors [text]
                      with group paragraph
                      with implied subprefix {S1||S1}
                      with parsing options [end at paragraph break]
        block BLOCK1: prefix "P2" [code, text]
                      with parsing selectors [text]
                      with group paragraph
                      with parsing options [end at paragraph break]
        block BLOCK1: prefix "P3" [code, text]
                      with parsing selectors [text]
                      with group paragraph
                      with implied subprefix {L3||L3}
                      with parsing options [end at paragraph break,
                                            end at line separator]
        block BLOCK1: prefix "P4" [code, text]
                      with parsing selectors [text]
                      with group paragraph
                      with implied subprefix {L4||L4}
======= PARSER TEST: {P1|{S1|Hi there "."|S1} {S1|Bye "."|S1}
                         {S1|And some more "."|S1}|P1}
======= lines ###-###:
    {P1}
    ^^^^
    Hi there.
^^^^^^^^^^^^^
    {S1}Bye.
^^^^^^^^^^^^
    {S1}And some more.
^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
    {P1}
        ^
    Hi there.
^^^^^^^^^^^^^
------- line ###:
    {S1}Bye.
    ^^^^^^^^
------- line ###:
    {S1}And some more.
    ^^^^^^^^^^^^^^^^^^
======= PARSER TEST: And another paragraph "."
======= line ###:
    And another paragraph.
    ^^^^^^^^^^^^^^^^^^^^^^
======= PARSER TEST: {P2|And a third paragraph that is continued over
                         three lines "."|P2}
======= lines ###-###:
    {P2} And a third paragraph
    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    that is continued
^^^^^^^^^^^^^^^^^^^^^
    over three lines.
^^^^^^^^^^^^^^^^^^^^^
======= PARSER TEST: {P3|{L3: .terminator = ";"|And a fourth
                              paragraph|L3}
                         {L3: .terminator = ";"|with line separators|L3}
                         {L3: .terminator = ";"|and more line
                              separators|L3}
                         {L3|and now the end "."|L3}|P3}
======= lines ###-###:
    {P3} And a fourth paragraph; with
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    line separators; and more line separators;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    and now the end.
^^^^^^^^^^^^^^^^^^^^
------- line ###:
    {P3} And a fourth paragraph; with
         ^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
    {P3} And a fourth paragraph; with
                                 ^^^^
    line separators; and more line separators;
^^^^^^^^^^^^^^^^^^^^
------- line ###:
    line separators; and more line separators;
                     ^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
    line separators; and more line separators;
                                              ^
    and now the end.
^^^^^^^^^^^^^^^^^^^^
======= PARSER TEST: {P4|{L4|And a fith paragraph "."|L4}
                         {L4: .terminator = ";"|With a second line|L4}
                         {L4|and a third line "."|L4}
                         {L4|and a fourth line "."|L4}|P4}
======= lines ###-###:
    {P4} And a fith paragraph.
    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    With a second line; and a third line.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    and a fourth line.
^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    {P4} And a fith paragraph.
         ^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    With a second line; and a third line.
    ^^^^^^^^^^^^^^^^^^^
------- line ###:
    With a second line; and a third line.
                        ^^^^^^^^^^^^^^^^^
------- line ###:
    and a fourth line.
    ^^^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    end block BLOCK1
*PARSER*:
    begin block BLOCK1
    define indentation mark "::" ... ";" [code]
        with implied header {p}
ERROR: in line ###: indentation mark implied header of type `p' does not
       have `paragraph' or `line' group; cannot begin indented lines;
       ignored:
        with one line
        ^
======= PARSER TEST: this is the indented paragraph 1::
                         with one line
======= lines ###-###:
    this is the indented paragraph 1::
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with one line
^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
    this is the indented paragraph 1::
                                    ^^
        with one line
^^^^^^^^^^^^^^^^^^^^^
------- line ###:
        with one line
        ^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    define prefix "p" [code]
        with group paragraph
======= PARSER TEST: this is the indented paragraph 2::
                         {p|{"": .terminator = "<LF>", .initiator =
                                 [$ LOGICAL_LINE $]|with one line|}|p}
======= lines ###-###:
    this is the indented paragraph 2::
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with one line
^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
    this is the indented paragraph 2::
                                    ^^
        with one line
^^^^^^^^^^^^^^^^^^^^^
------- line ###:
        with one line
        ^^^^^^^^^^^^^
------- line ###:
        with one line
        ^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    define prefix "p" [code]
        with group paragraph
        with implied subprefix {l}
======= PARSER TEST: this is the indented paragraph 3::
                         {p|{"": .terminator = "<LF>", .initiator =
                                 [$ LOGICAL_LINE $]|
                                 {l|with a first line|l}|}
                            {"": .terminator = "<LF>", .initiator =
                                 [$ LOGICAL_LINE $]|and a second line|}|p}
======= lines ###-###:
    this is the indented paragraph 3::
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with a first line
^^^^^^^^^^^^^^^^^^^^^^^^^
        and a second line
^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
    this is the indented paragraph 3::
                                    ^^
        with a first line
^^^^^^^^^^^^^^^^^^^^^^^^^
        and a second line
^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
        with a first line
        ^^^^^^^^^^^^^^^^^
        and a second line
^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
        with a first line
        ^^^^^^^^^^^^^^^^^
------- line ###:
        with a first line
        ^^^^^^^^^^^^^^^^^
------- line ###:
        and a second line
        ^^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    define prefix "l" [code]
        with group line
======= PARSER TEST: this is the indented paragraph 4::
                         {p|{l|with a first line|l}
                            {l|and a second line|l}
                            {l|and a third line with [HI THERE]
                               embedded|l}|p}
======= lines ###-###:
    this is the indented paragraph 4::
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with a first line
^^^^^^^^^^^^^^^^^^^^^^^^^
        and a second line
^^^^^^^^^^^^^^^^^^^^^^^^^
        and a third line with [ HI THERE ] embedded
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
    this is the indented paragraph 4::
                                    ^^
        with a first line
^^^^^^^^^^^^^^^^^^^^^^^^^
        and a second line
^^^^^^^^^^^^^^^^^^^^^^^^^
        and a third line with [ HI THERE ] embedded
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
        with a first line
        ^^^^^^^^^^^^^^^^^
        and a second line
^^^^^^^^^^^^^^^^^^^^^^^^^
        and a third line with [ HI THERE ] embedded
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
        with a first line
        ^^^^^^^^^^^^^^^^^
------- line ###:
        and a second line
        ^^^^^^^^^^^^^^^^^
------- line ###:
        and a third line with [ HI THERE ] embedded
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
        and a third line with [ HI THERE ] embedded
                              ^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    end block BLOCK1
*PARSER*:
    begin block BLOCK1
    define indentation mark "::" ... ";" [code]
        with implied header {p1}
    define typed bracket "{" ... "|" ... "|" ... "}"
        [code, text, math]
        // no element selectors
        with attribute selectors [data]
        with attributes ":" ... "=" ... ","
        with attribute negator "no"
        with attribute flags initiator "["
        with attribute multivalue initiator "{*"
        with prefix separators allowed
    define prefix "p1" [code]
        with group paragraph
        with implied subprefix {l1}
    define prefix "l1" [code]
        with group line
    define prefix "p2" [code]
        with group paragraph
        with implied subprefix {l2}
    define prefix "l2" [code]
        with group line
ERROR: in line ###: explicit prefix separator of type `p2' has
       `paragraph' group but is not at beginning of a logical line that
       is in paragraph beginning position; ignored:
        {p2} and a fourth subparagraph started
        ^^^^
======= PARSER TEST: this is the indented paragraph 5::
                         {p1|{l1|with a first line|l1}
                             {l1|and a second line with [HI THERE]
                                 embedded|l1}|p1}
                         {p2|{l2|and a second subparagraph|l2}
                             {l2|with a second line of its own|l2}|p2}
                         {p1|{l1|and a third subparagraph|l1}
                             {l1|with a second line of its own|l1}
                             {l1|and a fourth subparagraph started
                                 without in a previous blank line|l1}
                             {l1|with a second line of its own|l1}|p1}
======= lines ###-###:
    this is the indented paragraph 5::
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with a first line
^^^^^^^^^^^^^^^^^^^^^^^^^
        and a second line with [HI THERE] embedded
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
        {p2}and a second subparagraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
        and a third subparagraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        {p2} and a fourth subparagraph started
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             without in a previous blank line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
    this is the indented paragraph 5::
                                    ^^
        with a first line
^^^^^^^^^^^^^^^^^^^^^^^^^
        and a second line with [HI THERE] embedded
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
        {p2}and a second subparagraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
        and a third subparagraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        {p2} and a fourth subparagraph started
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             without in a previous blank line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
        with a first line
        ^^^^^^^^^^^^^^^^^
        and a second line with [HI THERE] embedded
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
        with a first line
        ^^^^^^^^^^^^^^^^^
------- line ###:
        and a second line with [HI THERE] embedded
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
        and a second line with [HI THERE] embedded
                               ^^^^^^^^^^
------- lines ###-###:
        {p2}and a second subparagraph
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
        {p2}and a second subparagraph
            ^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
        with a second line of its own
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
        and a third subparagraph
        ^^^^^^^^^^^^^^^^^^^^^^^^
        with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        {p2} and a fourth subparagraph started
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             without in a previous blank line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
        and a third subparagraph
        ^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
        with a second line of its own
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
        {p2} and a fourth subparagraph started
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             without in a previous blank line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
        with a second line of its own
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    define prefix "p3" [code]
        with group paragraph
        with implied subprefix {l3}
        with parsing options [+ continuing]
    define prefix "l3" [code]
        with group line
    print prefix "p3"
        block BLOCK1: prefix "p3" [code]
                      with parsing selectors [- TOP LEVEL]
                      with group paragraph
                      with implied subprefix {l3||l3}
                      with parsing options [+ continuing]
======= PARSER TEST: this is the indented paragraph 6::
                         {p1|{l1|with a first line|l1}
                             {l1|and a second line with [HI THERE]
                                 embedded|l1}|p1}
                         {p3|{l3|and a second subparagraph|l3}
                             {l3|with a second line of its own|l3}
                             {l3|and a third line after a blank line|l3}
                             {l3|and a fourth line|l3}|p3}
                         {p2|{l2|and a third subparagraph|l2}
                             {l2|with a second line of its own|l2}|p2}
======= lines ###-###:
    this is the indented paragraph 6::
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with a first line
^^^^^^^^^^^^^^^^^^^^^^^^^
        and a second line with [HI THERE] embedded
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
        {p3}and a second subparagraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
        and a third line after a blank line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        and a fourth line
^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
        {p2} and a third subparagraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
    this is the indented paragraph 6::
                                    ^^
        with a first line
^^^^^^^^^^^^^^^^^^^^^^^^^
        and a second line with [HI THERE] embedded
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
        {p3}and a second subparagraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
        and a third line after a blank line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        and a fourth line
^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
        {p2} and a third subparagraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- lines ###-###:
        with a first line
        ^^^^^^^^^^^^^^^^^
        and a second line with [HI THERE] embedded
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
        with a first line
        ^^^^^^^^^^^^^^^^^
------- line ###:
        and a second line with [HI THERE] embedded
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
        and a second line with [HI THERE] embedded
                               ^^^^^^^^^^
------- lines ###-###:
        {p3}and a second subparagraph
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
        and a third line after a blank line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        and a fourth line
^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
        {p3}and a second subparagraph
            ^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
        with a second line of its own
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
        and a third line after a blank line
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
        and a fourth line
        ^^^^^^^^^^^^^^^^^
------- lines ###-###:
        {p2} and a third subparagraph
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with a second line of its own
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
        {p2} and a third subparagraph
             ^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
        with a second line of its own
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    end block BLOCK1
*PARSER*:
    begin block BLOCK1
    define typed bracket "{" ... "|" ... "|" ... "}"
        [code, text, math]
        // no element selectors
        with attribute selectors [data]
        with attributes ":" ... "=" ... ","
        with attribute negator "no"
        with attribute flags initiator "["
        with attribute multivalue initiator "{*"
        with prefix separators allowed
    define prefix "p1" [code]
        with group paragraph
        with implied subprefix {l1}
    define prefix "l1" [code]
        with group line
    define prefix "p2" [code]
        with group paragraph
        with implied subprefix {l2}
        with parsing options [+ continuing]
    define prefix "l2" [code]
        with group line
    define prefix "p3" [code]
        with group paragraph
        with parsing options [+ continuing]
    print prefix ""
        block BLOCK1: prefix "l1" [code]
                      with parsing selectors [- TOP LEVEL]
                      with group line
        block BLOCK1: prefix "l2" [code]
                      with parsing selectors [- TOP LEVEL]
                      with group line
        block BLOCK1: prefix "p1" [code]
                      with parsing selectors [- TOP LEVEL]
                      with group paragraph
                      with implied subprefix {l1||l1}
        block BLOCK1: prefix "p2" [code]
                      with parsing selectors [- TOP LEVEL]
                      with group paragraph
                      with implied subprefix {l2||l2}
                      with parsing options [+ continuing]
        block BLOCK1: prefix "p3" [code]
                      with parsing selectors [- TOP LEVEL]
                      with group paragraph
                      with parsing options [+ continuing]
    trace [+ parser output]
BRACKETED EXPRESSION:
    {p1|{l1|this is a first paragraph|l1} {l1|and a line|l1}|p1}
    lines ###-###:
{p1} this is a first paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
and a line
^^^^^^^^^^
BRACKETED EXPRESSION:
    and another line outside the first paragraph
    line ###:
and another line outside the first paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p2|{l2|this is a second paragraph|l2} {l2|and a line|l2}
        {l2|and another line outside the second paragraph|l2}|p2}
    lines ###-###:
{p2} this is a second paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
and a line
^^^^^^^^^^
<BLANK-LINE>
^
and another line outside the second paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p1|{l1|this is a third paragraph|l1} {l1|and a line|l1}|p1}
    lines ###-###:
{p1} this is a third paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
and a line
^^^^^^^^^^
BRACKETED EXPRESSION:
    and another line outside the third paragraph
    line ###:
and another line outside the third paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p3|{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|this
             is a fourth paragraph|}
        {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|and a
             line|}
        {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|and
             another line outside the fourth paragraph|}|p3}
    lines ###-###:
{p3} this is a fourth paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
and a line
^^^^^^^^^^
<BLANK-LINE>
^
and another line outside the fourth paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p1|{l1|this is a fifth paragraph|l1} {l1|and a line|l1}|p1}
    lines ###-###:
{p1} this is a fifth paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
and a line
^^^^^^^^^^
BRACKETED EXPRESSION:
    and another line outside the fifth paragraph
    line ###:
and another line outside the fifth paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
*PARSER*:
    trace [- parser output]
    end block BLOCK1
*PARSER*:
    begin block BLOCK1
    define typed bracket "{" ... "|" ... "|" ... "}"
        [code, text, math]
        // no element selectors
        with attribute selectors [data]
        with attributes ":" ... "=" ... ","
        with attribute negator "no"
        with attribute flags initiator "["
        with attribute multivalue initiator "{*"
        with prefix separators allowed
    define prefix "p1" [code]
        with group paragraph
        with implied subprefix {l1}
    define prefix "l1" [code]
        with group line
    define prefix "p2" [code]
        with group paragraph
        with implied subprefix {l2}
        with parsing options [+ sticky]
    define prefix "l2" [code]
        with group line
    define prefix "p3" [code]
        with group paragraph
        with parsing options [+ sticky]
    trace [+ parser output]
BRACKETED EXPRESSION:
    this is paragraph 1
    line ###:
this is paragraph 1
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    and another line
    line ###:
and another line
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p1|{l1|this is paragraph 2|l1} {l1|and another line|l1}|p1}
    lines ###-###:
{p1} this is paragraph 2
^^^^^^^^^^^^^^^^^^^^^^^^
and another line
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    this is paragraph 3
    line ###:
this is paragraph 3
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    and another line
    line ###:
and another line
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p2|{l2|this is paragraph 4|l2} {l2|and another line|l2}|p2}
    lines ###-###:
{p2} this is paragraph 4
^^^^^^^^^^^^^^^^^^^^^^^^
and another line
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p2|{l2|this is paragraph 5|l2} {l2|and another line|l2}|p2}
    lines ###-###:
this is paragraph 5
^^^^^^^^^^^^^^^^^^^
and another line
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p1|{l1|this is paragraph 6|l1} {l1|and another line|l1}|p1}
    lines ###-###:
{p1} this is paragraph 6
^^^^^^^^^^^^^^^^^^^^^^^^
and another line
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    this is paragraph 7
    line ###:
this is paragraph 7
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    and another line
    line ###:
and another line
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p3|{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|this
             is paragraph 8|}
        {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|and
             another line|}|p3}
    lines ###-###:
{p3} this is paragraph 8
^^^^^^^^^^^^^^^^^^^^^^^^
and another line
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p3|{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|this
             is paragraph 9|}
        {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|and
             another line|}|p3}
    lines ###-###:
this is paragraph 9
^^^^^^^^^^^^^^^^^^^
and another line
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p1|{l1|this is paragraph 10|l1} {l1|and another line|l1}|p1}
    lines ###-###:
{p1} this is paragraph 10
^^^^^^^^^^^^^^^^^^^^^^^^^
and another line
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    this is paragraph 11
    line ###:
this is paragraph 11
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    and another line
    line ###:
and another line
^^^^^^^^^^^^^^^^
*PARSER*:
    trace [- parser output]
    end block BLOCK1
*PARSER*:
    begin block BLOCK1
    define typed bracket "{" ... "|" ... "|" ... "}"
        [code, text, math]
        // no element selectors
        with attribute selectors [data]
        with attributes ":" ... "=" ... ","
        with attribute negator "no"
        with attribute flags initiator "["
        with attribute multivalue initiator "{*"
        with prefix separators allowed
    define prefix "p" [code]
        with group paragraph
        with implied subprefix {l1}
    define prefix "l1" [code]
        with group line
    define prefix "l2" [code]
        with group line
    define prefix "x" [code]
        with implied subprefix {l1}
    trace [+ parser output]
BRACKETED EXPRESSION:
    {l1|this is a line|l1}
    line ###:
{l1} this is a line
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p|{l1|this is a paragraph line|l1}
       {l1|and a second paragraph line|l1}
       {l2|and a third paragraph line|l2}
       {l1|and a fourth paragraph line|l1}|p}
    lines ###-###:
{p} this is a paragraph line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
and a second paragraph line
^^^^^^^^^^^^^^^^^^^^^^^^^^^
{l2}and a third paragraph line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
and a fourth paragraph line
^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    And another paragraph
    line ###:
And another paragraph
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    with one extra line "."
    line ###:
with one extra line.
^^^^^^^^^^^^^^^^^^^^
ERROR: in line ###: explicit prefix separator of type `l2' has `line'
       group but is not at beginning of logical line or immediately
       after a prefix separator of `paragraph' group; ignored:
{l1} This is a line {l2} and continuation.
                    ^^^^
BRACKETED EXPRESSION:
    {l1|This is a line and continuation "."|l1}
    line ###:
{l1} This is a line {l2} and continuation.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {l1|This is a line|l1}
    line ###:
{l1} This is a line
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {l2|and continuation "."|l2}
    line ###:
{l2} and continuation.
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {l1|And another line "."|l1}
    line ###:
{l1} And another line.
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    And a last line "."
    line ###:
And a last line.
^^^^^^^^^^^^^^^^
ERROR: in line ###: explicit prefix separator of type `p' has
       `paragraph' group but is not at beginning of a logical line that
       is in paragraph beginning position; ignored:
{p} This is a paragraph {p} and continuation.
                        ^^^
BRACKETED EXPRESSION:
    {p|{l1|This is a paragraph and continuation "."|l1}|p}
    line ###:
{p} This is a paragraph {p} and continuation.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR: in line ###: implied prefix separator of type `l1' has `line'
       group but is not at beginning of logical line or immediately
       after a prefix separator of `paragraph' group; ignored:
{x} implied `l1' prefix in error
    ^
BRACKETED EXPRESSION:
    {x|implied "`" l1 "'" prefix in error|x}
    line ###:
{x} implied `l1' prefix in error
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR: in line ###: explicit prefix separator of type `l2' has `line'
       group but is not at beginning of logical line or immediately
       after a prefix separator of `paragraph' group; ignored:
{l1}{l2} a stray line
    ^^^^
BRACKETED EXPRESSION:
    {l1|a stray line|l1}
    line ###:
{l1}{l2} a stray line
^^^^^^^^^^^^^^^^^^^^^
ERROR: in line ###: implied prefix separator of type `l1' has `line'
       group but is not at beginning of logical line or immediately
       after a prefix separator of `paragraph' group; ignored:
{x}{l2} another stray line
   ^
ERROR: in line ###: explicit prefix separator of type `l2' has `line'
       group but is not at beginning of logical line or immediately
       after a prefix separator of `paragraph' group; ignored:
{x}{l2} another stray line
   ^^^^
BRACKETED EXPRESSION:
    {x|another stray line|x}
    line ###:
{x}{l2} another stray line
^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR: in line ###: explicit prefix separator of type `l2' has `line'
       group but is not at beginning of logical line or immediately
       after a prefix separator of `paragraph' group; ignored:
({l2} a third stray)
 ^^^^
BRACKETED EXPRESSION:
    (a third stray)
    line ###:
({l2} a third stray)
^^^^^^^^^^^^^^^^^^^^
ERROR: in line ###: explicit prefix separator of type `p' has
       `paragraph' group but is not at beginning of a logical line that
       is in paragraph beginning position; ignored:
({p} a fourth stray)
 ^^^
BRACKETED EXPRESSION:
    (a fourth stray)
    line ###:
({p} a fourth stray)
^^^^^^^^^^^^^^^^^^^^
ERROR: in line ###: explicit prefix separator of type `p' has
       `paragraph' group but is not at beginning of a logical line that
       is in paragraph beginning position; ignored:
{p} and a fifth stray
^^^
BRACKETED EXPRESSION:
    and a fifth stray
    line ###:
{p} and a fifth stray
    ^^^^^^^^^^^^^^^^^
*PARSER*:
    trace [- parser output]
    end block BLOCK1
*PARSER*:
    begin block BLOCK1
    define top level
           with parsing options [end at indent]
    trace [+ parser output, + subexpression details]
BRACKETED EXPRESSION:
    This is a logical line "."
@@ = This is a logical line ".":
         .terminator = "<LF>"
         .position[H] = PACKED_VEC
         .initiator = [$ LOGICAL_LINE $]
    line ###:
This is a logical line.
^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    And a second logical line "."
@@ = And a second logical line ".":
         .terminator = "<LF>"
         .position[H] = PACKED_VEC
         .initiator = [$ LOGICAL_LINE $]
    line ###:
    And a second logical line.
    ^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    And a third logical line "."
@@ = And a third logical line ".":
         .terminator = "<LF>"
         .position[H] = PACKED_VEC
         .initiator = [$ LOGICAL_LINE $]
    line ###:
   And a third logical line.
   ^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    And a fourth logical line "."
@@ = And a fourth logical line ".":
         .terminator = "<LF>"
         .position[H] = PACKED_VEC
         .initiator = [$ LOGICAL_LINE $]
    line ###:
And a fourth logical line.
^^^^^^^^^^^^^^^^^^^^^^^^^^
*PARSER*:
    trace [- parser output, - subexpression details]
    end block BLOCK1
