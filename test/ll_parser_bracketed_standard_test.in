// Layered Languages Bracketed Standard Parser Test Data
//
// File:	ll_parser_bracketed_standard_test.in
// Author:	Bob Walton (walton@acm.org)
// Date:	Thu Feb  9 19:40:06 EST 2023
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

This is a line;
This is a line containing a "quoted string".
This is a line containing a large number
     12345678901234567890.
This is a line containing a parenthesized subexpression
     ( hi there ).
This line contains subsubexpressions (x 5 "foo")
This line contains more subsubexpressions
     (x + y z {{p q}} + `{p}' - [ g h ]).
This line contains a missing closing bracket
     (x + {{ y z )
This line contains an incorrect closing bracket
     (x + y }}
This line includes
 a token with insufficient indent
This line starts an indented paragraph:
   First line.
   Second line.
Ditto with split =:
   Third line.
   Fourth line.
Ditto with separator:
   Fifth line.
   Sixth line A; Sixth line B
   Seventh line.
This line contains two indented subparagraphs:
	First line of first subparagraph.
	Second line of first subparagraph.
    and now the second subparagraph:
	First line of second subparagraph.
	Second line of second subparagraph.

// This is a legal comment line.
// These are illegal comments at the beginning of
    // a logical line
   the logical line
Ditto:
   // Illegal comment in paragraph
       the line
   // Legal comment
   another line // Another legal comment
       with some extra stuff  // Another legal comment
       // Another legal comment
   the first line of a pair;  // A legal comment
       and the second line of // that begins logical
       the pair               // line after a ';'

// The following are encoded in
//     ll_parser_bracketed_standard_test.cc
// define bracket "<+" .. "+>" [math]
// define bracket "<-" .. "->" [text]
This tests selector changes --- <+ x +> <- y ->
     {{ <+ x +> <- y ->}} ``<+ x +> <- y ->''

This is a label [< x y "hello" 5.6 z >]
This is another label [< x ( y ) z >]
And these are nested labels
    [< x [< 1 2 >] y [< a b >] >]

This is a sentence.
and ``This is a sentence.''
lastly ``{s}This is a sentence.''
and another ``{s: i}This is a sentence.''
and one more ``{s}First sentence. {s: i}Second sentence.''
and a last one ``{s}First sentence. {s: i}Second sentence.
                                          Third sentence.''

*PARSER*:
    define top level parsing options [ + enable prefix ]
    print indentation mark "*TOP* *LEVEL*"

This line contains a typed subexpression {x|1 2 3|}
Another typed subexpression
    {x: w, y = 6, z = b c 5 d|1 2 3|}
Yet another typed subexpression
    {x: w, z = b c 5 d|1 2 3|y = 6 : x}
And another- {t| x y z |b[ABC_,200] = (1 2 3),
                       c[+] = FALSE, d[-] = TRUE,
		       no f, g : t}
And one more {t| |b["A", 201,202, [5]]: t}
{}
({)
{W|1 2 3}
{W|1 2|p = q|3}
{P:}
({P2:)
({:)
{P: f = F|1 2 3|g = G:}
({M: f = F|1 2 3)
({N: f = F|1 2 3|g = G)
({K: f = F|1 2 3|g =)
{S: x = A|1 2|y = B|3 4|z = C}
{T: x = A|1 2|y = B|3 4|z = C: T}
{T: x = A|1 2|y = B|3 4|z = C: S}
{|1 2|y = B|3 4|z = C: S}
{|1 2|y = B|3 4|z = C}
{|1 2|y = B|3 4|}
{S|1 2|y = B|3 4|S}
{|1 2|y = B|3 4|""}
{X|1 2 3|Y}
{|1 2 3|Y}
{""|1 2 3|""}
{|1 2 3|""}
{""|1 2|y = B|3 4|""}
{"": y = B|1 2 3 4|}
{"": y = B|1 2 3 4|z = C: ""}
{T: y = B|1 2 3 4|z = C}
{T: y, no p|1 2 3 4|no q, z}
{T: no p|1 2 3 4|no q}
{T: no p|1 2 3 4|no q = 5}
{|1 2 3 4|}
{T: x = {* "hi" *}|1 2 3|}
{T: x = {* "hi",, there *}|1 2 3|}
{T: x = {* (A B), foo bar,,, [C D] *}|1 2 3|}
{T: x = {* ,,, *}|1 2 3|}
{T: m = 1| |n = 2}
{T: m = 1||n = 2}
{T: m = 1||n = 2||}
{| |}
{||}
{T: m = 1 || n = 2: T }
{m = 1}
{: m = 1, n = 2}
{m, n = 2}
{- a b c -}
{< a b c >}
{- a b c}
{-}
[$ MISSING $]
[$ INDENTED_PARAGRAPH $]
[$ FOOBAR $]
[< hi there >]
[< hi >]
[< >]
[< [$ MISSING $] >]
{ x = 1, y = [$ NONE $], z = [$ MISSING $] }
{ x = 1, y = {* 1, [$ NONE $], 2 *}, z = [$ MISSING $] }
{ x = 1, y [$ NONE $] 55 = 77, [$ MISSING $] = 11,
         z 22 = 33 }
{ x = 1, y 55 = 77, = 11, z 22 = 33 }
{ x = 55, y[abc] = [$ NONE $], z[def] = 88 }
{[$ NONE $]: x = 1}
({W} 2 3 {X} 4 5 ({Y} 6 7) {Z})
{X} a b c {X}{Y} d e {Y} f g {X} h k
{X} a b c
{X}{Y} f g
{X} h k
{X} a b c
{X}{Y} f [$ NONE $] g
{X} h k
{{X} hi|ho|}
{T|(X) ho|}
{T: A = {Y|hi|}|{X} ho|B = {Z}}
*PARSER*:
    print bracket ""
    print indentation mark ""
    print typed bracket ""

// Documentation checks

"This is a longer sentence"#
    #" than we would like."
"And this is a second sentence."

This is a continued-middle-#
    #lexeme.

{my type|a b c|}
{|a b c|my type}
{my type|a b c|my type}
{my type||}
{||my type}
{my type: my attribute = 5, my option = TRUE| a b c |}
{my type: my attribute = 5, your option = FALSE|
    a b c |my type}
{my type: my attribute = 5|
    a b c |your option = FALSE: my type}
{my attribute = 5| a b c |my option = TRUE: my type}
{my type| a b c |attribute = 5, my option}
{my type| a b c |attribute = 5, my option: my type}
{| a b c |attribute = 5, my option: my type}
{|a b c|}
{||}
{}
{my attribute = 5, no your option|a b c|}
{"": my attribute = 5, no your option|a b c|""}
{+ a b c +}
{my option| a b c |no your option}
{my option: no your option| a b c |}
{my option: your option = FALSE| a b c |}
{no your option| a b c |my option}
{my option| a b c |your option}
{+ +}
{+}

{my attribute = {* a b c, d e, f *} ||}
{my attribute = {* *} ||}
{my attribute = {* , *} ||}

{my type: x = 5, y = "5" | a b c |}
{my type: x = 5 tomatoes, y = [< 5 tomatoes >]
          | a b c |}
{my type: x = {* A, B *}, y = {* , "A",, B, *}
          | a b c |}
{my type: y = {* ,, *} | a b c |}

{+ 1 2 3 +}
{"+"| 1 2 3 |"+"}
{< 1 2 3 >}
{"<" ">"| 1 2 3 |"<" ">"}

{x: y[+Y] = 44}
{x: y[1,Y]}
{x: y[+,62], no y}
{x: y[62,1], y}

{x: y = (z + w, v| m n |}

the line before the outer paragraph
this is the outer paragraph:
    the first line of the outer paragraph
    the second line of the outer paragraph which
        is continued on this indented line
    an inner paragraph:
       the first line of the inner paragraph
       the second line of the inner paragraph which
	   is continued on this indented line
	   (that begins with a horizontal tab)
    the first line of the outer paragraph after the
        inner paragraph
    another inner paragraph, but one with zero lines:
    the last line of the outer paragraph
    this logical line is followed by an empty logical
         line;
the line after the outer paragraph


{T: a = 1, b = 2, c = 3, d = 4 | X Y Z |}
{T: a = 1, b = 2, c = 3 | X Y Z | d = 4 }
{T: a = 1, b = 2 | X Y | c = 3 | Z | d = 4 }
{T: a = 1, b = 2 | X Y | c = 3, d = 4 | Z | }
{T: a = 1 | X | b = 2 | Y | c = 3, d = 4 | Z | }

{x} this is a line:
    with an indented paragraph that
         has an {x} unrecognized because it
	 is not in the same logical line as
	 the outer `{x}'
  but this {x} is	 

@<> this is some data
!@<> this is some raw data

!!@<> this is something else

======================
| this is a row |
======================

This is a paragraph:

    Containing a table.

    =======================
    | this is another row |
    =======================

This is a bracketed expression (
    ==============================
    | containing yet another row |
    ==============================
    )

@5 := A B C
@6 := 1 2 3 :
	foo = P
	fum = Q R T
	fee = @5
	foe = @7
	fie = @8
	mie = {* X, Y, Z *}
	moe = {* @5, @7, @8 *}
@7 := (Z)
@8 := XYZ
ID 6 is @6
ID 8 is @8

// Prefix reformatters are not applied to typed
// bracketed subexpressions.
//
{*DATA*} @9 := M N P
{*DATA*| @10 := A B C|}
ID 9 is @9
ID 10 is @10

*PARSER*:
    trace [- bracketed subexpressions, - keys]

{p} {s} This is a sentence. {s}
And another.  {s} And yet another
{foo} sentence.

{***}

{P} {S} This is a sentence. {S}
    And another.  {S} And yet another
    {foo} sentence.


*PARSER*:
    begin block BLOCK1
    define bracket type "itemize" [code, text]
    	with group paragraph
    define bracket type "item" [code, text]
    	with group line

{itemize: indent = 5em, mark = "*"}
{item} 1 chicken
{item} 1 tablespoon olive oil
{item} 1 tablespoon paprika

{itemize: indent = 5em, mark = "*"|
    {item | 1 chicken |}
    {item | 1 tablespoon olive oil |}
    {item | 1 tablespoon paprika |} |}

*PARSER*:
    end block BLOCK1
    begin block BLOCK1
    define bracket type "itemize" [code, text]
    	with group paragraph
	with implied subprefix {item}
    define bracket type "item" [code, text]
    	with group line

{itemize: indent = 5em, mark = "*"}
1 chicken
1 tablespoon olive oil
1 tablespoon paprika

a potato
1 tablespoon butter

*PARSER*:
    end block BLOCK1
    begin block BLOCK1
    define bracket type "itemize" [code, text]
    	with group paragraph
	with implied subprefix {item}
	with parsing options [+ sticky]
    define bracket type "item" [code, text]
    	with group line

{itemize: indent = 5em, mark = "*", label = "STICKY"}
1 chicken
1 tablespoon olive oil
1 tablespoon paprika

a potato
1 tablespoon butter

{***}
line 1

line 2

*PARSER*:
    end block BLOCK1
    begin block BLOCK1
    define bracket type "itemize" [code, text]
    	with group paragraph
	with implied subprefix {item}
	with parsing options [+ continuing]
    define bracket type "item" [code, text]
    	with group line

{itemize: indent = 5em, mark = "*",
          label = "CONTINUING"}
1 chicken
1 tablespoon olive oil
1 tablespoon paprika

a potato
1 tablespoon butter

{***}line 3

line 4

*PARSER*:
    end block BLOCK1
    begin block BLOCK1
    define bracket type "itemize" [code, text]
    	with group paragraph
	with implied subprefix {item}
	with parsing options [+ sticky]
    define bracket type "item" [code, text]
    	with group line

{itemize: indent = 5em, mark = "*"}
{item} 1 chicken
{item} 1 tablespoon olive oil
{item} 1 tablespoon paprika

a potato
1 tablespoon butter

=============
| 1 chicken |
=============
| 1 tablespoon olive oil |
-
| 1 tablespoon paprika
=

-5 is a negative number

{section} This is a section.

{p}
This is the first paragraph.

This is the second
paragraph.  Which has several
sentences.

{***}
This is a code line.

{p}This is the
third paragraph.

    {quote}
    This is a fouth
    paragraph.

{***} // A comment with no warning.
       And another code line.

{p}This is a paragraph with a subparagraph:

	This is 
	subparagraph 1.

	This is subparagraph
		2.
and a continuation of the outer paragraph.

{p}A paragraph with an embedded table:
    =============
    | 1 chicken |
    =============
    | 1 tablespoon olive oil |
    -
    | 1 tablespoon paprika
    =

{***}

*PARSER*:
    end block BLOCK1
    begin block BLOCK1
    define bracket type "@" [code]
    	with parsing selectors [data]
    define bracket "<" ... ">" [code]
    trace [+ bracketed subexpressions]

< 99 >
{@ < 99 > @}

*PARSER*:
    end block BLOCK1
    begin block BLOCK1
    trace [+ bracketed subexpressions]

@21 := A:
    ROOT = @20 = LEAVES
    RIGHT = @22 = LEFT
    LEFT = @23 = RIGHT
@22 := B:
    ROOT = @20 = LEAVES
    RIGHT = @23 = LEFT
    LEFT = @21 = RIGHT
@23 := C:
    ROOT = @20 = LEAVES
    RIGHT = @21 = LEFT
    LEFT = @22 = RIGHT
ID 20 IS @20
ID 21 IS @21
ID 22 IS @22
ID 23 IS @23

@30 := ABC:
    LEAVES[*,@]
    OTHER = {* 5, 6, 7 *}
ID 30 IS NOW @30

@31 := D:
    X[aZ*+,/]
    Y[@] = 5

ID 31 IS @31

!@40 := {X: hi = @5, to = @41 = from, hi = 77,
            hi[*], hi[@]}
ID 40 IS [@40]
ID 41 IS [@41]

*PARSER*:
    end block BLOCK1
    trace [+ parser commands]

*PARSER*:
    begin block BLOCK1
    define bracket "<" ... ">" [code]
    define bracket "<<" ... ">>" [data]
    define bracket type "D" [code]
           with parsing selectors [data]
	   with group line
    define indentation mark "::" [code]
           with parsing selectors [code]
	   with implied header {D}
    trace [+ bracketed subexpressions]

< 99 > << 88 >>

test paragraph::
    < 99 > << 88 >>

*PARSER*:
    end block BLOCK1

{|+ x|}
{+ x +}

@50 := A "B" C:
     x = Z
     y = "Z"
     z = X Y "Z"
ID 50 IS [@50]

{my type: x = X, y = "Y"|A "B" C|}

{my type: x = @50 = y, b = @50 = 5 c}

{my type: x = {* a b, c d e, f, 1 g, h + *}}

@60 :=:
    x = A
    x = A
    x = B
    y[S] = N
    y = O
    y = P
    y = N
ID 60 IS [@60]

{my type: x = A, x = A, x = B,
          y[S] = N, y = O, y = P, y = N }

@70 :=:
    x[M]
    x = A
    x = A
    x = A
    x = B
    x = B
    x = C
ID 70 IS [@70]

{my type: x[M], x = A, x = A, x = A,
                x = B, x = B,
		x = C }

@80 :=:
    x[S]
    x = A
    x = A
    x = A
    x = B
    x = B
    x[S] = C
    z[M]
    z[S]
ID 80 IS [@80]

{my type: x[S], x = A, x = A, x = A,
                x = B, x = B,
		x[S] = C, z[M], z[S] }

!@90 := A "B" C:
    x = A "B" C
    y = [< A "B" C >]
    z = X [< A "B" C >]
    w = [< X [< A "B" C >]>]
    u = X [$ MISSING $]
    v = [< X [$ MISSING $]>]
    s = [$ MISSING $]
ID 90 IS [@90]
