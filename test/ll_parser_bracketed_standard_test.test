BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY ";"
     OF SUBTYPE ll::parser::table::line_sep_type
=== BRACKETED EXPRESSION: line ##:
This is a line;
^^^^^^^^^^^^^^^
    This is a line;
!@@ := This is a line:
           .terminator = ";"
           .position[H] = PACKED_VEC
           .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ##:
This is a line containing a "quoted string".
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    This is a line containing a "quoted string" "."
!@@ := This is a line containing a @@ ".":
           .terminator = "<LF>"
           .position[H] = PACKED_VEC
           .initiator = [$ LOGICAL_LINE $]
!@@ := "quoted string":
           .type = "<Q>"
=== BRACKETED EXPRESSION: lines ##-##:
This is a line containing a large number
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     12345678901234567890.
^^^^^^^^^^^^^^^^^^^^^^^^^^
    This is a line containing a large number 1.23456789012346e+19 "."
!@@ := This is a line containing a large number 1.23456789012346e+19 ".":
           .terminator = "<LF>"
           .position[H] = PACKED_VEC
           .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "("
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [code] SELECTED KEY ")"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
     ( hi there ).
     ^^^^^^^^^^^^
    (hi there)
!@@ := hi there:
           .terminator = ")"
           .initiator = "("
           .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ##-##:
This is a line containing a parenthesized subexpression
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     ( hi there ).
^^^^^^^^^^^^^^^^^^
    This is a line containing a parenthesized subexpression (hi there)
        "."
!@@ := This is a line containing a parenthesized subexpression @@ ".":
           .terminator = "<LF>"
           .position[H] = PACKED_VEC
           .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "("
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [code] SELECTED KEY ")"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
This line contains subsubexpressions (x 5 "foo")
                                     ^^^^^^^^^^^
    (x 5 "foo")
!@@ := x 5 @@:
           .terminator = ")"
           .initiator = "("
           .position[H] = PACKED_VEC
!@@ := foo:
           .type = "<Q>"
=== BRACKETED EXPRESSION: line ##:
This line contains subsubexpressions (x 5 "foo")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    This line contains subsubexpressions (x 5 "foo")
!@@ := This line contains subsubexpressions @@:
           .terminator = "<LF>"
           .position[H] = PACKED_VEC
           .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "("
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [code] SELECTED KEY [< "{" "{" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [math] SELECTED KEY [< "}" "}" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
     (x + y z {{p q}} + `{p}' - [ g h ]).
              ^^^^^^^
    {{p q}}
!@@@ := p q:
            .terminator = [< "}" "}" >]
            .initiator = [< "{" "{" >]
            .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [code] SELECTED KEY "`"
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [text] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ##:
     (x + y z {{p q}} + `{p}' - [ g h ]).
                         ^^^
    {p}
!@@@ :=:
            .type = p
            .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [text] SELECTED KEY "'"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
     (x + y z {{p q}} + `{p}' - [ g h ]).
                        ^^^^^
    `{p}'
!@@@ := @@@:
            .terminator = "'"
            .initiator = "`"
            .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [code] SELECTED KEY "["
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [code] SELECTED KEY "]"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
     (x + y z {{p q}} + `{p}' - [ g h ]).
                                ^^^^^^^
    [g h]
!@@@ := g h:
            .terminator = "]"
            .initiator = "["
            .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [code] SELECTED KEY ")"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
     (x + y z {{p q}} + `{p}' - [ g h ]).
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    (x + y z {{p q}} + `{p}' - [g h])
!@@@ := x "+" y z @@@ "+" @@@ "-" @@@:
            .terminator = ")"
            .initiator = "("
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ##-##:
This line contains more subsubexpressions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     (x + y z {{p q}} + `{p}' - [ g h ]).
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    This line contains more subsubexpressions
        (x + y z {{p q}} + `{p}' - [g h]) "."
!@@@ := This line contains more subsubexpressions @@@ ".":
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "("
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [code] SELECTED KEY [< "{" "{" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [math] SELECTED KEY ")"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ##: missing closing bracket `} }' inserted before `)':
     (x + {{ y z )
                 ^
=== BRACKETED EXPRESSION: line ##:
     (x + {{ y z )
          ^^^^^^
    {{y z}}
!@@@ := y z:
            .terminator = [< "}" "}" >]
            .initiator = [< "{" "{" >]
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
     (x + {{ y z )
     ^^^^^^^^^^^^^
    (x + {{y z}})
!@@@ := x "+" @@@:
            .terminator = ")"
            .initiator = "("
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ##-##:
This line contains a missing closing bracket
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     (x + {{ y z )
^^^^^^^^^^^^^^^^^^
    This line contains a missing closing bracket (x + {{y z}})
!@@@ := This line contains a missing closing bracket @@@:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "("
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [code] SELECTED KEY [< "}" "}" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY [< "}" "}" >]
BRACKETED PARSER FOUND [code] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "}"
BRACKETED PARSER FOUND [code] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "}"
ERROR: in line ##: missing closing bracket `)' inserted at end of
       logical line that ends here:
     (x + y }}
              ^
=== BRACKETED EXPRESSION: line ##:
     (x + y }}
     ^^^^^^^^^
    (x + y "}" "}")
!@@@ := x "+" y "}" "}":
            .terminator = ")"
            .initiator = "("
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ##-##:
This line contains an incorrect closing bracket
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     (x + y }}
^^^^^^^^^^^^^^
    This line contains an incorrect closing bracket (x + y "}" "}")
!@@@ := This line contains an incorrect closing bracket @@@:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
WARNING: in line ##: lexeme indent 1 too near paragraph indent 0:
 a token with insufficient indent
 ^
=== BRACKETED EXPRESSION: lines ##-##:
This line includes
^^^^^^^^^^^^^^^^^^
 a token with insufficient indent
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    This line includes a token with insufficient indent
!@@@ := This line includes a token with insufficient indent:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::indentation_mark_type
=== BRACKETED EXPRESSION: line ##:
   First line.
   ^^^^^^^^^^^
    First line "."
!@@@ := First line ".":
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ##:
   Second line.
   ^^^^^^^^^^^^
    Second line "."
!@@@ := Second line ".":
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ##-##:
This line starts an indented paragraph:
                                      ^
   First line.
^^^^^^^^^^^^^^
   Second line.
^^^^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              First line "."|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              Second line "."|}|}
!@@@ := @@@ @@@:
            .terminator = [$ INDENTED_PARAGRAPH $]
            .position[H] = PACKED_VEC
            .initiator = ":"
=== BRACKETED EXPRESSION: lines ##-##:
This line starts an indented paragraph:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   First line.
^^^^^^^^^^^^^^
   Second line.
^^^^^^^^^^^^^^^
    This line starts an indented paragraph:
        First line "."
        Second line "."
!@@@ := This line starts an indented paragraph @@@:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "="
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::indentation_mark_type
=== BRACKETED EXPRESSION: line ##:
   Third line.
   ^^^^^^^^^^^
    Third line "."
!@@@ := Third line ".":
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ##:
   Fourth line.
   ^^^^^^^^^^^^
    Fourth line "."
!@@@ := Fourth line ".":
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ##-##:
Ditto with split =:
                  ^
   Third line.
^^^^^^^^^^^^^^
   Fourth line.
^^^^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              Third line "."|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              Fourth line "."|}|}
!@@@ := @@@ @@@:
            .terminator = [$ INDENTED_PARAGRAPH $]
            .position[H] = PACKED_VEC
            .initiator = ":"
=== BRACKETED EXPRESSION: lines ##-##:
Ditto with split =:
^^^^^^^^^^^^^^^^^^^
   Third line.
^^^^^^^^^^^^^^
   Fourth line.
^^^^^^^^^^^^^^^
    Ditto with split =:
        Third line "."
        Fourth line "."
!@@@ := Ditto with split "=" @@@:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::indentation_mark_type
=== BRACKETED EXPRESSION: line ##:
   Fifth line.
   ^^^^^^^^^^^
    Fifth line "."
!@@@ := Fifth line ".":
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [LINE LEVEL, code] SELECTED KEY ";"
     OF SUBTYPE ll::parser::table::line_sep_type
=== BRACKETED EXPRESSION: line ##:
   Sixth line A; Sixth line B
   ^^^^^^^^^^^^^
    Sixth line A;
!@@@ := Sixth line A:
            .terminator = ";"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ##:
   Sixth line A; Sixth line B
                 ^^^^^^^^^^^^
    Sixth line B
!@@@ := Sixth line B:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ##:
   Seventh line.
   ^^^^^^^^^^^^^
    Seventh line "."
!@@@ := Seventh line ".":
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ##-##:
Ditto with separator:
                    ^
   Fifth line.
^^^^^^^^^^^^^^
   Sixth line A; Sixth line B
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   Seventh line.
^^^^^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              Fifth line "."|}
         {"": .terminator = ";", .initiator = [$ LOGICAL_LINE $]|Sixth
              line A|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              Sixth line B|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              Seventh line "."|}|}
!@@@ := @@@ @@@ @@@ @@@:
            .terminator = [$ INDENTED_PARAGRAPH $]
            .position[H] = PACKED_VEC
            .initiator = ":"
=== BRACKETED EXPRESSION: lines ##-##:
Ditto with separator:
^^^^^^^^^^^^^^^^^^^^^
   Fifth line.
^^^^^^^^^^^^^^
   Sixth line A; Sixth line B
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   Seventh line.
^^^^^^^^^^^^^^^^
    Ditto with separator:
        Fifth line "."
        Sixth line A; Sixth line B
        Seventh line "."
!@@@ := Ditto with separator @@@:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::indentation_mark_type
=== BRACKETED EXPRESSION: line ##:
        First line of first subparagraph.
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    First line of first subparagraph "."
!@@@ := First line of first subparagraph ".":
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ##:
        Second line of first subparagraph.
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    Second line of first subparagraph "."
!@@@ := Second line of first subparagraph ".":
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ##-##:
This line contains two indented subparagraphs:
                                             ^
        First line of first subparagraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        Second line of first subparagraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              First line of first subparagraph "."|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              Second line of first subparagraph "."|}|}
!@@@ := @@@ @@@:
            .terminator = [$ INDENTED_PARAGRAPH $]
            .position[H] = PACKED_VEC
            .initiator = ":"
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::indentation_mark_type
=== BRACKETED EXPRESSION: line ##:
        First line of second subparagraph.
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    First line of second subparagraph "."
!@@@ := First line of second subparagraph ".":
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ##:
        Second line of second subparagraph.
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    Second line of second subparagraph "."
!@@@ := Second line of second subparagraph ".":
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ##-##:
    and now the second subparagraph:
                                   ^
        First line of second subparagraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        Second line of second subparagraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              First line of second subparagraph "."|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              Second line of second subparagraph "."|}|}
!@@@ := @@@ @@@:
            .terminator = [$ INDENTED_PARAGRAPH $]
            .position[H] = PACKED_VEC
            .initiator = ":"
=== BRACKETED EXPRESSION: lines ##-##:
This line contains two indented subparagraphs:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        First line of first subparagraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        Second line of first subparagraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    and now the second subparagraph:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        First line of second subparagraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        Second line of second subparagraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    This line contains two indented subparagraphs:
            First line of first subparagraph "."
            Second line of first subparagraph "."
        and now the second subparagraph:
            First line of second subparagraph "."
            Second line of second subparagraph "."
!@@@
    := This line contains two indented subparagraphs @@@ and now the
               second subparagraph @@@:
           .terminator = "<LF>"
           .position[H] = PACKED_VEC
           .initiator = [$ LOGICAL_LINE $]
WARNING: in lines ##-##: comment after indent that begins non-comment
         logical line:
// These are illegal comments at the beginning of
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // a logical line
^^^^^^^^^^^^^^^^^^^^^
=== BRACKETED EXPRESSION: line ##:
   the logical line
   ^^^^^^^^^^^^^^^^
    the logical line
!@@@ := the logical line:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::indentation_mark_type
WARNING: in line ##: comment after indent that begins non-comment
         logical line:
   // Illegal comment in paragraph
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
=== BRACKETED EXPRESSION: line ##:
       the line
       ^^^^^^^^
    the line
!@@@ := the line:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ##-##:
   another line // Another legal comment
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       with some extra stuff  // Another legal comment
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    another line with some extra stuff
!@@@ := another line with some extra stuff:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [LINE LEVEL, code] SELECTED KEY ";"
     OF SUBTYPE ll::parser::table::line_sep_type
=== BRACKETED EXPRESSION: line ##:
   the first line of a pair;  // A legal comment
   ^^^^^^^^^^^^^^^^^^^^^^^^^
    the first line of a pair;
!@@@ := the first line of a pair:
            .terminator = ";"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ##-##:
       and the second line of // that begins logical
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       the pair               // line after a ';'
^^^^^^^^^^^^^^^
    and the second line of the pair
!@@@ := and the second line of the pair:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ##-##:
Ditto:
     ^
   // Illegal comment in paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       the line
^^^^^^^^^^^^^^^
   // Legal comment
^^^^^^^^^^^^^^^^^^^
   another line // Another legal comment
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       with some extra stuff  // Another legal comment
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       // Another legal comment
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   the first line of a pair;  // A legal comment
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       and the second line of // that begins logical
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       the pair               // line after a ';'
^^^^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|the
              line|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              another line with some extra stuff|}
         {"": .terminator = ";", .initiator = [$ LOGICAL_LINE $]|the
              first line of a pair|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|and
              the second line of the pair|}|}
!@@@ := @@@ @@@ @@@ @@@:
            .terminator = [$ INDENTED_PARAGRAPH $]
            .position[H] = PACKED_VEC
            .initiator = ":"
=== BRACKETED EXPRESSION: lines ##-##:
Ditto:
^^^^^^
   // Illegal comment in paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       the line
^^^^^^^^^^^^^^^
   // Legal comment
^^^^^^^^^^^^^^^^^^^
   another line // Another legal comment
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       with some extra stuff  // Another legal comment
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       // Another legal comment
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   the first line of a pair;  // A legal comment
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       and the second line of // that begins logical
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       the pair               // line after a ';'
^^^^^^^^^^^^^^^
    Ditto:
        the line
        another line with some extra stuff
        the first line of a pair; and the second line of the pair
!@@@ := Ditto @@@:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "+>"
     OF SUBTYPE ll::parser::table::closing_bracket_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "+>"
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "->"
     OF SUBTYPE ll::parser::table::closing_bracket_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "->"
BRACKETED PARSER FOUND
    [TOP LEVEL, LINE LEVEL, code] SELECTED KEY [< "{" "{" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [math] SELECTED KEY "<+"
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [math] SELECTED KEY "+>"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
     {{ <+ x +> <- y ->}} ``<+ x +> <- y ->''
        ^^^^^^^
    <+ x +>
!@@@ := x:
            .terminator = "+>"
            .initiator = "<+"
            .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [math] SELECTED KEY "->"
     OF SUBTYPE ll::parser::table::closing_bracket_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "->"
BRACKETED PARSER FOUND [math] SELECTED KEY [< "}" "}" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
     {{ <+ x +> <- y ->}} ``<+ x +> <- y ->''
     ^^^^^^^^^^^^^^^^^^^^
    {{<+ x +> <- y ->}}
!@@@ := @@@ "<-" y "->":
            .terminator = [< "}" "}" >]
            .initiator = [< "{" "{" >]
            .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "``"
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [text] SELECTED KEY "+>"
     OF SUBTYPE ll::parser::table::closing_bracket_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "+>"
BRACKETED PARSER FOUND [text] SELECTED KEY "<-"
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [text] SELECTED KEY "->"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
     {{ <+ x +> <- y ->}} ``<+ x +> <- y ->''
                                    ^^^^^^^
    <- y ->
!@@@ := y:
            .terminator = "->"
            .initiator = "<-"
            .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [text] SELECTED KEY "''"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
     {{ <+ x +> <- y ->}} ``<+ x +> <- y ->''
                          ^^^^^^^^^^^^^^^^^^^
    ``<+ x +> <- y ->''
!@@@ := "<+" x "+>" @@@:
            .terminator = "''"
            .initiator = "``"
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ##-##:
This tests selector changes --- <+ x +> <- y ->
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     {{ <+ x +> <- y ->}} ``<+ x +> <- y ->''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    This tests selector changes --- <+ x +> <- y -> {{<+ x +> <- y ->}}
        ``<+ x +> <- y ->''
!@@@
    := This tests selector changes "---" "<+" x "+>" "<-" y "->" @@@ @@@:
           .terminator = "<LF>"
           .position[H] = PACKED_VEC
           .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND
    [TOP LEVEL, LINE LEVEL, code] SELECTED KEY [< "[" "<" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [label] SELECTED KEY [< ">" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== DERIVED EXPRESSION: line ##:
This is a label [< x y "hello" 5.6 z >]
                ^^^^^^^^^^^^^^^^^^^^^^^
    [< x y hello 5.6 z >]
!@@@ := [< x y hello 5.6 z >]
=== BRACKETED EXPRESSION: line ##:
This is a label [< x y "hello" 5.6 z >]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    This is a label [< x y hello 5.6 z >]
!@@@ := This is a label [< x y hello 5.6 z >]:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND
    [TOP LEVEL, LINE LEVEL, code] SELECTED KEY [< "[" "<" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [label] SELECTED KEY ")"
     OF SUBTYPE ll::parser::table::closing_bracket_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ")"
BRACKETED PARSER FOUND [label] SELECTED KEY [< ">" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
WARNING: in line ##: separator should be quoted:
This is another label [< x ( y ) z >]
                           ^
WARNING: in line ##: separator should be quoted:
This is another label [< x ( y ) z >]
                               ^
=== DERIVED EXPRESSION: line ##:
This is another label [< x ( y ) z >]
                      ^^^^^^^^^^^^^^^
    [< x "(" y ")" z >]
!@@@ := [< x "(" y ")" z >]
=== BRACKETED EXPRESSION: line ##:
This is another label [< x ( y ) z >]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    This is another label [< x "(" y ")" z >]
!@@@ := This is another label [< x "(" y ")" z >]:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND
    [TOP LEVEL, LINE LEVEL, code] SELECTED KEY [< "[" "<" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [label] SELECTED KEY [< "[" "<" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [label] SELECTED KEY [< ">" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== DERIVED EXPRESSION: line ##:
    [< x [< 1 2 >] y [< a b >] >]
         ^^^^^^^^^
    [< 1 2 >]
!@@@ := [< 1 2 >]
BRACKETED PARSER FOUND [label] SELECTED KEY [< "[" "<" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [label] SELECTED KEY [< ">" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== DERIVED EXPRESSION: line ##:
    [< x [< 1 2 >] y [< a b >] >]
                     ^^^^^^^^^
    [< a b >]
!@@@ := [< a b >]
BRACKETED PARSER FOUND [label] SELECTED KEY [< ">" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== DERIVED EXPRESSION: line ##:
    [< x [< 1 2 >] y [< a b >] >]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    [< x [< 1 2 >] y [< a b >] >]
!@@@ := [< x [< 1 2 >] y [< a b >] >]
=== BRACKETED EXPRESSION: lines ##-##:
And these are nested labels
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    [< x [< 1 2 >] y [< a b >] >]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    And these are nested labels [< x [< 1 2 >] y [< a b >] >]
!@@@ := And these are nested labels [< x [< 1 2 >] y [< a b >] >]:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ##:
This is a sentence.
^^^^^^^^^^^^^^^^^^^
    This is a sentence "."
!@@@ := This is a sentence ".":
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "``"
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [text] SELECTED KEY "''"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
and ``This is a sentence.''
      ^^^^^^^^^^^^^^^^^^^
    {s: .terminator = "."|This is a sentence|s}
!@@@ := This is a sentence:
            .terminator = "."
            .position[H] = PACKED_VEC
            .type = s
=== BRACKETED EXPRESSION: line ##:
and ``This is a sentence.''
    ^^^^^^^^^^^^^^^^^^^^^^^
    ``{s: .terminator = "."|This is a sentence|s}''
!@@@ := @@@:
            .terminator = "''"
            .initiator = "``"
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
and ``This is a sentence.''
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    and ``{s: .terminator = "."|This is a sentence|s}''
!@@@ := and @@@:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "``"
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [text] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ##:
lastly ``{s}This is a sentence.''
         ^^^
    {s}
!@@@ :=:
            .type = s
            .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [text] SELECTED KEY "''"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
lastly ``{s}This is a sentence.''
         ^^^^^^^^^^^^^^^^^^^^^^
    {s: .terminator = "."|This is a sentence|s}
!@@@ := This is a sentence:
            .terminator = "."
            .type = s
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
lastly ``{s}This is a sentence.''
       ^^^^^^^^^^^^^^^^^^^^^^^^^^
    ``{s: .terminator = "."|This is a sentence|s}''
!@@@ := @@@:
            .terminator = "''"
            .initiator = "``"
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
lastly ``{s}This is a sentence.''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    lastly ``{s: .terminator = "."|This is a sentence|s}''
!@@@ := lastly @@@:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "``"
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [text] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ##:
and another ``{s: i}This is a sentence.''
              ^^^^^^
    {s: i}
!@@@ :=:
            .type = s
            i
            .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [text] SELECTED KEY "''"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
and another ``{s: i}This is a sentence.''
              ^^^^^^^^^^^^^^^^^^^^^^^^^
    {s: .terminator = ".", i|This is a sentence|s}
!@@@ := This is a sentence:
            .type = s
            .terminator = "."
            i
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
and another ``{s: i}This is a sentence.''
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ``{s: .terminator = ".", i|This is a sentence|s}''
!@@@ := @@@:
            .terminator = "''"
            .initiator = "``"
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
and another ``{s: i}This is a sentence.''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    and another ``{s: .terminator = ".", i|This is a sentence|s}''
!@@@ := and another @@@:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "``"
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [text] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ##:
and one more ``{s}First sentence. {s: i}Second sentence.''
               ^^^
    {s}
!@@@ :=:
            .type = s
            .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [text] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ##:
and one more ``{s}First sentence. {s: i}Second sentence.''
                                  ^^^^^^
    {s: i}
!@@@ :=:
            .type = s
            i
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
and one more ``{s}First sentence. {s: i}Second sentence.''
               ^^^^^^^^^^^^^^^^^^
    {s: .terminator = "."|First sentence|s}
!@@@ := First sentence:
            .terminator = "."
            .type = s
            .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [text] SELECTED KEY "''"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
and one more ``{s}First sentence. {s: i}Second sentence.''
                                  ^^^^^^^^^^^^^^^^^^^^^^
    {s: .terminator = ".", i|Second sentence|s}
!@@@ := Second sentence:
            .type = s
            .terminator = "."
            i
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
and one more ``{s}First sentence. {s: i}Second sentence.''
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ``{s: .terminator = "."|First sentence|s}
      {s: .terminator = ".", i|Second sentence|s}''
!@@@ := @@@ @@@:
            .terminator = "''"
            .initiator = "``"
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
and one more ``{s}First sentence. {s: i}Second sentence.''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    and one more
        ``{s: .terminator = "."|First sentence|s}
          {s: .terminator = ".", i|Second sentence|s}''
!@@@ := and one more @@@:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "``"
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [text] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ##:
and a last one ``{s}First sentence. {s: i}Second sentence.
                 ^^^
    {s}
!@@@ :=:
            .type = s
            .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [text] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ##:
and a last one ``{s}First sentence. {s: i}Second sentence.
                                    ^^^^^^
    {s: i}
!@@@ :=:
            .type = s
            i
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
and a last one ``{s}First sentence. {s: i}Second sentence.
                 ^^^^^^^^^^^^^^^^^^
    {s: .terminator = "."|First sentence|s}
!@@@ := First sentence:
            .terminator = "."
            .type = s
            .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [text] SELECTED KEY "''"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
and a last one ``{s}First sentence. {s: i}Second sentence.
                                    ^^^^^^^^^^^^^^^^^^^^^^
    {s: .terminator = ".", i|Second sentence|s}
!@@@ := Second sentence:
            .type = s
            .terminator = "."
            i
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ##-##:
and a last one ``{s}First sentence. {s: i}Second sentence.
                                                          ^
                                          Third sentence.''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {s: .terminator = ".", i|Third sentence|s}
!@@@ := Third sentence:
            .type = s
            .terminator = "."
            i
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ##-##:
and a last one ``{s}First sentence. {s: i}Second sentence.
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          Third sentence.''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ``{s: .terminator = "."|First sentence|s}
      {s: .terminator = ".", i|Second sentence|s}
      {s: .terminator = ".", i|Third sentence|s}''
!@@@ := @@@ @@@ @@@:
            .terminator = "''"
            .initiator = "``"
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ##-##:
and a last one ``{s}First sentence. {s: i}Second sentence.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          Third sentence.''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    and a last one
        ``{s: .terminator = "."|First sentence|s}
          {s: .terminator = ".", i|Second sentence|s}
          {s: .terminator = ".", i|Third sentence|s}''
!@@@ := and a last one @@@:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND
    [TOP LEVEL, LINE LEVEL, code] SELECTED KEY [< "*PARSER*" ":" >]
     OF SUBTYPE ll::parser::table::indentation_mark_type
BRACKETED PARSER FOUND [data] SELECTED KEY "["
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY "]"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
    define top level parsing options [ + enable prefix ]
                                     ^^^^^^^^^^^^^^^^^^^
    [+ enable prefix]
!@@@ := "+" enable prefix:
            .terminator = "]"
            .initiator = "["
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
    define top level parsing options [ + enable prefix ]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    define top level parsing options [+ enable prefix]
!@@@ := define top level parsing options @@@:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ##:
    print indentation mark "*TOP* *LEVEL*"
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    print indentation mark "*TOP* *LEVEL*"
!@@@ := print indentation mark @@@:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
!@@@ := "*TOP* *LEVEL*":
            .type = "<Q>"
=== BRACKETED EXPRESSION: lines ##-##:
*PARSER*:
^^^^^^^^^
    define top level parsing options [ + enable prefix ]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    print indentation mark "*TOP* *LEVEL*"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator =
         [< *PARSER* ":" >]|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              define top level parsing options [+ enable prefix]|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              print indentation mark "*TOP* *LEVEL*"|}|}
!@@@ := @@@ @@@:
            .terminator = [$ INDENTED_PARAGRAPH $]
            .position[H] = PACKED_VEC
            .initiator = [< *PARSER* ":" >]
*PARSER*:
    print indentation mark "*TOP* *LEVEL*"
        block standard: indentation mark [< "*TOP*" "*LEVEL*" >] ... ";"
                        []
                        with parsing selectors [code]
                        with parsing options [end at le indent,
                                              end at line separator,
                                              end at outer closing,
                                              enable indented paragraph,
                                              enable prefix,
                                              enable header]
                        with paragraph lexical master "PARAGRAPH-CHECK"
                        with line lexical master "DATA-CHECK"
        block TOP LEVEL: indentation mark [< "*TOP*" "*LEVEL*" >] []
                         with parsing selectors []
                         with parsing options [end at le indent,
                                               end at line separator,
                                               end at outer closing,
                                               enable indented paragraph,
                                               enable header]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
This line contains a typed subexpression {x|1 2 3|}
                                         ^^^^^^^^^^
    {x|1 2 3|x}
!@@@ := 1 2 3:
            .type = x
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
This line contains a typed subexpression {x|1 2 3|}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    This line contains a typed subexpression {x|1 2 3|x}
!@@@ := This line contains a typed subexpression @@@:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
    {x: w, y = 6, z = b c 5 d|1 2 3|}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {x: y = 6, z = [< b c 5 d >], w|1 2 3|x}
!@@@ := 1 2 3:
            .type = x
            y = 6
            z = [< b c 5 d >]
            w
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ##-##:
Another typed subexpression
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {x: w, y = 6, z = b c 5 d|1 2 3|}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    Another typed subexpression {x: y = 6, z = [< b c 5 d >], w|1 2 3|x}
!@@@ := Another typed subexpression @@@:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
    {x: w, z = b c 5 d|1 2 3|y = 6 : x}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {x: y = 6, z = [< b c 5 d >], w|1 2 3|x}
!@@@ := 1 2 3:
            .type = x
            y = 6
            z = [< b c 5 d >]
            w
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ##-##:
Yet another typed subexpression
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {x: w, z = b c 5 d|1 2 3|y = 6 : x}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    Yet another typed subexpression
        {x: y = 6, z = [< b c 5 d >], w|1 2 3|x}
!@@@ := Yet another typed subexpression @@@:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "["
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY "]"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
And another- {t| x y z |b[ABC_,200] = (1 2 3),
                         ^^^^^^^^^^
    [ABC_,200]
!@@@ := ABC_,200:
            .terminator = "]"
            .initiator = "["
            .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "("
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY ")"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
And another- {t| x y z |b[ABC_,200] = (1 2 3),
                                      ^^^^^^^
    (1 2 3)
!@@@ := 1 2 3:
            .terminator = ")"
            .initiator = "("
            .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "["
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY "]"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
                       c[+] = FALSE, d[-] = TRUE,
                        ^^^
    [+]
!@@@ := "+":
            .terminator = "]"
            .initiator = "["
            .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "["
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY "]"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
                       c[+] = FALSE, d[-] = TRUE,
                                      ^^^
    [-]
!@@@ := "-":
            .terminator = "]"
            .initiator = "["
            .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "no"
     OF SUBTYPE ll::parser::table::typed_attr_negator_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ##: bad flag(s) `_' in "ABC_,200"; bad flag(s) ignored:
And another- {t| x y z |b[ABC_,200] = (1 2 3),
                          ^^^^^^^^
=== BRACKETED EXPRESSION: lines ##-##:
And another- {t| x y z |b[ABC_,200] = (1 2 3),
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       c[+] = FALSE, d[-] = TRUE,
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       no f, g : t}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {t: d[-] = TRUE, no f, b[ABC,200] = (1 2 3), g, c[+] = FALSE|x y
        z|t}
!@@@ := x y z:
            d[-] = TRUE
            .type = t
            no f
            b[ABC,200] = @@@
            g
            c[+] = FALSE
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ##-##:
And another- {t| x y z |b[ABC_,200] = (1 2 3),
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       c[+] = FALSE, d[-] = TRUE,
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       no f, g : t}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    And another-
        {t: d[-] = TRUE, no f, b[ABC,200] = (1 2 3), g, c[+] = FALSE|x y
            z|t}
!@@@ := And another- @@@:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "["
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY "["
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY "]"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
And one more {t| |b["A", 201,202, [5]]: t}
                                  ^^^
    [5]
!@@@ := 5:
            .terminator = "]"
            .initiator = "["
            .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY "]"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ##:
And one more {t| |b["A", 201,202, [5]]: t}
                   ^^^^^^^^^^^^^^^^^^^
    ["A" "," 201,202 "," [5]]
!@@@@ := @@@@ "," 201,202 "," @@@:
             .terminator = "]"
             .initiator = "["
             .position[H] = PACKED_VEC
!@@@@ := A:
             .type = "<Q>"
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ##: bad flags specifier `[5]'; ignored:
And one more {t| |b["A", 201,202, [5]]: t}
                                  ^^^
=== BRACKETED EXPRESSION: line ##:
And one more {t| |b["A", 201,202, [5]]: t}
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {t: b[A,201,202]}
!@@@@ :=:
             .type = t
             b[A,201,202]
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
And one more {t| |b["A", 201,202, [5]]: t}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    And one more {t: b[A,201,202]}
!@@@@ := And one more @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PURELIST EXPRESSION: line ##:
{}
^^
    {}
!@@@@ :=:
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
{}
^^

!@@@@ :=:
             .terminator = "<LF>"
             .initiator = [$ LOGICAL_LINE $]
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "("
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ")"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ##: missing closing bracket `}' inserted before `)':
({)
  ^
=== PURELIST EXPRESSION: line ##:
({)
 ^
    {}
!@@@@ :=:
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
({)
^^^
    ()
!@@@@ :=:
             .terminator = ")"
             .initiator = "("
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
({)
^^^
    ()
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ##: missing `|'; inserted before:
{W|1 2 3}
        ^
=== BRACKETED EXPRESSION: line ##:
{W|1 2 3}
^^^^^^^^^
    {W|1 2 3|W}
!@@@@ := 1 2 3:
             .type = W
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
{W|1 2 3}
^^^^^^^^^
    {W|1 2 3|W}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ##: missing `|'; inserted before:
{W|1 2|p = q|3}
              ^
=== BRACKETED EXPRESSION: line ##:
{W|1 2|p = q|3}
^^^^^^^^^^^^^^^
    {W: p = q|1 2 3|W}
!@@@@ := 1 2 3:
             p = q
             .type = W
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
{W|1 2|p = q|3}
^^^^^^^^^^^^^^^
    {W: p = q|1 2 3|W}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ##: empty label:
{P:}
   ^
ERROR: in line ##: bad attribute label; attribute ignored:
{P:}
   ^
=== PREFIX EXPRESSION: line ##:
{P:}
^^^^
    {P}
!@@@@ :=:
             .type = P
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
{P:}
^^^^
    {P}
!@@@@ :=:
             .type = P
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
{P:}
^^^^
    {P}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "("
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY ")"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ##: empty label:
({P2:)
     ^
ERROR: in line ##: missing closing bracket `}' inserted before `)':
({P2:)
     ^
ERROR: in line ##: bad attribute label; attribute ignored:
({P2:)
     ^
=== PREFIX EXPRESSION: line ##:
({P2:)
 ^^^^
    {P2}
!@@@@ :=:
             .type = P2
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
({P2:)
^^^^^^
    ({P2})
!@@@@ := @@@@:
             .terminator = ")"
             .initiator = "("
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
({P2:)
^^^^^^
    ({P2})
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "("
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
ERROR: in line ##: missing type; "" assumed:
({:)
  ^
BRACKETED PARSER FOUND [data] SELECTED KEY ")"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ##: empty label:
({:)
   ^
ERROR: in line ##: missing closing bracket `}' inserted before `)':
({:)
   ^
ERROR: in line ##: bad attribute label; attribute ignored:
({:)
   ^
=== PURELIST EXPRESSION: line ##:
({:)
 ^^
    {}
!@@@@ :=:
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
({:)
^^^^
    ()
!@@@@ :=:
             .terminator = ")"
             .initiator = "("
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
({:)
^^^^
    ()
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ##: missing type; "" assumed:
{P: f = F|1 2 3|g = G:}
                      ^
ERROR: in line ##: beginning type `P' != end type `'; end type ignored:
{P: f = F|1 2 3|g = G:}
                      ^
=== BRACKETED EXPRESSION: line ##:
{P: f = F|1 2 3|g = G:}
^^^^^^^^^^^^^^^^^^^^^^^
    {P: f = F, g = G|1 2 3|P}
!@@@@ := 1 2 3:
             .type = P
             f = F
             g = G
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
{P: f = F|1 2 3|g = G:}
^^^^^^^^^^^^^^^^^^^^^^^
    {P: f = F, g = G|1 2 3|P}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "("
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY ")"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ##: missing `|'; inserted before:
({M: f = F|1 2 3)
                ^
ERROR: in line ##: missing closing bracket `}' inserted before `)':
({M: f = F|1 2 3)
                ^
=== BRACKETED EXPRESSION: line ##:
({M: f = F|1 2 3)
 ^^^^^^^^^^^^^^^
    {M: f = F|1 2 3|M}
!@@@@ := 1 2 3:
             .type = M
             f = F
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
({M: f = F|1 2 3)
^^^^^^^^^^^^^^^^^
    ({M: f = F|1 2 3|M})
!@@@@ := @@@@:
             .terminator = ")"
             .initiator = "("
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
({M: f = F|1 2 3)
^^^^^^^^^^^^^^^^^
    ({M: f = F|1 2 3|M})
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "("
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ")"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ###: missing closing bracket `}' inserted before `)':
({N: f = F|1 2 3|g = G)
                      ^
=== BRACKETED EXPRESSION: line ###:
({N: f = F|1 2 3|g = G)
 ^^^^^^^^^^^^^^^^^^^^^
    {N: f = F, g = G|1 2 3|N}
!@@@@ := 1 2 3:
             .type = N
             f = F
             g = G
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
({N: f = F|1 2 3|g = G)
^^^^^^^^^^^^^^^^^^^^^^^
    ({N: f = F, g = G|1 2 3|N})
!@@@@ := @@@@:
             .terminator = ")"
             .initiator = "("
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
({N: f = F|1 2 3|g = G)
^^^^^^^^^^^^^^^^^^^^^^^
    ({N: f = F, g = G|1 2 3|N})
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "("
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ")"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ###: empty value:
({K: f = F|1 2 3|g =)
                    ^
ERROR: in line ###: missing closing bracket `}' inserted before `)':
({K: f = F|1 2 3|g =)
                    ^
ERROR: in line ###: bad attribute value; attribute ignored:
({K: f = F|1 2 3|g =)
                    ^
=== BRACKETED EXPRESSION: line ###:
({K: f = F|1 2 3|g =)
 ^^^^^^^^^^^^^^^^^^^
    {K: f = F|1 2 3|K}
!@@@@ := 1 2 3:
             .type = K
             f = F
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
({K: f = F|1 2 3|g =)
^^^^^^^^^^^^^^^^^^^^^
    ({K: f = F|1 2 3|K})
!@@@@ := @@@@:
             .terminator = ")"
             .initiator = "("
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
({K: f = F|1 2 3|g =)
^^^^^^^^^^^^^^^^^^^^^
    ({K: f = F|1 2 3|K})
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{S: x = A|1 2|y = B|3 4|z = C}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {S: x = A, y = B, z = C|1 2 3 4|S}
!@@@@ := 1 2 3 4:
             x = A
             .type = S
             y = B
             z = C
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{S: x = A|1 2|y = B|3 4|z = C}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {S: x = A, y = B, z = C|1 2 3 4|S}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: x = A|1 2|y = B|3 4|z = C: T}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: x = A, y = B, z = C|1 2 3 4|T}
!@@@@ := 1 2 3 4:
             x = A
             .type = T
             y = B
             z = C
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: x = A|1 2|y = B|3 4|z = C: T}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: x = A, y = B, z = C|1 2 3 4|T}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ###: beginning type `T' != end type `S'; end type
       ignored:
{T: x = A|1 2|y = B|3 4|z = C: S}
                               ^
=== BRACKETED EXPRESSION: line ###:
{T: x = A|1 2|y = B|3 4|z = C: S}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: x = A, y = B, z = C|1 2 3 4|T}
!@@@@ := 1 2 3 4:
             x = A
             .type = T
             y = B
             z = C
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: x = A|1 2|y = B|3 4|z = C: S}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: x = A, y = B, z = C|1 2 3 4|T}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ###: beginning type `' != end type `S'; end type ignored:
{|1 2|y = B|3 4|z = C: S}
                       ^
=== BRACKETED EXPRESSION: line ###:
{|1 2|y = B|3 4|z = C: S}
^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": y = B, z = C|1 2 3 4|}
!@@@@ := 1 2 3 4:
             y = B
             z = C
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{|1 2|y = B|3 4|z = C: S}
^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": y = B, z = C|1 2 3 4|}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{|1 2|y = B|3 4|z = C}
^^^^^^^^^^^^^^^^^^^^^^
    {"": y = B, z = C|1 2 3 4|}
!@@@@ := 1 2 3 4:
             y = B
             z = C
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{|1 2|y = B|3 4|z = C}
^^^^^^^^^^^^^^^^^^^^^^
    {"": y = B, z = C|1 2 3 4|}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{|1 2|y = B|3 4|}
^^^^^^^^^^^^^^^^^
    {"": y = B|1 2 3 4|}
!@@@@ := 1 2 3 4:
             .position[H] = PACKED_VEC
             y = B
=== BRACKETED EXPRESSION: line ###:
{|1 2|y = B|3 4|}
^^^^^^^^^^^^^^^^^
    {"": y = B|1 2 3 4|}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{S|1 2|y = B|3 4|S}
^^^^^^^^^^^^^^^^^^^
    {S: y = B|1 2 3 4|S}
!@@@@ := 1 2 3 4:
             .type = S
             y = B
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{S|1 2|y = B|3 4|S}
^^^^^^^^^^^^^^^^^^^
    {S: y = B|1 2 3 4|S}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{|1 2|y = B|3 4|""}
^^^^^^^^^^^^^^^^^^^
    {"": y = B|1 2 3 4|}
!@@@@ := 1 2 3 4:
             .position[H] = PACKED_VEC
             y = B
=== BRACKETED EXPRESSION: line ###:
{|1 2|y = B|3 4|""}
^^^^^^^^^^^^^^^^^^^
    {"": y = B|1 2 3 4|}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ###: beginning type `X' != end type `Y'; end type
       ignored:
{X|1 2 3|Y}
         ^
=== BRACKETED EXPRESSION: line ###:
{X|1 2 3|Y}
^^^^^^^^^^^
    {X|1 2 3|X}
!@@@@ := 1 2 3:
             .type = X
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{X|1 2 3|Y}
^^^^^^^^^^^
    {X|1 2 3|X}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ###: beginning type `' != end type `Y'; end type ignored:
{|1 2 3|Y}
        ^
=== PURELIST EXPRESSION: line ###:
{|1 2 3|Y}
^^^^^^^^^^
    {|1 2 3|}
!@@@@ := 1 2 3:
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{|1 2 3|Y}
^^^^^^^^^^
    1 2 3
!@@@@ := 1 2 3:
             .terminator = "<LF>"
             .initiator = [$ LOGICAL_LINE $]
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PURELIST EXPRESSION: line ###:
{""|1 2 3|""}
^^^^^^^^^^^^^
    {|1 2 3|}
!@@@@ := 1 2 3:
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{""|1 2 3|""}
^^^^^^^^^^^^^
    1 2 3
!@@@@ := 1 2 3:
             .terminator = "<LF>"
             .initiator = [$ LOGICAL_LINE $]
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PURELIST EXPRESSION: line ###:
{|1 2 3|""}
^^^^^^^^^^^
    {|1 2 3|}
!@@@@ := 1 2 3:
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{|1 2 3|""}
^^^^^^^^^^^
    1 2 3
!@@@@ := 1 2 3:
             .terminator = "<LF>"
             .initiator = [$ LOGICAL_LINE $]
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{""|1 2|y = B|3 4|""}
^^^^^^^^^^^^^^^^^^^^^
    {"": y = B|1 2 3 4|}
!@@@@ := 1 2 3 4:
             .position[H] = PACKED_VEC
             y = B
=== BRACKETED EXPRESSION: line ###:
{""|1 2|y = B|3 4|""}
^^^^^^^^^^^^^^^^^^^^^
    {"": y = B|1 2 3 4|}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{"": y = B|1 2 3 4|}
^^^^^^^^^^^^^^^^^^^^
    {"": y = B|1 2 3 4|}
!@@@@ := 1 2 3 4:
             .position[H] = PACKED_VEC
             y = B
=== BRACKETED EXPRESSION: line ###:
{"": y = B|1 2 3 4|}
^^^^^^^^^^^^^^^^^^^^
    {"": y = B|1 2 3 4|}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{"": y = B|1 2 3 4|z = C: ""}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": y = B, z = C|1 2 3 4|}
!@@@@ := 1 2 3 4:
             y = B
             z = C
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{"": y = B|1 2 3 4|z = C: ""}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": y = B, z = C|1 2 3 4|}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: y = B|1 2 3 4|z = C}
^^^^^^^^^^^^^^^^^^^^^^^^
    {T: y = B, z = C|1 2 3 4|T}
!@@@@ := 1 2 3 4:
             .type = T
             y = B
             z = C
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: y = B|1 2 3 4|z = C}
^^^^^^^^^^^^^^^^^^^^^^^^
    {T: y = B, z = C|1 2 3 4|T}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "no"
     OF SUBTYPE ll::parser::table::typed_attr_negator_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "no"
     OF SUBTYPE ll::parser::table::typed_attr_negator_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: y, no p|1 2 3 4|no q, z}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: no p, no q, y, z|1 2 3 4|T}
!@@@@ := 1 2 3 4:
             no p
             .type = T
             no q
             y
             z
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: y, no p|1 2 3 4|no q, z}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: no p, no q, y, z|1 2 3 4|T}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "no"
     OF SUBTYPE ll::parser::table::typed_attr_negator_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "no"
     OF SUBTYPE ll::parser::table::typed_attr_negator_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: no p|1 2 3 4|no q}
^^^^^^^^^^^^^^^^^^^^^^
    {T: no p, no q|1 2 3 4|T}
!@@@@ := 1 2 3 4:
             no p
             .type = T
             no q
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: no p|1 2 3 4|no q}
^^^^^^^^^^^^^^^^^^^^^^
    {T: no p, no q|1 2 3 4|T}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "no"
     OF SUBTYPE ll::parser::table::typed_attr_negator_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "no"
     OF SUBTYPE ll::parser::table::typed_attr_negator_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
ERROR: in line ###: negator preceding attribute label that is followed
       by `='; negator ignored:
{T: no p|1 2 3 4|no q = 5}
                 ^^
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: no p|1 2 3 4|no q = 5}
^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: no p, q = 5|1 2 3 4|T}
!@@@@ := 1 2 3 4:
             no p
             .type = T
             q = 5
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: no p|1 2 3 4|no q = 5}
^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: no p, q = 5|1 2 3 4|T}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PURELIST EXPRESSION: line ###:
{|1 2 3 4|}
^^^^^^^^^^^
    {|1 2 3 4|}
!@@@@ := 1 2 3 4:
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{|1 2 3 4|}
^^^^^^^^^^^
    1 2 3 4
!@@@@ := 1 2 3 4:
             .terminator = "<LF>"
             .initiator = [$ LOGICAL_LINE $]
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "{" "*" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "*" "}" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETABLE EXPRESSION: line ###:
{T: x = {* "hi" *}|1 2 3|}
        ^^^^^^^^^^
    {|hi|}
!@@@@ := hi:
             .separator = ","
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: x = {* "hi" *}|1 2 3|}
        ^^^^^^^^^^
    {* hi *}
!@@@@ := hi:
             .terminator = [< "*" "}" >]
             .initiator = [< "{" "*" >]
             .separator = ","
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: x = {* "hi" *}|1 2 3|}
^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: x = hi|1 2 3|T}
!@@@@ := 1 2 3:
             x = hi
             .type = T
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: x = {* "hi" *}|1 2 3|}
^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: x = hi|1 2 3|T}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "{" "*" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY [< "*" "}" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETABLE EXPRESSION: line ###:
{T: x = {* "hi",, there *}|1 2 3|}
        ^^^^^^^^^^^^^^^^^^
    {|hi, there|}
!@@@@ := hi there:
             .separator = ","
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: x = {* "hi",, there *}|1 2 3|}
        ^^^^^^^^^^^^^^^^^^
    {* hi, there *}
!@@@@ := hi there:
             .terminator = [< "*" "}" >]
             .initiator = [< "{" "*" >]
             .separator = ","
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: x = {* "hi",, there *}|1 2 3|}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: x = {* hi, there *}|1 2 3|T}
!@@@@ := 1 2 3:
             x = {* hi, there *}
             .type = T
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: x = {* "hi",, there *}|1 2 3|}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: x = {* hi, there *}|1 2 3|T}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "{" "*" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY "("
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY ")"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: x = {* (A B), foo bar,,, [C D] *}|1 2 3|}
           ^^^^^
    (A B)
!@@@@ := A B:
             .terminator = ")"
             .initiator = "("
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY "["
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY "]"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: x = {* (A B), foo bar,,, [C D] *}|1 2 3|}
                             ^^^^^
    [C D]
!@@@@ := C D:
             .terminator = "]"
             .initiator = "["
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY [< "*" "}" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETABLE EXPRESSION: line ###:
{T: x = {* (A B), foo bar,,, [C D] *}|1 2 3|}
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {|(A B), [< foo bar >], [C D]|}
!@@@@ := @@@@ [< foo bar >] @@@@:
             .separator = ","
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: x = {* (A B), foo bar,,, [C D] *}|1 2 3|}
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {* (A B), [< foo bar >], [C D] *}
!@@@@ := @@@@ [< foo bar >] @@@@:
             .terminator = [< "*" "}" >]
             .initiator = [< "{" "*" >]
             .separator = ","
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: x = {* (A B), foo bar,,, [C D] *}|1 2 3|}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: x = {* [C D], (A B), [< foo bar >] *}|1 2 3|T}
!@@@@ := 1 2 3:
             x = {* @@@@, @@@@, [< foo bar >] *}
             .type = T
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: x = {* (A B), foo bar,,, [C D] *}|1 2 3|}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: x = {* [C D], (A B), [< foo bar >] *}|1 2 3|T}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "{" "*" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY [< "*" "}" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETABLE EXPRESSION: line ###:
{T: x = {* ,,, *}|1 2 3|}
        ^^^^^^^^^
    {}
!@@@@ :=:
             .separator = ","
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: x = {* ,,, *}|1 2 3|}
        ^^^^^^^^^
    {* *}
!@@@@ :=:
             .terminator = [< "*" "}" >]
             .initiator = [< "{" "*" >]
             .separator = ","
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: x = {* ,,, *}|1 2 3|}
^^^^^^^^^^^^^^^^^^^^^^^^^
    {T|1 2 3|T}
!@@@@ := 1 2 3:
             .type = T
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: x = {* ,,, *}|1 2 3|}
^^^^^^^^^^^^^^^^^^^^^^^^^
    {T|1 2 3|T}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: m = 1| |n = 2}
^^^^^^^^^^^^^^^^^^
    {T: m = 1, n = 2}
!@@@@ :=:
             .type = T
             m = 1
             n = 2
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: m = 1| |n = 2}
^^^^^^^^^^^^^^^^^^
    {T: m = 1, n = 2}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "||"
     OF SUBTYPE ll::parser::table::typed_double_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: m = 1||n = 2}
^^^^^^^^^^^^^^^^^
    {T: m = 1, n = 2}
!@@@@ :=:
             .type = T
             m = 1
             n = 2
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: m = 1||n = 2}
^^^^^^^^^^^^^^^^^
    {T: m = 1, n = 2}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "||"
     OF SUBTYPE ll::parser::table::typed_double_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "||"
     OF SUBTYPE ll::parser::table::typed_double_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: m = 1||n = 2||}
^^^^^^^^^^^^^^^^^^^
    {T: m = 1, n = 2}
!@@@@ :=:
             .type = T
             m = 1
             n = 2
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: m = 1||n = 2||}
^^^^^^^^^^^^^^^^^^^
    {T: m = 1, n = 2}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PURELIST EXPRESSION: line ###:
{| |}
^^^^^
    {}
!@@@@ :=:
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{| |}
^^^^^

!@@@@ :=:
             .terminator = "<LF>"
             .initiator = [$ LOGICAL_LINE $]
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "||"
     OF SUBTYPE ll::parser::table::typed_double_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PURELIST EXPRESSION: line ###:
{||}
^^^^
    {}
!@@@@ :=:
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{||}
^^^^

!@@@@ :=:
             .terminator = "<LF>"
             .initiator = [$ LOGICAL_LINE $]
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "||"
     OF SUBTYPE ll::parser::table::typed_double_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PURELIST EXPRESSION: line ###:
{|{||}|}
  ^^^^
    {}
!@@@@ :=:
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PURELIST EXPRESSION: line ###:
{|{||}|}
^^^^^^^^
    {}
!@@@@ :=:
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{|{||}|}
^^^^^^^^

!@@@@ :=:
             .terminator = "<LF>"
             .initiator = [$ LOGICAL_LINE $]
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PURELIST EXPRESSION: line ###:
{|{|X|}|}
  ^^^^^
    {|X|}
!@@@@ := X:
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PURELIST EXPRESSION: line ###:
{|{|X|}|}
^^^^^^^^^
    {|X|}
!@@@@ := X:
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{|{|X|}|}
^^^^^^^^^
    X
!@@@@ := X:
             .terminator = "<LF>"
             .initiator = [$ LOGICAL_LINE $]
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "("
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [code] SELECTED KEY ")"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{|(X)|}
  ^^^
    (X)
!@@@@ := X:
             .terminator = ")"
             .initiator = "("
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{|(X)|}
^^^^^^^
    (X)
!@@@@ := X:
             .terminator = ")"
             .initiator = "("
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{|(X)|}
^^^^^^^
    (X)
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "["
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [code] SELECTED KEY "]"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{|[X]|}
  ^^^
    [X]
!@@@@ := X:
             .terminator = "]"
             .initiator = "["
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{|[X]|}
^^^^^^^
    [X]
!@@@@ := X:
             .terminator = "]"
             .initiator = "["
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{|[X]|}
^^^^^^^
    [X]
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY [< "{" "{" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [math] SELECTED KEY [< "}" "}" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{|{{X}}|}
  ^^^^^
    {{X}}
!@@@@ := X:
             .terminator = [< "}" "}" >]
             .initiator = [< "{" "{" >]
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{|{{X}}|}
^^^^^^^^^
    {{X}}
!@@@@ := X:
             .terminator = [< "}" "}" >]
             .initiator = [< "{" "{" >]
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{|{{X}}|}
^^^^^^^^^
    {{X}}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "||"
     OF SUBTYPE ll::parser::table::typed_double_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: m = 1 || n = 2: T }
^^^^^^^^^^^^^^^^^^^^^^^
    {T: m = 1, n = 2}
!@@@@ :=:
             .type = T
             m = 1
             n = 2
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: m = 1 || n = 2: T }
^^^^^^^^^^^^^^^^^^^^^^^
    {T: m = 1, n = 2}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{m = 1}
^^^^^^^
    {"": m = 1}
!@@@@ :=:
             .position[H] = PACKED_VEC
             m = 1
=== BRACKETED EXPRESSION: line ###:
{m = 1}
^^^^^^^
    {"": m = 1}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
ERROR: in line ###: missing type; "" assumed:
{: m = 1, n = 2}
 ^
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{: m = 1, n = 2}
^^^^^^^^^^^^^^^^
    {"": m = 1, n = 2}
!@@@@ :=:
             m = 1
             n = 2
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{: m = 1, n = 2}
^^^^^^^^^^^^^^^^
    {"": m = 1, n = 2}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{m, n = 2}
^^^^^^^^^^
    {"": m, n = 2}
!@@@@ :=:
             m
             n = 2
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{m, n = 2}
^^^^^^^^^^
    {"": m, n = 2}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [code] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{- a b c -}
^^^^^^^^^^^
    {- a b c -}
!@@@@ := a b c:
             .type = "-"
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{- a b c -}
^^^^^^^^^^^
    {- a b c -}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [code] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{< a b c >}
^^^^^^^^^^^
    {< a b c >}
!@@@@ := a b c:
             .type = [< "<" ">" >]
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{< a b c >}
^^^^^^^^^^^
    {< a b c >}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [code] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ###: missing `-' at end of typed bracketed expression;
       inserted before:
{- a b c}
        ^
=== BRACKETED EXPRESSION: line ###:
{- a b c}
^^^^^^^^^
    {- a b c -}
!@@@@ := a b c:
             .type = "-"
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{- a b c}
^^^^^^^^^
    {- a b c -}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [code] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
{-}
^^^
    {-}
!@@@@ :=:
             .type = "-"
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{-}
^^^
    {-}
!@@@@ :=:
             .type = "-"
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{-}
^^^
    {-}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND
    [TOP LEVEL, LINE LEVEL, code] SELECTED KEY [< "[" "$" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "$" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== DERIVED EXPRESSION: line ###:
[$ MISSING $]
^^^^^^^^^^^^^
    [$ MISSING $]
!@@@@ := [$ MISSING $]
=== BRACKETED EXPRESSION: line ###:
[$ MISSING $]
^^^^^^^^^^^^^
    [$ MISSING $]
!@@@@ := [$ MISSING $]:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND
    [TOP LEVEL, LINE LEVEL, code] SELECTED KEY [< "[" "$" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "$" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== DERIVED EXPRESSION: line ###:
[$ INDENTED_PARAGRAPH $]
^^^^^^^^^^^^^^^^^^^^^^^^
    [$ INDENTED_PARAGRAPH $]
!@@@@ := [$ INDENTED_PARAGRAPH $]
=== BRACKETED EXPRESSION: line ###:
[$ INDENTED_PARAGRAPH $]
^^^^^^^^^^^^^^^^^^^^^^^^
    [$ INDENTED_PARAGRAPH $]
!@@@@ := [$ INDENTED_PARAGRAPH $]:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND
    [TOP LEVEL, LINE LEVEL, code] SELECTED KEY [< "[" "$" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "$" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ###: subexpression "FOOBAR" unrecognized special name;
       changed to ERROR:
[$ FOOBAR $]
   ^^^^^^
=== DERIVED EXPRESSION: line ###:
[$ FOOBAR $]
^^^^^^^^^^^^
    [$ ERROR $]
!@@@@ := [$ ERROR $]
=== BRACKETED EXPRESSION: line ###:
[$ FOOBAR $]
^^^^^^^^^^^^
    [$ ERROR $]
!@@@@ := [$ ERROR $]:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND
    [TOP LEVEL, LINE LEVEL, code] SELECTED KEY [< "[" "<" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [label] SELECTED KEY [< ">" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== DERIVED EXPRESSION: line ###:
[< hi there >]
^^^^^^^^^^^^^^
    [< hi there >]
!@@@@ := [< hi there >]
=== BRACKETED EXPRESSION: line ###:
[< hi there >]
^^^^^^^^^^^^^^
    [< hi there >]
!@@@@ := [< hi there >]:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND
    [TOP LEVEL, LINE LEVEL, code] SELECTED KEY [< "[" "<" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [label] SELECTED KEY [< ">" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== DERIVED EXPRESSION: line ###:
[< hi >]
^^^^^^^^
    hi
!@@@@ := hi
=== BRACKETED EXPRESSION: line ###:
[< hi >]
^^^^^^^^
    hi
!@@@@ := hi:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND
    [TOP LEVEL, LINE LEVEL, code] SELECTED KEY [< "[" "<" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [label] SELECTED KEY [< ">" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== DERIVED EXPRESSION: line ###:
[< >]
^^^^^
    [< >]
!@@@@ := [< >]
=== BRACKETED EXPRESSION: line ###:
[< >]
^^^^^
    [< >]
!@@@@ := [< >]:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND
    [TOP LEVEL, LINE LEVEL, code] SELECTED KEY [< "[" "<" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [label] SELECTED KEY [< "[" "$" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "$" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== DERIVED EXPRESSION: line ###:
[< [$ MISSING $] >]
   ^^^^^^^^^^^^^
    [$ MISSING $]
!@@@@ := [$ MISSING $]
BRACKETED PARSER FOUND [label] SELECTED KEY [< ">" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ###: not a legal label element `MISSING':
[< [$ MISSING $] >]
   ^^^^^^^^^^^^^
ERROR: in line ###: evaluated to ERROR special value because of error(s)
       in label elements:
[< [$ MISSING $] >]
^^^^^^^^^^^^^^^^^^^
=== DERIVED EXPRESSION: line ###:
[< [$ MISSING $] >]
^^^^^^^^^^^^^^^^^^^
    [$ ERROR $]
!@@@@ := [$ ERROR $]
=== BRACKETED EXPRESSION: line ###:
[< [$ MISSING $] >]
^^^^^^^^^^^^^^^^^^^
    [$ ERROR $]
!@@@@ := [$ ERROR $]:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "[" "$" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "$" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== DERIVED EXPRESSION: line ###:
{ x = 1, y = [$ NONE $], z = [$ MISSING $] }
             ^^^^^^^^^^
    [$ NONE $]
!@@ := [$ NONE $]
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
ERROR: in line ###: not a legal attribute value `NONE'; attribute
       ignored:
{ x = 1, y = [$ NONE $], z = [$ MISSING $] }
             ^^^^^^^^^^
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "[" "$" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "$" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== DERIVED EXPRESSION: line ###:
{ x = 1, y = [$ NONE $], z = [$ MISSING $] }
                             ^^^^^^^^^^^^^
    [$ MISSING $]
!@@@@ := [$ MISSING $]
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ###: bad attribute value; attribute ignored:
{ x = 1, y = [$ NONE $], z = [$ MISSING $] }
             ^^^^^^^^^^
=== BRACKETED EXPRESSION: line ###:
{ x = 1, y = [$ NONE $], z = [$ MISSING $] }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": x = 1, z = [$ MISSING $]}
!@@@@ :=:
             x = 1
             z = [$ MISSING $]
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{ x = 1, y = [$ NONE $], z = [$ MISSING $] }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": x = 1, z = [$ MISSING $]}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "{" "*" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY [< "[" "$" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "$" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== DERIVED EXPRESSION: line ###:
{ x = 1, y = {* 1, [$ NONE $], 2 *}, z = [$ MISSING $] }
                   ^^^^^^^^^^
    [$ NONE $]
!@@ := [$ NONE $]
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY [< "*" "}" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ###: not a legal object element value; `NONE'; ignored:
{ x = 1, y = {* 1, [$ NONE $], 2 *}, z = [$ MISSING $] }
                   ^^^^^^^^^^
=== BRACKETABLE EXPRESSION: line ###:
{ x = 1, y = {* 1, [$ NONE $], 2 *}, z = [$ MISSING $] }
             ^^^^^^^^^^^^^^^^^^^^^^
    {|1, 2|}
!@@@@ := 1 2:
             .separator = ","
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{ x = 1, y = {* 1, [$ NONE $], 2 *}, z = [$ MISSING $] }
             ^^^^^^^^^^^^^^^^^^^^^^
    {* 1, 2 *}
!@@@@ := 1 2:
             .terminator = [< "*" "}" >]
             .initiator = [< "{" "*" >]
             .separator = ","
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "[" "$" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "$" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== DERIVED EXPRESSION: line ###:
{ x = 1, y = {* 1, [$ NONE $], 2 *}, z = [$ MISSING $] }
                                         ^^^^^^^^^^^^^
    [$ MISSING $]
!@@@@ := [$ MISSING $]
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{ x = 1, y = {* 1, [$ NONE $], 2 *}, z = [$ MISSING $] }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": x = 1, y = {* 1, 2 *}, z = [$ MISSING $]}
!@@@@ :=:
             x = 1
             y = {* 1, 2 *}
             z = [$ MISSING $]
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{ x = 1, y = {* 1, [$ NONE $], 2 *}, z = [$ MISSING $] }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": x = 1, y = {* 1, 2 *}, z = [$ MISSING $]}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "[" "$" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "$" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== DERIVED EXPRESSION: line ###:
{ x = 1, y [$ NONE $] 55 = 77, [$ MISSING $] = 11,
           ^^^^^^^^^^
    [$ NONE $]
!@@ := [$ NONE $]
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
ERROR: in line ###: not a legal label element `NONE':
{ x = 1, y [$ NONE $] 55 = 77, [$ MISSING $] = 11,
           ^^^^^^^^^^
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "[" "$" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "$" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== DERIVED EXPRESSION: line ###:
{ x = 1, y [$ NONE $] 55 = 77, [$ MISSING $] = 11,
                               ^^^^^^^^^^^^^
    [$ MISSING $]
!@@@@ := [$ MISSING $]
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
ERROR: in line ###: not a legal label initial element `MISSING':
{ x = 1, y [$ NONE $] 55 = 77, [$ MISSING $] = 11,
                               ^^^^^^^^^^^^^
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ###: bad attribute label; attribute ignored:
{ x = 1, y [$ NONE $] 55 = 77, [$ MISSING $] = 11,
         ^^^^^^^^^^^^^^^
ERROR: in line ###: bad attribute label; attribute ignored:
{ x = 1, y [$ NONE $] 55 = 77, [$ MISSING $] = 11,
                               ^^^^^^^^^^^^^
=== BRACKETED EXPRESSION: lines ###-###:
{ x = 1, y [$ NONE $] 55 = 77, [$ MISSING $] = 11,
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         z 22 = 33 }
^^^^^^^^^^^^^^^^^^^^
    {"": x = 1, z 22 = 33}
!@@@@ :=:
             x = 1
             z 22 = 33
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ###-###:
{ x = 1, y [$ NONE $] 55 = 77, [$ MISSING $] = 11,
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         z 22 = 33 }
^^^^^^^^^^^^^^^^^^^^
    {"": x = 1, z 22 = 33}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
ERROR: in line ###: empty label:
{ x = 1, y 55 = 77, = 11, z 22 = 33 }
                    ^
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ###: bad attribute label; attribute ignored:
{ x = 1, y 55 = 77, = 11, z 22 = 33 }
                    ^
=== BRACKETED EXPRESSION: line ###:
{ x = 1, y 55 = 77, = 11, z 22 = 33 }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": x = 1, z 22 = 33, y 55 = 77}
!@@@@ :=:
             x = 1
             z 22 = 33
             y 55 = 77
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{ x = 1, y 55 = 77, = 11, z 22 = 33 }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": x = 1, z 22 = 33, y 55 = 77}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "["
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY "]"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{ x = 55, y[abc] = [$ NONE $], z[def] = 88 }
           ^^^^^
    [abc]
!@@@@ := abc:
             .terminator = "]"
             .initiator = "["
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "[" "$" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "$" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== DERIVED EXPRESSION: line ###:
{ x = 55, y[abc] = [$ NONE $], z[def] = 88 }
                   ^^^^^^^^^^
    [$ NONE $]
!@@ := [$ NONE $]
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
ERROR: in line ###: not a legal attribute value `NONE'; attribute
       ignored:
{ x = 55, y[abc] = [$ NONE $], z[def] = 88 }
                   ^^^^^^^^^^
BRACKETED PARSER FOUND [data] SELECTED KEY "["
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY "]"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{ x = 55, y[abc] = [$ NONE $], z[def] = 88 }
                                ^^^^^
    [def]
!@@@@ := def:
             .terminator = "]"
             .initiator = "["
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ###: bad attribute value; attribute ignored:
{ x = 55, y[abc] = [$ NONE $], z[def] = 88 }
                   ^^^^^^^^^^
=== BRACKETED EXPRESSION: line ###:
{ x = 55, y[abc] = [$ NONE $], z[def] = 88 }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": x = 55, z[def] = 88}
!@@@@ :=:
             x = 55
             z[def] = 88
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{ x = 55, y[abc] = [$ NONE $], z[def] = 88 }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": x = 55, z[def] = 88}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "[" "$" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "$" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== DERIVED EXPRESSION: line ###:
{[$ NONE $]: x = 1}
 ^^^^^^^^^^
    [$ NONE $]
!@@ := [$ NONE $]
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
ERROR: in line ###: not a legal label initial element `NONE':
{[$ NONE $]: x = 1}
 ^^^^^^^^^^
ERROR: in line ###: bad type label; "" assumed:
{[$ NONE $]: x = 1}
 ^^^^^^^^^^
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{[$ NONE $]: x = 1}
^^^^^^^^^^^^^^^^^^^
    {"": x = 1}
!@@@@ :=:
             x = 1
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{[$ NONE $]: x = 1}
^^^^^^^^^^^^^^^^^^^
    {"": x = 1}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "("
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
({W} 2 3 {X} 4 5 ({Y} 6 7) {Z})
 ^^^
    {W}
!@@@@ :=:
             .type = W
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
({W} 2 3 {X} 4 5 ({Y} 6 7) {Z})
         ^^^
    {X}
!@@@@ :=:
             .type = X
             .position[H] = PACKED_VEC
ERROR: in line ###: prefix separator of type `X' not at beginning of
       subexpression and does not continue subexpression started by
       another prefix with the same type or group; prefix unrecognized:
({W} 2 3 {X} 4 5 ({Y} 6 7) {Z})
         ^^^
BRACKETED PARSER FOUND [code] SELECTED KEY "("
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
({W} 2 3 {X} 4 5 ({Y} 6 7) {Z})
                  ^^^
    {Y}
!@@@@ :=:
             .type = Y
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [code] SELECTED KEY ")"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
({W} 2 3 {X} 4 5 ({Y} 6 7) {Z})
                  ^^^^^^^
    {Y|6 7|Y}
!@@@@ := 6 7:
             .type = Y
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
({W} 2 3 {X} 4 5 ({Y} 6 7) {Z})
                 ^^^^^^^^^
    ({Y|6 7|Y})
!@@@@ := @@@@:
             .terminator = ")"
             .initiator = "("
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
({W} 2 3 {X} 4 5 ({Y} 6 7) {Z})
                           ^^^
    {Z}
!@@@@ :=:
             .type = Z
             .position[H] = PACKED_VEC
ERROR: in line ###: prefix separator of type `Z' not at beginning of
       subexpression and does not continue subexpression started by
       another prefix with the same type or group; prefix unrecognized:
({W} 2 3 {X} 4 5 ({Y} 6 7) {Z})
                           ^^^
BRACKETED PARSER FOUND [code] SELECTED KEY ")"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
({W} 2 3 {X} 4 5 ({Y} 6 7) {Z})
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {W|2 3 {X} 4 5 ({Y|6 7|Y}) {Z}|W}
!@@@@ := 2 3 @@@@ 4 5 @@@@ @@@@:
             .type = W
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
({W} 2 3 {X} 4 5 ({Y} 6 7) {Z})
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ({W|2 3 {X} 4 5 ({Y|6 7|Y}) {Z}|W})
!@@@@ := @@@@:
             .terminator = ")"
             .initiator = "("
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
({W} 2 3 {X} 4 5 ({Y} 6 7) {Z})
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ({W|2 3 {X} 4 5 ({Y|6 7|Y}) {Z}|W})
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
{X} a b c {X}{Y} d e {Y} f g {X} h k
^^^
    {X}
!@@@@ :=:
             .type = X
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
{X} a b c {X}{Y} d e {Y} f g {X} h k
          ^^^
    {X}
!@@@@ :=:
             .type = X
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{X} a b c {X}{Y} d e {Y} f g {X} h k
^^^^^^^^^
    {X|a b c|X}
!@@@@ := a b c:
             .type = X
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
{X} a b c {X}{Y} d e {Y} f g {X} h k
             ^^^
    {Y}
!@@@@ :=:
             .type = Y
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
{X} a b c {X}{Y} d e {Y} f g {X} h k
                     ^^^
    {Y}
!@@@@ :=:
             .type = Y
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{X} a b c {X}{Y} d e {Y} f g {X} h k
             ^^^^^^^
    {Y|d e|Y}
!@@@@ := d e:
             .type = Y
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
{X} a b c {X}{Y} d e {Y} f g {X} h k
                             ^^^
    {X}
!@@@@ :=:
             .type = X
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{X} a b c {X}{Y} d e {Y} f g {X} h k
                     ^^^^^^^
    {Y|f g|Y}
!@@@@ := f g:
             .type = Y
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{X} a b c {X}{Y} d e {Y} f g {X} h k
          ^^^^^^^^^^^^^^^^^^
    {X|{Y|d e|Y} {Y|f g|Y}|X}
!@@@@ := @@@@ @@@@:
             .type = X
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{X} a b c {X}{Y} d e {Y} f g {X} h k
                             ^^^^^^^
    {X|h k|X}
!@@@@ := h k:
             .type = X
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{X} a b c {X}{Y} d e {Y} f g {X} h k
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {X|a b c|X} {X|{Y|d e|Y} {Y|f g|Y}|X} {X|h k|X}
!@@@@ := @@@@ @@@@ @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
{X} a b c
^^^
    {X}
!@@@@ :=:
             .type = X
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{X} a b c
^^^^^^^^^
    {X|a b c|X}
!@@@@ := a b c:
             .type = X
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{X} a b c
^^^^^^^^^
    {X|a b c|X}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
{X}{Y} f g
^^^
    {X}
!@@@@ :=:
             .type = X
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
{X}{Y} f g
   ^^^
    {Y}
!@@@@ :=:
             .type = Y
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{X}{Y} f g
   ^^^^^^^
    {Y|f g|Y}
!@@@@ := f g:
             .type = Y
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{X}{Y} f g
^^^^^^^^^^
    {X|{Y|f g|Y}|X}
!@@@@ := @@@@:
             .type = X
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{X}{Y} f g
^^^^^^^^^^
    {X|{Y|f g|Y}|X}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
{X} h k
^^^
    {X}
!@@@@ :=:
             .type = X
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{X} h k
^^^^^^^
    {X|h k|X}
!@@@@ := h k:
             .type = X
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{X} h k
^^^^^^^
    {X|h k|X}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
{X} a b c
^^^
    {X}
!@@@@ :=:
             .type = X
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{X} a b c
^^^^^^^^^
    {X|a b c|X}
!@@@@ := a b c:
             .type = X
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{X} a b c
^^^^^^^^^
    {X|a b c|X}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
{X}{Y} f [$ NONE $] g
^^^
    {X}
!@@@@ :=:
             .type = X
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
{X}{Y} f [$ NONE $] g
   ^^^
    {Y}
!@@@@ :=:
             .type = Y
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND
    [TOP LEVEL, LINE LEVEL, code] SELECTED KEY [< "[" "$" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "$" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== DERIVED EXPRESSION: line ###:
{X}{Y} f [$ NONE $] g
         ^^^^^^^^^^
    [$ NONE $]
!@@ := [$ NONE $]
ERROR: in line ###: not a legal object element value; `NONE'; ignored:
{X}{Y} f [$ NONE $] g
         ^^^^^^^^^^
=== BRACKETED EXPRESSION: line ###:
{X}{Y} f [$ NONE $] g
   ^^^^^^^^^^^^^^^^^^
    {Y|f g|Y}
!@@@@ := f g:
             .type = Y
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{X}{Y} f [$ NONE $] g
^^^^^^^^^^^^^^^^^^^^^
    {X|{Y|f g|Y}|X}
!@@@@ := @@@@:
             .type = X
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{X}{Y} f [$ NONE $] g
^^^^^^^^^^^^^^^^^^^^^
    {X|{Y|f g|Y}|X}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
{X} h k
^^^
    {X}
!@@@@ :=:
             .type = X
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{X} h k
^^^^^^^
    {X|h k|X}
!@@@@ := h k:
             .type = X
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{X} h k
^^^^^^^
    {X|h k|X}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND
    [TOP LEVEL, LINE LEVEL, code] SELECTED KEY [< "{" "{" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [math] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "}"
BRACKETED PARSER FOUND [math] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "|"
BRACKETED PARSER FOUND [math] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "|"
BRACKETED PARSER FOUND [math] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "}"
ERROR: in line ###: missing closing bracket `} }' inserted at end of
       logical line that ends here:
{{X} hi|ho|}
            ^
=== BRACKETED EXPRESSION: line ###:
{{X} hi|ho|}
^^^^^^^^^^^^
    {{X "}" hi "|" ho "|" "}"}}
!@@@@ := X "}" hi "|" ho "|" "}":
             .terminator = [< "}" "}" >]
             .initiator = [< "{" "{" >]
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{{X} hi|ho|}
^^^^^^^^^^^^
    {{X "}" hi "|" ho "|" "}"}}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "("
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [code] SELECTED KEY ")"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T|(X) ho|}
   ^^^
    (X)
!@@@@ := X:
             .terminator = ")"
             .initiator = "("
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T|(X) ho|}
^^^^^^^^^^^
    {T|(X) ho|T}
!@@@@ := @@@@ ho:
             .type = T
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T|(X) ho|}
^^^^^^^^^^^
    {T|(X) ho|T}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: A = {Y|hi|}|{X} ho|B = {Z}}
        ^^^^^^^
    {Y|hi|Y}
!@@@@ := hi:
             .type = Y
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
{T: A = {Y|hi|}|{X} ho|B = {Z}}
                ^^^
    {X}
!@@@@ :=:
             .type = X
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "}" "}" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY [< "}" "}" >]
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: A = {Y|hi|}|{X} ho|B = {Z}}
                           ^^^
    {Z}
!@@@@ :=:
             .type = Z
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: A = {Y|hi|}|{X} ho|B = {Z}}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: A = {Y|hi|Y}, B = {Z}|{X} ho|T}
!@@@@ := @@@@ ho:
             .type = T
             A = @@@@
             B = @@@@
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: A = {Y|hi|}|{X} ho|B = {Z}}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: A = {Y|hi|Y}, B = {Z}|{X} ho|T}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND
    [TOP LEVEL, LINE LEVEL, code] SELECTED KEY [< "*PARSER*" ":" >]
     OF SUBTYPE ll::parser::table::indentation_mark_type
=== BRACKETED EXPRESSION: line ###:
    print bracket ""
    ^^^^^^^^^^^^^^^^
    print bracket ""
!@@@@ := print bracket @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
!@@@@ := "":
             .type = "<Q>"
=== BRACKETED EXPRESSION: line ###:
    print indentation mark ""
    ^^^^^^^^^^^^^^^^^^^^^^^^^
    print indentation mark ""
!@@@@ := print indentation mark @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
!@@@@ := "":
             .type = "<Q>"
=== BRACKETED EXPRESSION: line ###:
    print typed bracket ""
    ^^^^^^^^^^^^^^^^^^^^^^
    print typed bracket ""
!@@@@ := print typed bracket @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
!@@@@ := "":
             .type = "<Q>"
=== BRACKETED EXPRESSION: lines ###-###:
*PARSER*:
^^^^^^^^^
    print bracket ""
^^^^^^^^^^^^^^^^^^^^
    print indentation mark ""
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    print typed bracket ""
^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator =
         [< *PARSER* ":" >]|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              print bracket ""|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              print indentation mark ""|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              print typed bracket ""|}|}
!@@@@ := @@@@ @@@@ @@@@:
             .terminator = [$ INDENTED_PARAGRAPH $]
             .position[H] = PACKED_VEC
             .initiator = [< *PARSER* ":" >]
*PARSER*:
    print bracket ""
        block standard: bracket "``" ... "''" [code, text, math]
                        with parsing selectors [- code, + text, - math]
                        with parsing options [+ enable table prefix]
                        with text reformatter ( "s", ".", "?", "!", ":",
                        ";" )
        block TOP LEVEL: bracket "``" ... "''" [data]
        block standard: bracket [< "[" "<" >] ... [< ">" "]" >]
                        [code, label, text, math]
                        with parsing selectors [label]
                        with label reformatter
        block TOP LEVEL: bracket [< "[" "<" >] ... [< ">" "]" >] [data]
                         with parsing selectors [data]
                         with label reformatter
        block TOP LEVEL: bracket [< "{" "*" >] ... [< "*" "}" >] [data]
                         with multivalue reformatter ( "," )
        block standard: bracket "(" ... ")" [code, text, math]
        block TOP LEVEL: bracket "(" ... ")" [data]
        block standard: bracket "[" ... "]" [code, text, math]
        block TOP LEVEL: bracket "[" ... "]" [data]
        block standard: bracket "`" ... "'" [code, text, math]
                        with parsing selectors [text]
        block TOP LEVEL: bracket "`" ... "'" [data]
                         with parsing selectors [data]
        block standard: bracket [< "{" "{" >] ... [< "}" "}" >]
                        [code, text, math]
                        with parsing selectors [- code, - text, + math]
        block TOP LEVEL: bracket [< "{" "{" >] ... [< "}" "}" >] [data]
        block standard: bracket "<+" ... "+>" [math]
        block standard: bracket "<-" ... "->" [text]
        block standard: bracket [< "[" "$" >] ... [< "$" "]" >]
                        [code, label, text, math]
                        with parsing selectors [data]
                        with special reformatter
        block TOP LEVEL: bracket [< "[" "$" >] ... [< "$" "]" >] [data]
                         with parsing selectors [data]
                         with special reformatter
    print indentation mark ""
        block standard: indentation mark ":" [data paragraph]
                        with parsing selectors [data]
                        with parsing options [- end at indent,
                                              + end at le indent,
                                              - end at lt indent,
                                              - end at paragraph break,
                                              + end at line separator,
                                              + end at outer closing]
        block standard: indentation mark ":" [text]
                        with parsing options [- end at indent,
                                              + end at le indent,
                                              - end at lt indent,
                                              - end at paragraph break,
                                              + end at line separator,
                                              + end at outer closing]
                        with implied header {p}
                        with paragraph lexical master "PARAGRAPH-CHECK"
                        with line lexical master "DATA-CHECK"
        block standard: indentation mark ":" ... ";" [code]
                        with parsing options [- end at indent,
                                              + end at le indent,
                                              - end at lt indent,
                                              - end at paragraph break,
                                              + end at line separator,
                                              + end at outer closing]
                        with paragraph lexical master "PARAGRAPH-CHECK"
                        with line lexical master "DATA-CHECK"
        block TOP LEVEL: indentation mark [< "*PARSER*" "*TEST*" ":" >] ... ";"
                         [TOP LEVEL]
        block TOP LEVEL: indentation mark [< "*PARSER*" ":" >] ... ";"
                         [TOP LEVEL]
                         with parsing selectors [data]
        block standard: indentation mark [< "*TOP*" "*LEVEL*" >] ... ";"
                        []
                        with parsing selectors [code]
                        with parsing options [end at le indent,
                                              end at line separator,
                                              end at outer closing,
                                              enable indented paragraph,
                                              enable prefix,
                                              enable header]
                        with paragraph lexical master "PARAGRAPH-CHECK"
                        with line lexical master "DATA-CHECK"
        block TOP LEVEL: indentation mark [< "*TOP*" "*LEVEL*" >] []
                         with parsing selectors []
                         with parsing options [end at le indent,
                                               end at line separator,
                                               end at outer closing,
                                               enable indented paragraph,
                                               enable header]
    print typed bracket ""
        block standard: typed bracket "{" ... "|" ... "|" ... "}"
                        // "||" is also allowed.
                        [code, text, math]
                        with attribute selectors [data]
                        with attributes ":" ... "=" ... ","
                        with attribute negator "no"
                        with attribute flags initiator "["
                        with attribute multivalue initiator [< "{" "*" >]
        block TOP LEVEL: typed bracket "{" ... "|" ... "|" ... "}"
                         // "||" is also allowed.
                         [data]
                         with attribute selectors [data]
                         with attributes ":" ... "=" ... ","
                         with attribute negator "no"
                         with attribute flags initiator "["
                         with attribute multivalue initiator [< "{" "*" >]
                         with prefix selectors []
=== BRACKETED EXPRESSION: lines ###-###:
"This is a longer sentence"#
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    #" than we would like."
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    "This is a longer sentence than we would like."
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
!@@@@ := @@@@:
             .type = "<Q>"
!@@@@ := "This is a longer sentence than we would like."
=== BRACKETED EXPRESSION: line ###:
"And this is a second sentence."
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    "And this is a second sentence."
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
!@@@@ := "And this is a second sentence.":
             .type = "<Q>"
=== BRACKETED EXPRESSION: lines ###-###:
This is a continued-middle-#
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    #lexeme.
^^^^^^^^^^^^
    This is a continued-middle-lexeme "."
!@@@@ := This is a continued-middle-lexeme ".":
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{my type|a b c|}
^^^^^^^^^^^^^^^^
    {my type|a b c|my type}
!@@@@ := a b c:
             .type = [< my type >]
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{my type|a b c|}
^^^^^^^^^^^^^^^^
    {my type|a b c|my type}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ###: beginning type `' != end type `my type'; end type
       ignored:
{|a b c|my type}
        ^^
=== PURELIST EXPRESSION: line ###:
{|a b c|my type}
^^^^^^^^^^^^^^^^
    {|a b c|}
!@@@@ := a b c:
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{|a b c|my type}
^^^^^^^^^^^^^^^^
    a b c
!@@@@ := a b c:
             .terminator = "<LF>"
             .initiator = [$ LOGICAL_LINE $]
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{my type|a b c|my type}
^^^^^^^^^^^^^^^^^^^^^^^
    {my type|a b c|my type}
!@@@@ := a b c:
             .type = [< my type >]
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{my type|a b c|my type}
^^^^^^^^^^^^^^^^^^^^^^^
    {my type|a b c|my type}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "||"
     OF SUBTYPE ll::parser::table::typed_double_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{my type||}
^^^^^^^^^^^
    {my type}
!@@@@ :=:
             .type = [< my type >]
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{my type||}
^^^^^^^^^^^
    {my type}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "||"
     OF SUBTYPE ll::parser::table::typed_double_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ###: beginning type `' != end type `my type'; end type
       ignored:
{||my type}
   ^^
=== PURELIST EXPRESSION: line ###:
{||my type}
^^^^^^^^^^^
    {}
!@@@@ :=:
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{||my type}
^^^^^^^^^^^

!@@@@ :=:
             .terminator = "<LF>"
             .initiator = [$ LOGICAL_LINE $]
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{my type: my attribute = 5, my option = TRUE| a b c |}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my type: my attribute = 5, my option|a b c|my type}
!@@@@ := a b c:
             .type = [< my type >]
             my attribute = 5
             my option
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{my type: my attribute = 5, my option = TRUE| a b c |}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my type: my attribute = 5, my option|a b c|my type}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: lines ###-###:
{my type: my attribute = 5, your option = FALSE|
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    a b c |my type}
^^^^^^^^^^^^^^^^^^^
    {my type: no your option, my attribute = 5|a b c|my type}
!@@@@ := a b c:
             .type = [< my type >]
             no your option
             my attribute = 5
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ###-###:
{my type: my attribute = 5, your option = FALSE|
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    a b c |my type}
^^^^^^^^^^^^^^^^^^^
    {my type: no your option, my attribute = 5|a b c|my type}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: lines ###-###:
{my type: my attribute = 5|
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    a b c |your option = FALSE: my type}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my type: no your option, my attribute = 5|a b c|my type}
!@@@@ := a b c:
             .type = [< my type >]
             no your option
             my attribute = 5
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ###-###:
{my type: my attribute = 5|
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    a b c |your option = FALSE: my type}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my type: no your option, my attribute = 5|a b c|my type}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{my attribute = 5| a b c |my option = TRUE: my type}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my type: my attribute = 5, my option|a b c|my type}
!@@@@ := a b c:
             .type = [< my type >]
             my attribute = 5
             my option
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{my attribute = 5| a b c |my option = TRUE: my type}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my type: my attribute = 5, my option|a b c|my type}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{my type| a b c |attribute = 5, my option}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my type: attribute = 5, my option|a b c|my type}
!@@@@ := a b c:
             attribute = 5
             .type = [< my type >]
             my option
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{my type| a b c |attribute = 5, my option}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my type: attribute = 5, my option|a b c|my type}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{my type| a b c |attribute = 5, my option: my type}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my type: attribute = 5, my option|a b c|my type}
!@@@@ := a b c:
             attribute = 5
             .type = [< my type >]
             my option
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{my type| a b c |attribute = 5, my option: my type}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my type: attribute = 5, my option|a b c|my type}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ###: beginning type `' != end type `my type'; end type
       ignored:
{| a b c |attribute = 5, my option: my type}
                                    ^^
=== BRACKETED EXPRESSION: line ###:
{| a b c |attribute = 5, my option: my type}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": attribute = 5, my option|a b c|}
!@@@@ := a b c:
             attribute = 5
             my option
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{| a b c |attribute = 5, my option: my type}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": attribute = 5, my option|a b c|}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PURELIST EXPRESSION: line ###:
{|a b c|}
^^^^^^^^^
    {|a b c|}
!@@@@ := a b c:
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{|a b c|}
^^^^^^^^^
    a b c
!@@@@ := a b c:
             .terminator = "<LF>"
             .initiator = [$ LOGICAL_LINE $]
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "||"
     OF SUBTYPE ll::parser::table::typed_double_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PURELIST EXPRESSION: line ###:
{||}
^^^^
    {}
!@@@@ :=:
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{||}
^^^^

!@@@@ :=:
             .terminator = "<LF>"
             .initiator = [$ LOGICAL_LINE $]
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PURELIST EXPRESSION: line ###:
{}
^^
    {}
!@@@@ :=:
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{}
^^

!@@@@ :=:
             .terminator = "<LF>"
             .initiator = [$ LOGICAL_LINE $]
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "no"
     OF SUBTYPE ll::parser::table::typed_attr_negator_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{my attribute = 5, no your option|a b c|}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": no your option, my attribute = 5|a b c|}
!@@@@ := a b c:
             no your option
             my attribute = 5
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{my attribute = 5, no your option|a b c|}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": no your option, my attribute = 5|a b c|}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "no"
     OF SUBTYPE ll::parser::table::typed_attr_negator_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{"": my attribute = 5, no your option|a b c|""}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": no your option, my attribute = 5|a b c|}
!@@@@ := a b c:
             no your option
             my attribute = 5
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{"": my attribute = 5, no your option|a b c|""}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": no your option, my attribute = 5|a b c|}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [code] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{+ a b c +}
^^^^^^^^^^^
    {+ a b c +}
!@@@@ := a b c:
             .type = "+"
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{+ a b c +}
^^^^^^^^^^^
    {+ a b c +}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "no"
     OF SUBTYPE ll::parser::table::typed_attr_negator_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{my option| a b c |no your option}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my option: no your option|a b c|my option}
!@@@@ := a b c:
             .type = [< my option >]
             no your option
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{my option| a b c |no your option}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my option: no your option|a b c|my option}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "no"
     OF SUBTYPE ll::parser::table::typed_attr_negator_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{my option: no your option| a b c |}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my option: no your option|a b c|my option}
!@@@@ := a b c:
             .type = [< my option >]
             no your option
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{my option: no your option| a b c |}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my option: no your option|a b c|my option}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{my option: your option = FALSE| a b c |}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my option: no your option|a b c|my option}
!@@@@ := a b c:
             .type = [< my option >]
             no your option
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{my option: your option = FALSE| a b c |}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my option: no your option|a b c|my option}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "no"
     OF SUBTYPE ll::parser::table::typed_attr_negator_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{no your option| a b c |my option}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my option: no your option|a b c|my option}
!@@@@ := a b c:
             .type = [< my option >]
             no your option
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{no your option| a b c |my option}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my option: no your option|a b c|my option}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ###: beginning type `my option' != end type `your
       option'; end type ignored:
{my option| a b c |your option}
                   ^^^^
=== BRACKETED EXPRESSION: line ###:
{my option| a b c |your option}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my option|a b c|my option}
!@@@@ := a b c:
             .type = [< my option >]
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{my option| a b c |your option}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my option|a b c|my option}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [code] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{+ +}
^^^^^
    {+}
!@@@@ :=:
             .type = "+"
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{+ +}
^^^^^
    {+}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [code] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
{+}
^^^
    {+}
!@@@@ :=:
             .type = "+"
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{+}
^^^
    {+}
!@@@@ :=:
             .type = "+"
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{+}
^^^
    {+}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "{" "*" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY [< "*" "}" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETABLE EXPRESSION: line ###:
{my attribute = {* a b c, d e, f *} ||}
                ^^^^^^^^^^^^^^^^^^^
    {|[< a b c >], [< d e >], f|}
!@@@@ := [< a b c >] [< d e >] f:
             .separator = ","
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{my attribute = {* a b c, d e, f *} ||}
                ^^^^^^^^^^^^^^^^^^^
    {* [< a b c >], [< d e >], f *}
!@@@@ := [< a b c >] [< d e >] f:
             .terminator = [< "*" "}" >]
             .initiator = [< "{" "*" >]
             .separator = ","
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY "||"
     OF SUBTYPE ll::parser::table::typed_double_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{my attribute = {* a b c, d e, f *} ||}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": my attribute = {* f, [< a b c >], [< d e >] *}}
!@@@@ :=:
             .position[H] = PACKED_VEC
             my attribute = {* f, [< a b c >], [< d e >] *}
=== BRACKETED EXPRESSION: line ###:
{my attribute = {* a b c, d e, f *} ||}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": my attribute = {* f, [< a b c >], [< d e >] *}}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "{" "*" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "*" "}" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETABLE EXPRESSION: line ###:
{my attribute = {* *} ||}
                ^^^^^
    {}
!@@@@ :=:
             .separator = ","
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{my attribute = {* *} ||}
                ^^^^^
    {* *}
!@@@@ :=:
             .terminator = [< "*" "}" >]
             .initiator = [< "{" "*" >]
             .separator = ","
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY "||"
     OF SUBTYPE ll::parser::table::typed_double_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{my attribute = {* *} ||}
^^^^^^^^^^^^^^^^^^^^^^^^^
    {}
!@@@@ :=:
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{my attribute = {* *} ||}
^^^^^^^^^^^^^^^^^^^^^^^^^
    {}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "{" "*" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY [< "*" "}" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETABLE EXPRESSION: line ###:
{my attribute = {* , *} ||}
                ^^^^^^^
    {}
!@@@@ :=:
             .separator = ","
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{my attribute = {* , *} ||}
                ^^^^^^^
    {* *}
!@@@@ :=:
             .terminator = [< "*" "}" >]
             .initiator = [< "{" "*" >]
             .separator = ","
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY "||"
     OF SUBTYPE ll::parser::table::typed_double_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{my attribute = {* , *} ||}
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {}
!@@@@ :=:
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{my attribute = {* , *} ||}
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{my type: x = 5, y = "5" | a b c |}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my type: x = 5, y = "5"|a b c|my type}
!@@@@ := a b c:
             x = 5
             .type = [< my type >]
             y = "5"
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{my type: x = 5, y = "5" | a b c |}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my type: x = 5, y = "5"|a b c|my type}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "[" "<" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< ">" "]" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== DERIVED EXPRESSION: line ###:
{my type: x = 5 tomatoes, y = [< 5 tomatoes >]
                              ^^^^^^^^^^^^^^^^
    [< 5 tomatoes >]
!@@@@ := [< 5 tomatoes >]
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: lines ###-###:
{my type: x = 5 tomatoes, y = [< 5 tomatoes >]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
          | a b c |}
^^^^^^^^^^^^^^^^^^^^
    {my type: x = [< 5 tomatoes >], y = [< 5 tomatoes >]|a b c|my type}
!@@@@ := a b c:
             x = [< 5 tomatoes >]
             .type = [< my type >]
             y = [< 5 tomatoes >]
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ###-###:
{my type: x = 5 tomatoes, y = [< 5 tomatoes >]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
          | a b c |}
^^^^^^^^^^^^^^^^^^^^
    {my type: x = [< 5 tomatoes >], y = [< 5 tomatoes >]|a b c|my type}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "{" "*" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY [< "*" "}" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETABLE EXPRESSION: line ###:
{my type: x = {* A, B *}, y = {* , "A",, B, *}
              ^^^^^^^^^^
    {|A, B|}
!@@@@ := A B:
             .separator = ","
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{my type: x = {* A, B *}, y = {* , "A",, B, *}
              ^^^^^^^^^^
    {* A, B *}
!@@@@ := A B:
             .terminator = [< "*" "}" >]
             .initiator = [< "{" "*" >]
             .separator = ","
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "{" "*" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY [< "*" "}" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETABLE EXPRESSION: line ###:
{my type: x = {* A, B *}, y = {* , "A",, B, *}
                              ^^^^^^^^^^^^^^^^
    {|A, B|}
!@@@@ := A B:
             .separator = ","
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{my type: x = {* A, B *}, y = {* , "A",, B, *}
                              ^^^^^^^^^^^^^^^^
    {* A, B *}
!@@@@ := A B:
             .terminator = [< "*" "}" >]
             .initiator = [< "{" "*" >]
             .separator = ","
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: lines ###-###:
{my type: x = {* A, B *}, y = {* , "A",, B, *}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
          | a b c |}
^^^^^^^^^^^^^^^^^^^^
    {my type: x = {* A, B *}, y = {* A, B *}|a b c|my type}
!@@@@ := a b c:
             x = {* A, B *}
             .type = [< my type >]
             y = {* A, B *}
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ###-###:
{my type: x = {* A, B *}, y = {* , "A",, B, *}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
          | a b c |}
^^^^^^^^^^^^^^^^^^^^
    {my type: x = {* A, B *}, y = {* A, B *}|a b c|my type}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY [< "{" "*" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY [< "*" "}" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETABLE EXPRESSION: line ###:
{my type: y = {* ,, *} | a b c |}
              ^^^^^^^^
    {}
!@@@@ :=:
             .separator = ","
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{my type: y = {* ,, *} | a b c |}
              ^^^^^^^^
    {* *}
!@@@@ :=:
             .terminator = [< "*" "}" >]
             .initiator = [< "{" "*" >]
             .separator = ","
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{my type: y = {* ,, *} | a b c |}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my type|a b c|my type}
!@@@@ := a b c:
             .type = [< my type >]
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{my type: y = {* ,, *} | a b c |}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my type|a b c|my type}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [code] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{+ 1 2 3 +}
^^^^^^^^^^^
    {+ 1 2 3 +}
!@@@@ := 1 2 3:
             .type = "+"
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{+ 1 2 3 +}
^^^^^^^^^^^
    {+ 1 2 3 +}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{"+"| 1 2 3 |"+"}
^^^^^^^^^^^^^^^^^
    {+ 1 2 3 +}
!@@@@ := 1 2 3:
             .type = "+"
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{"+"| 1 2 3 |"+"}
^^^^^^^^^^^^^^^^^
    {+ 1 2 3 +}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [code] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{< 1 2 3 >}
^^^^^^^^^^^
    {< 1 2 3 >}
!@@@@ := 1 2 3:
             .type = [< "<" ">" >]
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{< 1 2 3 >}
^^^^^^^^^^^
    {< 1 2 3 >}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{"<" ">"| 1 2 3 |"<" ">"}
^^^^^^^^^^^^^^^^^^^^^^^^^
    {< 1 2 3 >}
!@@@@ := 1 2 3:
             .type = [< "<" ">" >]
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{"<" ">"| 1 2 3 |"<" ">"}
^^^^^^^^^^^^^^^^^^^^^^^^^
    {< 1 2 3 >}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "["
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY "]"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{x: y[+Y] = 44}
     ^^^^
    [+Y]
!@@@@ := +Y:
             .terminator = "]"
             .initiator = "["
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
{x: y[+Y] = 44}
^^^^^^^^^^^^^^^
    {x: y[+Y] = 44}
!@@@@ :=:
             .type = x
             y[+Y] = 44
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{x: y[+Y] = 44}
^^^^^^^^^^^^^^^
    {x: y[+Y] = 44}
!@@@@ :=:
             .type = x
             y[+Y] = 44
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{x: y[+Y] = 44}
^^^^^^^^^^^^^^^
    {x: y[+Y] = 44}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "["
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY "]"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{x: y[1,Y]}
     ^^^^^
    [1,Y]
!@@@@ := 1,Y:
             .terminator = "]"
             .initiator = "["
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
{x: y[1,Y]}
^^^^^^^^^^^
    {x: y[+Y]}
!@@@@ :=:
             .type = x
             y[+Y]
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{x: y[1,Y]}
^^^^^^^^^^^
    {x: y[+Y]}
!@@@@ :=:
             .type = x
             y[+Y]
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{x: y[1,Y]}
^^^^^^^^^^^
    {x: y[+Y]}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "["
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY "]"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{x: y[+,62], no y}
     ^^^^^^
    [+,62]
!@@@@ := +,62:
             .terminator = "]"
             .initiator = "["
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "no"
     OF SUBTYPE ll::parser::table::typed_attr_negator_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
{x: y[+,62], no y}
^^^^^^^^^^^^^^^^^^
    {x: y[+Y] = FALSE}
!@@@@ :=:
             .type = x
             y[+Y] = FALSE
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{x: y[+,62], no y}
^^^^^^^^^^^^^^^^^^
    {x: y[+Y] = FALSE}
!@@@@ :=:
             .type = x
             y[+Y] = FALSE
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{x: y[+,62], no y}
^^^^^^^^^^^^^^^^^^
    {x: y[+Y] = FALSE}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "["
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY "]"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{x: y[62,1], y}
     ^^^^^^
    [62,1]
!@@@@ := 62,1:
             .terminator = "]"
             .initiator = "["
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
{x: y[62,1], y}
^^^^^^^^^^^^^^^
    {x: y[+Y] = TRUE}
!@@@@ :=:
             .type = x
             y[+Y] = TRUE
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{x: y[62,1], y}
^^^^^^^^^^^^^^^
    {x: y[+Y] = TRUE}
!@@@@ :=:
             .type = x
             y[+Y] = TRUE
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{x: y[62,1], y}
^^^^^^^^^^^^^^^
    {x: y[+Y] = TRUE}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "("
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "|"
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "|"
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
ERROR: in line ###: missing closing bracket `)' inserted before `}':
{x: y = (z + w, v| m n |}
                        ^
=== BRACKETED EXPRESSION: line ###:
{x: y = (z + w, v| m n |}
        ^^^^^^^^^^^^^^^^
    (z + w "," v "|" m n "|")
!@@@@ := z "+" w "," v "|" m n "|":
             .terminator = ")"
             .initiator = "("
             .position[H] = PACKED_VEC
=== PREFIX EXPRESSION: line ###:
{x: y = (z + w, v| m n |}
^^^^^^^^^^^^^^^^^^^^^^^^^
    {x: y = (z + w "," v "|" m n "|")}
!@@@@ :=:
             .type = x
             y = @@@@
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{x: y = (z + w, v| m n |}
^^^^^^^^^^^^^^^^^^^^^^^^^
    {x: y = (z + w "," v "|" m n "|")}
!@@@@ :=:
             .type = x
             y = @@@@
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{x: y = (z + w, v| m n |}
^^^^^^^^^^^^^^^^^^^^^^^^^
    {x: y = (z + w "," v "|" m n "|")}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
the line before the outer paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the line before the outer paragraph
!@@@@ := the line before the outer paragraph:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::indentation_mark_type
=== BRACKETED EXPRESSION: line ###:
    the first line of the outer paragraph
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the first line of the outer paragraph
!@@@@ := the first line of the outer paragraph:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ###-###:
    the second line of the outer paragraph which
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        is continued on this indented line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the second line of the outer paragraph which is continued on this
        indented line
!@@@@
    := the second line of the outer paragraph which is continued on this
               indented line:
           .terminator = "<LF>"
           .position[H] = PACKED_VEC
           .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [LINE LEVEL, code] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::indentation_mark_type
=== BRACKETED EXPRESSION: line ###:
       the first line of the inner paragraph
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the first line of the inner paragraph
!@@@@ := the first line of the inner paragraph:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [LINE LEVEL, code] SELECTED KEY "("
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [code] SELECTED KEY ")"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
           (that begins with a horizontal tab)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    (that begins with a horizontal tab)
!@@@@ := that begins with a horizontal tab:
             .terminator = ")"
             .initiator = "("
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ###-###:
       the second line of the inner paragraph which
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
           is continued on this indented line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
           (that begins with a horizontal tab)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the second line of the inner paragraph which is continued on this
        indented line (that begins with a horizontal tab)
!@@@@
    := the second line of the inner paragraph which is continued on this
               indented line @@@@:
           .terminator = "<LF>"
           .position[H] = PACKED_VEC
           .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ###-###:
    an inner paragraph:
                      ^
       the first line of the inner paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       the second line of the inner paragraph which
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
           is continued on this indented line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
           (that begins with a horizontal tab)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|the
              first line of the inner paragraph|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|the
              second line of the inner paragraph which is continued on
              this indented line (that begins with a horizontal tab)|}|}
!@@@@ := @@@@ @@@@:
             .terminator = [$ INDENTED_PARAGRAPH $]
             .position[H] = PACKED_VEC
             .initiator = ":"
=== BRACKETED EXPRESSION: lines ###-###:
    an inner paragraph:
    ^^^^^^^^^^^^^^^^^^^
       the first line of the inner paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       the second line of the inner paragraph which
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
           is continued on this indented line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
           (that begins with a horizontal tab)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    an inner paragraph:
        the first line of the inner paragraph
        the second line of the inner paragraph which is continued on
            this indented line (that begins with a horizontal tab)
!@@@@ := an inner paragraph @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ###-###:
    the first line of the outer paragraph after the
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        inner paragraph
^^^^^^^^^^^^^^^^^^^^^^^
    the first line of the outer paragraph after the inner paragraph
!@@@@
    := the first line of the outer paragraph after the inner paragraph:
           .terminator = "<LF>"
           .position[H] = PACKED_VEC
           .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [LINE LEVEL, code] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [LINE LEVEL, code] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::indentation_mark_type
=== BRACKETED EXPRESSION: line ###:
    another inner paragraph, but one with zero lines:
                                                    ^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"}
!@@@@ :=:
             .terminator = [$ INDENTED_PARAGRAPH $]
             .position[H] = PACKED_VEC
             .initiator = ":"
=== BRACKETED EXPRESSION: line ###:
    another inner paragraph, but one with zero lines:
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    another inner paragraph "," but one with zero lines:
!@@@@ := another inner paragraph "," but one with zero lines @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
    the last line of the outer paragraph
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the last line of the outer paragraph
!@@@@ := the last line of the outer paragraph:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [LINE LEVEL, code] SELECTED KEY ";"
     OF SUBTYPE ll::parser::table::line_sep_type
=== BRACKETED EXPRESSION: lines ###-###:
    this logical line is followed by an empty logical
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         line;
^^^^^^^^^^^^^^
    this logical line is followed by an empty logical line;
!@@@@ := this logical line is followed by an empty logical line:
             .terminator = ";"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ###-###:
this is the outer paragraph:
                           ^
    the first line of the outer paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the second line of the outer paragraph which
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        is continued on this indented line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    an inner paragraph:
^^^^^^^^^^^^^^^^^^^^^^^
       the first line of the inner paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       the second line of the inner paragraph which
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
           is continued on this indented line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
           (that begins with a horizontal tab)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the first line of the outer paragraph after the
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        inner paragraph
^^^^^^^^^^^^^^^^^^^^^^^
    another inner paragraph, but one with zero lines:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the last line of the outer paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    this logical line is followed by an empty logical
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         line;
^^^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|the
              first line of the outer paragraph|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|the
              second line of the outer paragraph which is continued on
              this indented line|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|an
              inner paragraph
              {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator =
                   ":"|
                   {"": .terminator = "<LF>", .initiator =
                        [$ LOGICAL_LINE $]|the first line of the inner
                        paragraph|}
                   {"": .terminator = "<LF>", .initiator =
                        [$ LOGICAL_LINE $]|the second line of the inner
                        paragraph which is continued on this indented
                        line (that begins with a horizontal tab)|}|}|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|the
              first line of the outer paragraph after the inner
              paragraph|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              another inner paragraph "," but one with zero lines
              {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator =
                   ":"}|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|the
              last line of the outer paragraph|}
         {"": .terminator = ";", .initiator = [$ LOGICAL_LINE $]|this
              logical line is followed by an empty logical line|}|}
!@@@@ := @@@@ @@@@ @@@@ @@@@ @@@@ @@@@ @@@@:
             .terminator = [$ INDENTED_PARAGRAPH $]
             .position[H] = PACKED_VEC
             .initiator = ":"
=== BRACKETED EXPRESSION: lines ###-###:
this is the outer paragraph:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the first line of the outer paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the second line of the outer paragraph which
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        is continued on this indented line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    an inner paragraph:
^^^^^^^^^^^^^^^^^^^^^^^
       the first line of the inner paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       the second line of the inner paragraph which
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
           is continued on this indented line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
           (that begins with a horizontal tab)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the first line of the outer paragraph after the
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        inner paragraph
^^^^^^^^^^^^^^^^^^^^^^^
    another inner paragraph, but one with zero lines:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the last line of the outer paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    this logical line is followed by an empty logical
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         line;
^^^^^^^^^^^^^^
    this is the outer paragraph:
        the first line of the outer paragraph
        the second line of the outer paragraph which is continued on
            this indented line
        an inner paragraph:
            the first line of the inner paragraph
            the second line of the inner paragraph which is continued on
                this indented line (that begins with a horizontal tab)
        the first line of the outer paragraph after the inner paragraph
        another inner paragraph "," but one with zero lines:
        the last line of the outer paragraph
        this logical line is followed by an empty logical line;
!@@@@ := this is the outer paragraph @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
the line after the outer paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the line after the outer paragraph
!@@@@ := the line after the outer paragraph:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: a = 1, b = 2, c = 3, d = 4 | X Y Z |}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: d = 4, a = 1, b = 2, c = 3|X Y Z|T}
!@@@@ := X Y Z:
             d = 4
             .type = T
             a = 1
             b = 2
             c = 3
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: a = 1, b = 2, c = 3, d = 4 | X Y Z |}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: d = 4, a = 1, b = 2, c = 3|X Y Z|T}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: a = 1, b = 2, c = 3 | X Y Z | d = 4 }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: d = 4, a = 1, b = 2, c = 3|X Y Z|T}
!@@@@ := X Y Z:
             d = 4
             .type = T
             a = 1
             b = 2
             c = 3
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: a = 1, b = 2, c = 3 | X Y Z | d = 4 }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: d = 4, a = 1, b = 2, c = 3|X Y Z|T}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: a = 1, b = 2 | X Y | c = 3 | Z | d = 4 }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: d = 4, a = 1, b = 2, c = 3|X Y Z|T}
!@@@@ := X Y Z:
             d = 4
             .type = T
             a = 1
             b = 2
             c = 3
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: a = 1, b = 2 | X Y | c = 3 | Z | d = 4 }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: d = 4, a = 1, b = 2, c = 3|X Y Z|T}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: a = 1, b = 2 | X Y | c = 3, d = 4 | Z | }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: d = 4, a = 1, b = 2, c = 3|X Y Z|T}
!@@@@ := X Y Z:
             d = 4
             .type = T
             a = 1
             b = 2
             c = 3
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: a = 1, b = 2 | X Y | c = 3, d = 4 | Z | }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: d = 4, a = 1, b = 2, c = 3|X Y Z|T}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::typed_attr_begin_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{T: a = 1 | X | b = 2 | Y | c = 3, d = 4 | Z | }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: d = 4, a = 1, b = 2, c = 3|X Y Z|T}
!@@@@ := X Y Z:
             d = 4
             .type = T
             a = 1
             b = 2
             c = 3
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{T: a = 1 | X | b = 2 | Y | c = 3, d = 4 | Z | }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {T: d = 4, a = 1, b = 2, c = 3|X Y Z|T}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
{x} this is a line:
^^^
    {x}
!@@@@ :=:
             .type = x
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::indentation_mark_type
BRACKETED PARSER FOUND [LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
         has an {x} unrecognized because it
                ^^^
    {x}
!@@@@ :=:
             .type = x
             .position[H] = PACKED_VEC
ERROR: in line ###: prefix separator of type `x' not at beginning of
       subexpression and does not continue subexpression started by
       another prefix with the same type or group; prefix unrecognized:
         has an {x} unrecognized because it
                ^^^
BRACKETED PARSER FOUND [LINE LEVEL, code] SELECTED KEY "`"
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [text] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
         the outer `{x}'
                    ^^^
    {x}
!@@@@ :=:
             .type = x
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [text] SELECTED KEY "'"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
         the outer `{x}'
                    ^^^
    {x}
!@@@@ :=:
             .type = x
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
         the outer `{x}'
                   ^^^^^
    `{x}'
!@@@@ := @@@@:
             .terminator = "'"
             .initiator = "`"
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ###-###:
    with an indented paragraph that
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         has an {x} unrecognized because it
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         is not in the same logical line as
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         the outer `{x}'
^^^^^^^^^^^^^^^^^^^^^^^^
    with an indented paragraph that has an {x} unrecognized because it
        is not in the same logical line as the outer `{x}'
!@@@@
    := with an indented paragraph that has an @@@@ unrecognized because
               it is not in the same logical line as the outer @@@@:
           .terminator = "<LF>"
           .position[H] = PACKED_VEC
           .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ###-###:
{x} this is a line:
                  ^
    with an indented paragraph that
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         has an {x} unrecognized because it
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         is not in the same logical line as
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         the outer `{x}'
^^^^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|with
              an indented paragraph that has an {x} unrecognized because
              it is not in the same logical line as the outer `{x}'|}|}
!@@@@ := @@@@:
             .terminator = [$ INDENTED_PARAGRAPH $]
             .position[H] = PACKED_VEC
             .initiator = ":"
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
  but this {x} is
           ^^^
    {x}
!@@@@ :=:
             .type = x
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ###-###:
{x} this is a line:
^^^^^^^^^^^^^^^^^^^
    with an indented paragraph that
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         has an {x} unrecognized because it
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         is not in the same logical line as
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         the outer `{x}'
^^^^^^^^^^^^^^^^^^^^^^^^
  but this {x} is
^^^^^^^^^^
    {x|this is a line
       {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
            {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
                 with an indented paragraph that has an {x} unrecognized
                 because it is not in the same logical line as the outer
                 `{x}'|}|} but this|x}
!@@@@ := this is a line @@@@ but this:
             .type = x
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
  but this {x} is
           ^^^^^^
    {x|is|x}
!@@@@ := is:
             .type = x
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ###-###:
{x} this is a line:
^^^^^^^^^^^^^^^^^^^
    with an indented paragraph that
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         has an {x} unrecognized because it
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         is not in the same logical line as
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         the outer `{x}'
^^^^^^^^^^^^^^^^^^^^^^^^
  but this {x} is
^^^^^^^^^^^^^^^^^
    {x|this is a line
       {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
            {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
                 with an indented paragraph that has an {x} unrecognized
                 because it is not in the same logical line as the outer
                 `{x}'|}|} but this|x} {x|is|x}
!@@@@ := @@@@ @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
@<> this is some data
^^^^^^^^^^^^^^^^^^^^^
    {*DATA*|@<> this is some data|*DATA*}
!@@@@ := "@<>" this is some data:
             .position[H] = PACKED_VEC
             .type = *DATA*
=== BRACKETED EXPRESSION: line ###:
@<> this is some data
^^^^^^^^^^^^^^^^^^^^^
    {*DATA*|@<> this is some data|*DATA*}
!@@@@ := "@<>" this is some data:
             .position[H] = PACKED_VEC
             .type = *DATA*
=== BRACKETED EXPRESSION: line ###:
!@<> this is some raw data
^^^^^^^^^^^^^^^^^^^^^^^^^^
    {*RAW* *DATA*|@<> this is some raw data|*RAW* *DATA*}
!@@@@ := "@<>" this is some raw data:
             .position[H] = PACKED_VEC
             .type = [< *RAW* *DATA* >]
=== BRACKETED EXPRESSION: line ###:
!@<> this is some raw data
^^^^^^^^^^^^^^^^^^^^^^^^^^
    {*RAW* *DATA*|@<> this is some raw data|*RAW* *DATA*}
!@@@@ := "@<>" this is some raw data:
             .position[H] = PACKED_VEC
             .type = [< *RAW* *DATA* >]
=== BRACKETED EXPRESSION: line ###:
!!@<> this is something else
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    !!@<> this is something else
!@@@@ := "!!@<>" this is something else:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
======================
^^^^^^^^^^^^^^^^^^^^^^
    {row|======================|row}
!@@@@ := "======================":
             .position[H] = PACKED_VEC
             .type = row
=== BRACKETED EXPRESSION: line ###:
======================
^^^^^^^^^^^^^^^^^^^^^^
    {table|{row|======================|row}|table}
!@@@@ := @@@@:
             .position[H] = PACKED_VEC
             .type = table
BRACKETED PARSER FOUND [text] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "|"
BRACKETED PARSER FOUND [text] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "|"
=== BRACKETED EXPRESSION: line ###:
| this is a row |
^^^^^^^^^^^^^^^^^
    {row|"|" this is a row "|"|row}
!@@@@ := "|" this is a row "|":
             .position[H] = PACKED_VEC
             .type = row
=== BRACKETED EXPRESSION: line ###:
======================
^^^^^^^^^^^^^^^^^^^^^^
    {row|======================|row}
!@@@@ := "======================":
             .position[H] = PACKED_VEC
             .type = row
=== BRACKETED EXPRESSION: lines ###-###:
======================
^^^^^^^^^^^^^^^^^^^^^^
| this is a row |
^^^^^^^^^^^^^^^^^
======================
^^^^^^^^^^^^^^^^^^^^^^
    {table|{row|======================|row}
           {row|"|" this is a row "|"|row}
           {row|======================|row}|table}
!@@@@ := @@@@ @@@@ @@@@:
             .position[H] = PACKED_VEC
             .type = table
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::indentation_mark_type
=== BRACKETED EXPRESSION: line ###:
    Containing a table.
    ^^^^^^^^^^^^^^^^^^^
    Containing a table "."
!@@@@ := Containing a table ".":
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
    =======================
    ^^^^^^^^^^^^^^^^^^^^^^^
    {row|=======================|row}
!@@@@ := "=======================":
             .position[H] = PACKED_VEC
             .type = row
=== BRACKETED EXPRESSION: line ###:
    =======================
    ^^^^^^^^^^^^^^^^^^^^^^^
    {table|{row|=======================|row}|table}
!@@@@ := @@@@:
             .position[H] = PACKED_VEC
             .type = table
BRACKETED PARSER FOUND [text] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "|"
BRACKETED PARSER FOUND [text] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "|"
=== BRACKETED EXPRESSION: line ###:
    | this is another row |
    ^^^^^^^^^^^^^^^^^^^^^^^
    {row|"|" this is another row "|"|row}
!@@@@ := "|" this is another row "|":
             .position[H] = PACKED_VEC
             .type = row
=== BRACKETED EXPRESSION: line ###:
    =======================
    ^^^^^^^^^^^^^^^^^^^^^^^
    {row|=======================|row}
!@@@@ := "=======================":
             .position[H] = PACKED_VEC
             .type = row
=== BRACKETED EXPRESSION: lines ###-###:
    =======================
    ^^^^^^^^^^^^^^^^^^^^^^^
    | this is another row |
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    =======================
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {table|{row|=======================|row}
           {row|"|" this is another row "|"|row}
           {row|=======================|row}|table}
!@@@@ := @@@@ @@@@ @@@@:
             .position[H] = PACKED_VEC
             .type = table
=== BRACKETED EXPRESSION: lines ###-###:
This is a paragraph:
                   ^
<BLANK-LINE>
^^^^^^^^^^^^
    Containing a table.
^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^^^^^^^^^^^^
    =======================
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | this is another row |
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    =======================
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              Containing a table "."|}
         {table|{row|=======================|row}
                {row|"|" this is another row "|"|row}
                {row|=======================|row}|table}|}
!@@@@ := @@@@ @@@@:
             .terminator = [$ INDENTED_PARAGRAPH $]
             .position[H] = PACKED_VEC
             .initiator = ":"
=== BRACKETED EXPRESSION: lines ###-###:
This is a paragraph:
^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^^^^^^^^^^^^
    Containing a table.
^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^^^^^^^^^^^^
    =======================
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | this is another row |
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    =======================
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    This is a paragraph:
        Containing a table "."
        {table|{row|=======================|row}
               {row|"|" this is another row "|"|row}
               {row|=======================|row}|table}
!@@@@ := This is a paragraph @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "("
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "|"
BRACKETED PARSER FOUND [code] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "|"
BRACKETED PARSER FOUND [code] SELECTED KEY ")"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: lines ###-###:
This is a bracketed expression (
                               ^
    ==============================
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | containing yet another row |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ==============================
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
^^^^^
    (============================== "|" containing yet another row "|"
     ==============================)
!@@@@
    := "==============================" "|" containing yet another row
               "|" "==============================":
           .terminator = ")"
           .initiator = "("
           .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ###-###:
This is a bracketed expression (
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ==============================
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | containing yet another row |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ==============================
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
^^^^^
    This is a bracketed expression
        (============================== "|" containing yet another row
         "|" ==============================)
!@@@@ := This is a bracketed expression @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
@@ := A B C
^^^^^^^^^^^
    {*DATA*|A B C|*DATA*}
!@@@@ := A B C:
             .position[H] = PACKED_VEC
             .type = *DATA*
=== BRACKETED EXPRESSION: line ###:
@@ := A B C
^^^^^^^^^^^
    {|A B C|}
!@@@@ := A B C:
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND
    [TOP LEVEL, LINE LEVEL, code, data paragraph] SELECTED KEY ":"
     OF SUBTYPE ll::parser::table::indentation_mark_type
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "="
=== BRACKETED EXPRESSION: line ###:
        foo = P
        ^^^^^^^
    foo = P
!@@@@ := foo "=" P:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "="
=== BRACKETED EXPRESSION: line ###:
        fum = Q R T
        ^^^^^^^^^^^
    fum = Q R T
!@@@@ := fum "=" Q R T:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "="
=== BRACKETED EXPRESSION: line ###:
        fee = @@
        ^^^^^^^^
    fee = {|A B C|}
!@@@@ := fee "=" @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "="
=== BRACKETED EXPRESSION: line ###:
        foe = @@
        ^^^^^^^^
    foe = PREALLOCATED(1*7)
!@@@@ := foe "=" PREALLOCATED(1*7):
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "="
=== BRACKETED EXPRESSION: line ###:
        fie = @@
        ^^^^^^^^
    fie = PREALLOCATED(1*8)
!@@@@ := fie "=" PREALLOCATED(1*8):
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "="
BRACKETED PARSER FOUND [data] SELECTED KEY [< "{" "*" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY [< "*" "}" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETABLE EXPRESSION: line ###:
        mie = {* X, Y, Z *}
              ^^^^^^^^^^^^^
    {|X, Y, Z|}
!@@@@ := X Y Z:
             .separator = ","
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
        mie = {* X, Y, Z *}
              ^^^^^^^^^^^^^
    {* X, Y, Z *}
!@@@@ := X Y Z:
             .terminator = [< "*" "}" >]
             .initiator = [< "{" "*" >]
             .separator = ","
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
        mie = {* X, Y, Z *}
        ^^^^^^^^^^^^^^^^^^^
    mie = {* X, Y, Z *}
!@@@@ := mie "=" @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [data] SELECTED KEY "="
     OF SUBTYPE ll::parser::table::typed_attr_equal_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY "="
BRACKETED PARSER FOUND [data] SELECTED KEY [< "{" "*" >]
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY [< "*" "}" >]
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETABLE EXPRESSION: line ###:
        moe = {* @@, @@, @@ *}
              ^^^^^^^^^^^^^^^^
    {|{|A B C|}, PREALLOCATED(2*7), PREALLOCATED(2*8)|}
!@@@@ := @@@@ PREALLOCATED(2*7) PREALLOCATED(2*8):
             .separator = ","
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
        moe = {* @@, @@, @@ *}
              ^^^^^^^^^^^^^^^^
    {* {|A B C|}, PREALLOCATED(2*7), PREALLOCATED(2*8) *}
!@@@@ := @@@@ PREALLOCATED(2*7) PREALLOCATED(2*8):
             .terminator = [< "*" "}" >]
             .initiator = [< "{" "*" >]
             .separator = ","
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
        moe = {* @@, @@, @@ *}
        ^^^^^^^^^^^^^^^^^^^^^^
    moe = {* {|A B C|}, PREALLOCATED(2*7), PREALLOCATED(2*8) *}
!@@@@ := moe "=" @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ###-###:
@@ := 1 2 3 :
            ^
        foo = P
^^^^^^^^^^^^^^^
        fum = Q R T
^^^^^^^^^^^^^^^^^^^
        fee = @@
^^^^^^^^^^^^^^^^
        foe = @@
^^^^^^^^^^^^^^^^
        fie = @@
^^^^^^^^^^^^^^^^
        mie = {* X, Y, Z *}
^^^^^^^^^^^^^^^^^^^^^^^^^^^
        moe = {* @@, @@, @@ *}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|foo
              = P|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|fum
              = Q R T|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|fee
              = {|A B C|}|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|foe
              = PREALLOCATED(2*7)|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|fie
              = PREALLOCATED(2*8)|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|mie
              = {* X, Y, Z *}|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|moe
              = {* {|A B C|}, PREALLOCATED(2*7), PREALLOCATED(2*8) *}|}|}
!@@@@ := @@@@ @@@@ @@@@ @@@@ @@@@ @@@@ @@@@:
             .terminator = [$ INDENTED_PARAGRAPH $]
             .position[H] = PACKED_VEC
             .initiator = ":"
=== BRACKETED EXPRESSION: line ###:
@@ := 1 2 3 :
^^^^^^^^^^^
    {*DATA*|1 2 3|*DATA*}
!@@@@ := 1 2 3:
             .position[H] = PACKED_VEC
             .type = *DATA*
=== BRACKETED EXPRESSION: lines ###-###:
@@ := 1 2 3 :
^^^^^^^^^^^^^
        foo = P
^^^^^^^^^^^^^^^
        fum = Q R T
^^^^^^^^^^^^^^^^^^^
        fee = @@
^^^^^^^^^^^^^^^^
        foe = @@
^^^^^^^^^^^^^^^^
        fie = @@
^^^^^^^^^^^^^^^^
        mie = {* X, Y, Z *}
^^^^^^^^^^^^^^^^^^^^^^^^^^^
        moe = {* @@, @@, @@ *}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": moe = {* PREALLOCATED(2*8), {|A B C|}, PREALLOCATED(2*7) *},
         foo = P, fie = PREALLOCATED(2*8), fum = [< Q R T >], foe =
         PREALLOCATED(2*7), fee = {|A B C|}, mie = {* Z, X, Y *}|1 2 3|}
!@@@@ := 1 2 3:
             moe = {* PREALLOCATED(2*8), @@@@, PREALLOCATED(2*7) *}
             foo = P
             fie = PREALLOCATED(2*8)
             .position[H] = PACKED_VEC
             fum = [< Q R T >]
             foe = PREALLOCATED(2*7)
             fee = @@@@
             mie = {* Z, X, Y *}
BRACKETED PARSER FOUND
    [TOP LEVEL, LINE LEVEL, code, data paragraph] SELECTED KEY "("
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [code, data paragraph] SELECTED KEY ")"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
@@ := (Z)
      ^^^
    (Z)
!@@@@ := Z:
             .terminator = ")"
             .initiator = "("
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
@@ := (Z)
^^^^^^^^^
    {*DATA*|(Z)|*DATA*}
!@@@@ := @@@@:
             .position[H] = PACKED_VEC
             .type = *DATA*
=== BRACKETED EXPRESSION: line ###:
@@ := (Z)
^^^^^^^^^
    (Z)
!@@@@ := Z:
             .terminator = ")"
             .initiator = "("
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
@@ := XYZ
^^^^^^^^^
    {*DATA*|XYZ|*DATA*}
!@@@@ := XYZ:
             .position[H] = PACKED_VEC
             .type = *DATA*
=== BRACKETED EXPRESSION: line ###:
@@ := XYZ
^^^^^^^^^
    {|XYZ|}
!@@@@ := XYZ:
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
ID 6 is @@
^^^^^^^^^^
    ID 6 is
        {"": moe = {* {|XYZ|}, {|A B C|}, (Z) *}, foo = P, fie =
             {|XYZ|}, fum = [< Q R T >], foe = (Z), fee = {|A B C|},
             mie = {* Z, X, Y *}|1 2 3|}
!@@@@ := ID 6 is @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
ID 8 is @@
^^^^^^^^^^
    ID 8 is {|XYZ|}
!@@@@ := ID 8 is @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== PREFIX EXPRESSION: line ###:
{*DATA*} @@ := M N P
^^^^^^^^
    {*DATA*}
!@@@@ :=:
             .type = *DATA*
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{*DATA*} @@ := M N P
^^^^^^^^^^^^^^^^^^^^
    {*DATA*|M N P|*DATA*}
!@@@@ := M N P:
             .type = *DATA*
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{*DATA*} @@ := M N P
^^^^^^^^^^^^^^^^^^^^
    {|M N P|}
!@@@@ := M N P:
             .position[H] = PACKED_VEC
BRACKETED PARSER FOUND [TOP LEVEL, LINE LEVEL, code] SELECTED KEY "{"
     OF SUBTYPE ll::parser::table::typed_opening_type
BRACKETED PARSER FOUND [data] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND
    [TOP LEVEL, LINE LEVEL, code, data paragraph] SELECTED KEY "|"
     OF SUBTYPE ll::parser::table::typed_middle_type
BRACKETED PARSER FOUND [data] SELECTED KEY "}"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
{*DATA*| @@@ := A B C|}
^^^^^^^^^^^^^^^^^^^^^^^
    {*DATA*|PREALLOCATED(1*10) := A B C|*DATA*}
!@@@@ := PREALLOCATED(1*10) ":=" A B C:
             .type = *DATA*
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{*DATA*| @@@ := A B C|}
^^^^^^^^^^^^^^^^^^^^^^^
    {*DATA*|PREALLOCATED(1*10) := A B C|*DATA*}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
ID 9 is @@
^^^^^^^^^^
    ID 9 is {|M N P|}
!@@@@ := ID 9 is @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
ID 10 is @@@
^^^^^^^^^^^^
    ID 10 is PREALLOCATED(2*10)
!@@@@ := ID 10 is PREALLOCATED(2*10):
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
BRACKETED PARSER FOUND
    [TOP LEVEL, LINE LEVEL, code] SELECTED KEY [< "*PARSER*" ":" >]
     OF SUBTYPE ll::parser::table::indentation_mark_type
BRACKETED PARSER FOUND [data] SELECTED KEY "["
     OF SUBTYPE ll::parser::table::opening_bracket_type
BRACKETED PARSER FOUND [data] SELECTED KEY ","
     OF SUBTYPE ll::parser::table::typed_attr_sep_type
BRACKETED SUBEXPRESSION PARSER REJECTED KEY ","
BRACKETED PARSER FOUND [data] SELECTED KEY "]"
     OF SUBTYPE ll::parser::table::closing_bracket_type
=== BRACKETED EXPRESSION: line ###:
    trace [- bracketed subexpressions, - keys]
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    [- bracketed subexpressions "," - keys]
!@@@@ := "-" bracketed subexpressions "," "-" keys:
             .terminator = "]"
             .initiator = "["
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
    trace [- bracketed subexpressions, - keys]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    trace [- bracketed subexpressions "," - keys]
!@@@@ := trace @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ###-###:
*PARSER*:
^^^^^^^^^
    trace [- bracketed subexpressions, - keys]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator =
         [< *PARSER* ":" >]|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              trace [- bracketed subexpressions "," - keys]|}|}
!@@@@ := @@@@:
             .terminator = [$ INDENTED_PARAGRAPH $]
             .position[H] = PACKED_VEC
             .initiator = [< *PARSER* ":" >]
ERROR: in line ###: prefix separator of type `foo' not at beginning of
       subexpression and does not continue subexpression started by
       another prefix with the same type or group; prefix unrecognized:
{foo} sentence.
^^^^^
=== BRACKETED EXPRESSION: lines ###-###:
{p} {s} This is a sentence. {s}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
And another.  {s} And yet another
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{foo} sentence.
^^^^^^^^^^^^^^^
    {p|{s: .terminator = "."|This is a sentence|s}
       {s: .terminator = "."|And another|s}
       {s: .terminator = "."|And yet another {foo} sentence|s}|p}
!@@@@ := @@@@ @@@@ @@@@:
             .type = p
             .position[H] = PACKED_VEC
!@@@@ := This is a sentence:
             .terminator = "."
             .type = s
             .position[H] = PACKED_VEC
!@@@@ := And another:
             .terminator = "."
             .type = s
             .position[H] = PACKED_VEC
!@@@@ := And yet another @@@@ sentence:
             .terminator = "."
             .type = s
             .position[H] = PACKED_VEC
!@@@@ :=:
             .type = foo
             .position[H] = PACKED_VEC
ERROR: in line ###: prefix separator of type `foo' not at beginning of
       subexpression and does not continue subexpression started by
       another prefix with the same type or group; prefix unrecognized:
    {foo} sentence.
    ^^^^^
=== BRACKETED EXPRESSION: lines ###-###:
{P} {S} This is a sentence. {S}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    And another.  {S} And yet another
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {foo} sentence.
^^^^^^^^^^^^^^^^^^^
    {P|{S|This is a sentence "."|S} {S|And another "."|S}
       {S|And yet another {foo} sentence "."|S}|P}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
!@@@@ := @@@@ @@@@ @@@@:
             .type = P
             .position[H] = PACKED_VEC
!@@@@ := This is a sentence ".":
             .type = S
             .position[H] = PACKED_VEC
!@@@@ := And another ".":
             .type = S
             .position[H] = PACKED_VEC
!@@@@ := And yet another @@@@ sentence ".":
             .type = S
             .position[H] = PACKED_VEC
!@@@@ :=:
             .type = foo
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ###-###:
{itemize: indent = 5em, mark = "*"}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{item} 1 chicken
^^^^^^^^^^^^^^^^
{item} 1 tablespoon olive oil
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{item} 1 tablespoon paprika
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {itemize: indent = 5em, mark = "*"|{item|1 chicken|item}
              {item|1 tablespoon olive oil|item}
              {item|1 tablespoon paprika|item}|itemize}
!@@@@ := @@@@ @@@@ @@@@:
             indent = 5em
             .type = itemize
             mark = "*"
             .position[H] = PACKED_VEC
!@@@@ := 1 chicken:
             .type = item
             .position[H] = PACKED_VEC
!@@@@ := 1 tablespoon olive oil:
             .type = item
             .position[H] = PACKED_VEC
!@@@@ := 1 tablespoon paprika:
             .type = item
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ###-###:
{itemize: indent = 5em, mark = "*"|
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {item | 1 chicken |}
^^^^^^^^^^^^^^^^^^^^^^^^
    {item | 1 tablespoon olive oil |}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {item | 1 tablespoon paprika |} |}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {itemize: indent = 5em, mark = "*"|{item|1 chicken|item}
              {item|1 tablespoon olive oil|item}
              {item|1 tablespoon paprika|item}|itemize}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
!@@@@ := @@@@ @@@@ @@@@:
             indent = 5em
             .type = itemize
             mark = "*"
             .position[H] = PACKED_VEC
!@@@@ := 1 chicken:
             .type = item
             .position[H] = PACKED_VEC
!@@@@ := 1 tablespoon olive oil:
             .type = item
             .position[H] = PACKED_VEC
!@@@@ := 1 tablespoon paprika:
             .type = item
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ###-###:
{itemize: indent = 5em, mark = "*"}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1 chicken
^^^^^^^^^
1 tablespoon olive oil
^^^^^^^^^^^^^^^^^^^^^^
1 tablespoon paprika
^^^^^^^^^^^^^^^^^^^^
    {itemize: indent = 5em, mark = "*"|{item|1 chicken|item}
              {item|1 tablespoon olive oil|item}
              {item|1 tablespoon paprika|item}|itemize}
!@@@@ := @@@@ @@@@ @@@@:
             indent = 5em
             .type = itemize
             mark = "*"
             .position[H] = PACKED_VEC
!@@@@ := 1 chicken:
             .type = item
             .position[H] = PACKED_VEC
!@@@@ := 1 tablespoon olive oil:
             .type = item
             .position[H] = PACKED_VEC
!@@@@ := 1 tablespoon paprika:
             .type = item
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
a potato
^^^^^^^^
    a potato
!@@@@ := a potato:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
1 tablespoon butter
^^^^^^^^^^^^^^^^^^^
    1 tablespoon butter
!@@@@ := 1 tablespoon butter:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ###-###:
{itemize: indent = 5em, mark = "*", label = "STICKY"}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1 chicken
^^^^^^^^^
1 tablespoon olive oil
^^^^^^^^^^^^^^^^^^^^^^
1 tablespoon paprika
^^^^^^^^^^^^^^^^^^^^
    {itemize: label = STICKY, indent = 5em, mark = "*"|
              {item|1 chicken|item} {item|1 tablespoon olive oil|item}
              {item|1 tablespoon paprika|item}|itemize}
!@@@@ := @@@@ @@@@ @@@@:
             label = STICKY
             indent = 5em
             .type = itemize
             mark = "*"
             .position[H] = PACKED_VEC
!@@@@ := 1 chicken:
             .type = item
             .position[H] = PACKED_VEC
!@@@@ := 1 tablespoon olive oil:
             .type = item
             .position[H] = PACKED_VEC
!@@@@ := 1 tablespoon paprika:
             .type = item
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ###-###:
a potato
^^^^^^^^
1 tablespoon butter
^^^^^^^^^^^^^^^^^^^
    {itemize: label = STICKY, indent = 5em, mark = "*"|
              {item|a potato|item}
              {item|1 tablespoon butter|item}|itemize}
!@@@@ := @@@@ @@@@:
             label = STICKY
             indent = 5em
             .type = itemize
             mark = "*"
             .position[H] = PACKED_VEC
!@@@@ := a potato:
             .type = item
             .position[H] = PACKED_VEC
!@@@@ := 1 tablespoon butter:
             .type = item
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
line #
^^^^^^
    line #
!@@@@ := line #:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
line #
^^^^^^
    line #
!@@@@ := line #:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
ERROR: in line ###: non-comments after isolated header; ignored:
{***}line #
     ^^^^^^
=== BRACKETED EXPRESSION: lines ###-###:
{itemize: indent = 5em, mark = "*",
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
          label = "CONTINUING"}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1 chicken
^^^^^^^^^
1 tablespoon olive oil
^^^^^^^^^^^^^^^^^^^^^^
1 tablespoon paprika
^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^^^^^^^^^^^^
a potato
^^^^^^^^
1 tablespoon butter
^^^^^^^^^^^^^^^^^^^
    {itemize: label = CONTINUING, indent = 5em, mark = "*"|
              {item|1 chicken|item} {item|1 tablespoon olive oil|item}
              {item|1 tablespoon paprika|item} {item|a potato|item}
              {item|1 tablespoon butter|item}|itemize}
!@@@@ := @@@@ @@@@ @@@@ @@@@ @@@@:
             label = CONTINUING
             indent = 5em
             .type = itemize
             mark = "*"
             .position[H] = PACKED_VEC
!@@@@ := 1 chicken:
             .type = item
             .position[H] = PACKED_VEC
!@@@@ := 1 tablespoon olive oil:
             .type = item
             .position[H] = PACKED_VEC
!@@@@ := 1 tablespoon paprika:
             .type = item
             .position[H] = PACKED_VEC
!@@@@ := a potato:
             .type = item
             .position[H] = PACKED_VEC
!@@@@ := 1 tablespoon butter:
             .type = item
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
line #
^^^^^^
    line #
!@@@@ := line #:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ###-###:
{itemize: indent = 5em, mark = "*"}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{item} 1 chicken
^^^^^^^^^^^^^^^^
{item} 1 tablespoon olive oil
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{item} 1 tablespoon paprika
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {itemize: indent = 5em, mark = "*"|{item|1 chicken|item}
              {item|1 tablespoon olive oil|item}
              {item|1 tablespoon paprika|item}|itemize}
!@@@@ := @@@@ @@@@ @@@@:
             indent = 5em
             .type = itemize
             mark = "*"
             .position[H] = PACKED_VEC
!@@@@ := 1 chicken:
             .type = item
             .position[H] = PACKED_VEC
!@@@@ := 1 tablespoon olive oil:
             .type = item
             .position[H] = PACKED_VEC
!@@@@ := 1 tablespoon paprika:
             .type = item
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ###-###:
a potato
^^^^^^^^
1 tablespoon butter
^^^^^^^^^^^^^^^^^^^
    {itemize: indent = 5em, mark = "*"|{item|a potato|item}
              {item|1 tablespoon butter|item}|itemize}
!@@@@ := @@@@ @@@@:
             indent = 5em
             .type = itemize
             mark = "*"
             .position[H] = PACKED_VEC
!@@@@ := a potato:
             .type = item
             .position[H] = PACKED_VEC
!@@@@ := 1 tablespoon butter:
             .type = item
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ###-###:
=============
^^^^^^^^^^^^^
| 1 chicken |
^^^^^^^^^^^^^
=============
^^^^^^^^^^^^^
| 1 tablespoon olive oil |
^^^^^^^^^^^^^^^^^^^^^^^^^^
-
^
| 1 tablespoon paprika
^^^^^^^^^^^^^^^^^^^^^^
=
^
    {table|{row|=============|row} {row|"|" 1 chicken "|"|row}
           {row|=============|row}
           {row|"|" 1 tablespoon olive oil "|"|row} {row|-|row}
           {row|"|" 1 tablespoon paprika|row} {row|=|row}|table}
!@@@@ := @@@@ @@@@ @@@@ @@@@ @@@@ @@@@ @@@@:
             .position[H] = PACKED_VEC
             .type = table
!@@@@ := "=============":
             .position[H] = PACKED_VEC
             .type = row
!@@@@ := "|" 1 chicken "|":
             .position[H] = PACKED_VEC
             .type = row
!@@@@ := "=============":
             .position[H] = PACKED_VEC
             .type = row
!@@@@ := "|" 1 tablespoon olive oil "|":
             .position[H] = PACKED_VEC
             .type = row
!@@@@ := "-":
             .position[H] = PACKED_VEC
             .type = row
!@@@@ := "|" 1 tablespoon paprika:
             .position[H] = PACKED_VEC
             .type = row
!@@@@ := "=":
             .position[H] = PACKED_VEC
             .type = row
=== BRACKETED EXPRESSION: line ###:
-5 is a negative number
^^^^^^^^^^^^^^^^^^^^^^^
    -5 is a negative number
!@@@@ := -5 is a negative number:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
{section} This is a section.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {section|{s: .terminator = "."|This is a section|s}|section}
!@@@@ := @@@@:
             .type = section
             .position[H] = PACKED_VEC
!@@@@ := This is a section:
             .terminator = "."
             .position[H] = PACKED_VEC
             .type = s
=== BRACKETED EXPRESSION: lines ###-###:
{p}
^^^
This is the first paragraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {p|{s: .terminator = "."|This is the first paragraph|s}|p}
!@@@@ := @@@@:
             .type = p
             .position[H] = PACKED_VEC
!@@@@ := This is the first paragraph:
             .terminator = "."
             .position[H] = PACKED_VEC
             .type = s
=== BRACKETED EXPRESSION: lines ###-###:
{p}
^^^
This is the second
^^^^^^^^^^^^^^^^^^
paragraph.  Which has several
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
sentences.
^^^^^^^^^^
    {p|{s: .terminator = "."|This is the second paragraph|s}
       {s: .terminator = "."|Which has several sentences|s}|p}
!@@@@ := @@@@ @@@@:
             .type = p
             .position[H] = PACKED_VEC
!@@@@ := This is the second paragraph:
             .terminator = "."
             .position[H] = PACKED_VEC
             .type = s
!@@@@ := Which has several sentences:
             .terminator = "."
             .position[H] = PACKED_VEC
             .type = s
=== BRACKETED EXPRESSION: line ###:
This is a code line.
^^^^^^^^^^^^^^^^^^^^
    This is a code line "."
!@@@@ := This is a code line ".":
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ###-###:
{p}This is the
^^^^^^^^^^^^^^
third paragraph.
^^^^^^^^^^^^^^^^
    {p|{s: .terminator = "."|This is the third paragraph|s}|p}
!@@@@ := @@@@:
             .type = p
             .position[H] = PACKED_VEC
!@@@@ := This is the third paragraph:
             .terminator = "."
             .position[H] = PACKED_VEC
             .type = s
WARNING: in line ###: logical line begins at an indent that is greater
         than the current paragraph indent:
    {quote}
    ^
=== BRACKETED EXPRESSION: lines ###-###:
    {quote}
    ^^^^^^^
    This is a fourth
^^^^^^^^^^^^^^^^^^^^
    paragraph.
^^^^^^^^^^^^^^
    {quote|{s: .terminator = "."|This is a fourth paragraph|s}|quote}
!@@@@ := @@@@:
             .type = quote
             .position[H] = PACKED_VEC
!@@@@ := This is a fourth paragraph:
             .terminator = "."
             .position[H] = PACKED_VEC
             .type = s
WARNING: in line ###: logical line begins at an indent that is greater
         than the current paragraph indent:
    {quote}
    ^
=== BRACKETED EXPRESSION: lines ###-###:
    {quote}
    ^^^^^^^
    // A comment with causes no warning message.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       And another quoted line.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {quote|{s: .terminator = "."|And another quoted line|s}|quote}
!@@@@ := @@@@:
             .type = quote
             .position[H] = PACKED_VEC
!@@@@ := And another quoted line:
             .terminator = "."
             .position[H] = PACKED_VEC
             .type = s
WARNING: in line ###: logical line begins at an indent that is greater
         than the current paragraph indent:
    And now a code line.
    ^
=== BRACKETED EXPRESSION: line ###:
    And now a code line.
    ^^^^^^^^^^^^^^^^^^^^
    And now a code line "."
!@@@@ := And now a code line ".":
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ###-###:
{p}This is a paragraph with a subparagraph:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^^^^^^^^^^^^
        This is
^^^^^^^^^^^^^^^^
        subparagraph 1.
^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^^^^^^^^^^^^
        This is subparagraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                2.
^^^^^^^^^^^^^^^^^^
and a continuation of the outer paragraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {p|{s: .terminator = "."|This is a paragraph with a subparagraph
           {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator =
                ":"|
                {p|{s: .terminator = "."|This is subparagraph 1|s}|p}
                {p|{s: .terminator = "."|This is subparagraph 2|s}|p}|}
           and a continuation of the outer paragraph|s}|p}
!@@@@ := @@@@:
             .type = p
             .position[H] = PACKED_VEC
!@@@@
    := This is a paragraph with a subparagraph @@@@ and a continuation
               of the outer paragraph:
           .terminator = "."
           .position[H] = PACKED_VEC
           .type = s
!@@@@ := @@@@ @@@@:
             .terminator = [$ INDENTED_PARAGRAPH $]
             .position[H] = PACKED_VEC
             .initiator = ":"
!@@@@ := @@@@:
             .position[H] = PACKED_VEC
             .type = p
!@@@@ := @@@@:
             .position[H] = PACKED_VEC
             .type = p
!@@@@ := This is subparagraph 1:
             .terminator = "."
             .position[H] = PACKED_VEC
             .type = s
!@@@@ := This is subparagraph 2:
             .terminator = "."
             .position[H] = PACKED_VEC
             .type = s
=== BRACKETED EXPRESSION: lines ###-###:
{p}A paragraph with an embedded table:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    =============
^^^^^^^^^^^^^^^^^
    | 1 chicken |
^^^^^^^^^^^^^^^^^
    =============
^^^^^^^^^^^^^^^^^
    | 1 tablespoon olive oil |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    -
^^^^^
    | 1 tablespoon paprika
^^^^^^^^^^^^^^^^^^^^^^^^^^
    =
^^^^^
    {p|{s|A paragraph with an embedded table
          {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
               {table|{row|=============|row}
                      {row|"|" 1 chicken "|"|row}
                      {row|=============|row}
                      {row|"|" 1 tablespoon olive oil "|"|row}
                      {row|-|row} {row|"|" 1 tablespoon paprika|row}
                      {row|=|row}|table}|}|s}|p}
!@@@@ := @@@@:
             .type = p
             .position[H] = PACKED_VEC
!@@@@ := A paragraph with an embedded table @@@@:
             .position[H] = PACKED_VEC
             .type = s
!@@@@ := @@@@:
             .terminator = [$ INDENTED_PARAGRAPH $]
             .position[H] = PACKED_VEC
             .initiator = ":"
!@@@@ := @@@@ @@@@ @@@@ @@@@ @@@@ @@@@ @@@@:
             .position[H] = PACKED_VEC
             .type = table
!@@@@ := "=============":
             .position[H] = PACKED_VEC
             .type = row
!@@@@ := "|" 1 chicken "|":
             .position[H] = PACKED_VEC
             .type = row
!@@@@ := "=============":
             .position[H] = PACKED_VEC
             .type = row
!@@@@ := "|" 1 tablespoon olive oil "|":
             .position[H] = PACKED_VEC
             .type = row
!@@@@ := "-":
             .position[H] = PACKED_VEC
             .type = row
!@@@@ := "|" 1 tablespoon paprika:
             .position[H] = PACKED_VEC
             .type = row
!@@@@ := "=":
             .position[H] = PACKED_VEC
             .type = row
=== BRACKETED EXPRESSION: line ###:
< 99 >
^^^^^^
    < 99 >
!@@@@ := 99:
             .terminator = ">"
             .initiator = "<"
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
< 99 >
^^^^^^
    < 99 >
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
{@ < 99 > @}
^^^^^^^^^^^^
    {@ < 99 > @}
!@@@@ := "<" 99 ">":
             .type = "@"
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{@ < 99 > @}
^^^^^^^^^^^^
    {@ < 99 > @}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
    end block BLOCK1
    ^^^^^^^^^^^^^^^^
    end block BLOCK1
!@@@@ := end block BLOCK1:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
    begin block BLOCK1
    ^^^^^^^^^^^^^^^^^^
    begin block BLOCK1
!@@@@ := begin block BLOCK1:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
    trace [+ bracketed subexpressions]
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    [+ bracketed subexpressions]
!@@@@ := "+" bracketed subexpressions:
             .terminator = "]"
             .initiator = "["
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
    trace [+ bracketed subexpressions]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    trace [+ bracketed subexpressions]
!@@@@ := trace @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ###-###:
*PARSER*:
^^^^^^^^^
    end block BLOCK1
^^^^^^^^^^^^^^^^^^^^
    begin block BLOCK1
^^^^^^^^^^^^^^^^^^^^^^
    trace [+ bracketed subexpressions]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator =
         [< *PARSER* ":" >]|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|end
              block BLOCK1|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              begin block BLOCK1|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              trace [+ bracketed subexpressions]|}|}
!@@@@ := @@@@ @@@@ @@@@:
             .terminator = [$ INDENTED_PARAGRAPH $]
             .position[H] = PACKED_VEC
             .initiator = [< *PARSER* ":" >]
=== BRACKETED EXPRESSION: line ###:
    ROOT = @@@ = LEAVES
    ^^^^^^^^^^^^^^^^^^^
    ROOT = PREALLOCATED(1*20) = LEAVES
!@@@@ := ROOT "=" PREALLOCATED(1*20) "=" LEAVES:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
    RIGHT = @@@ = LEFT
    ^^^^^^^^^^^^^^^^^^
    RIGHT = PREALLOCATED(1*22) = LEFT
!@@@@ := RIGHT "=" PREALLOCATED(1*22) "=" LEFT:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
    LEFT = @@@ = RIGHT
    ^^^^^^^^^^^^^^^^^^
    LEFT = PREALLOCATED(1*23) = RIGHT
!@@@@ := LEFT "=" PREALLOCATED(1*23) "=" RIGHT:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ###-###:
@@@ := A:
        ^
    ROOT = @@@ = LEAVES
^^^^^^^^^^^^^^^^^^^^^^^
    RIGHT = @@@ = LEFT
^^^^^^^^^^^^^^^^^^^^^^
    LEFT = @@@ = RIGHT
^^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|ROOT
              = PREALLOCATED(1*20) = LEAVES|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              RIGHT = PREALLOCATED(1*22) = LEFT|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|LEFT
              = PREALLOCATED(1*23) = RIGHT|}|}
!@@@@ := @@@@ @@@@ @@@@:
             .terminator = [$ INDENTED_PARAGRAPH $]
             .position[H] = PACKED_VEC
             .initiator = ":"
=== BRACKETED EXPRESSION: line ###:
@@@ := A:
^^^^^^^^
    {*DATA*|A|*DATA*}
!@@@@ := A:
             .position[H] = PACKED_VEC
             .type = *DATA*
=== BRACKETED EXPRESSION: lines ###-###:
@@@ := A:
^^^^^^^^^
    ROOT = @@@ = LEAVES
^^^^^^^^^^^^^^^^^^^^^^^
    RIGHT = @@@ = LEFT
^^^^^^^^^^^^^^^^^^^^^^
    LEFT = @@@ = RIGHT
^^^^^^^^^^^^^^^^^^^^^^
    {"": RIGHT = @@@@ = LEFT, LEFT = @@@@ = RIGHT, ROOT = @@@@ = LEAVES|
         A|}
!@@@@ :=:
             .position[H] = PACKED_VEC
             LEFT = @@@@ = RIGHT
!@@@@ :=:
             .position[H] = PACKED_VEC
             RIGHT = @@@@ = LEFT
!@@@@ :=:
             LEAVES = @@@@ = ROOT
             .position[H] = PACKED_VEC
!@@@@ := A:
             RIGHT = @@@@ = LEFT
             .position[H] = PACKED_VEC
             LEFT = @@@@ = RIGHT
             ROOT = @@@@ = LEAVES
=== BRACKETED EXPRESSION: line ###:
    ROOT = @@@ = LEAVES
    ^^^^^^^^^^^^^^^^^^^
    ROOT = {"": LEAVES = @@@@ = ROOT} = LEAVES
!@@@@ := ROOT "=" @@@@ "=" LEAVES:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
    RIGHT = @@@ = LEFT
    ^^^^^^^^^^^^^^^^^^
    RIGHT = {"": RIGHT = @@@@ = LEFT} = LEFT
!@@@@ := RIGHT "=" @@@@ "=" LEFT:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
    LEFT = @@@ = RIGHT
    ^^^^^^^^^^^^^^^^^^
    LEFT =
        {"": RIGHT = @@@@ = LEFT, LEFT = @@@@ = RIGHT, ROOT = @@@@
              = LEAVES|A|} = RIGHT
!@@@@ := LEFT "=" @@@@ "=" RIGHT:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ###-###:
@@@ := B:
        ^
    ROOT = @@@ = LEAVES
^^^^^^^^^^^^^^^^^^^^^^^
    RIGHT = @@@ = LEFT
^^^^^^^^^^^^^^^^^^^^^^
    LEFT = @@@ = RIGHT
^^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|ROOT
              = {"": LEAVES = @@@@ = ROOT} = LEAVES|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              RIGHT = {"": RIGHT = @@@@ = LEFT} = LEFT|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|LEFT
              =
              {"": RIGHT = @@@@ = LEFT, LEFT = @@@@ = RIGHT, ROOT = @@@@
                    = LEAVES|A|} = RIGHT|}|}
!@@@@ := @@@@ @@@@ @@@@:
             .terminator = [$ INDENTED_PARAGRAPH $]
             .position[H] = PACKED_VEC
             .initiator = ":"
=== BRACKETED EXPRESSION: line ###:
@@@ := B:
^^^^^^^^
    {*DATA*|B|*DATA*}
!@@@@ := B:
             .position[H] = PACKED_VEC
             .type = *DATA*
=== BRACKETED EXPRESSION: lines ###-###:
@@@ := B:
^^^^^^^^^
    ROOT = @@@ = LEAVES
^^^^^^^^^^^^^^^^^^^^^^^
    RIGHT = @@@ = LEFT
^^^^^^^^^^^^^^^^^^^^^^
    LEFT = @@@ = RIGHT
^^^^^^^^^^^^^^^^^^^^^^
    {"": RIGHT = @@@@ = LEFT, LEFT = @@@@ = RIGHT, ROOT = @@@@ = LEAVES|
         B|}
!@@@@ := B:
             .position[H] = PACKED_VEC
             RIGHT = @@@@ = LEFT
             LEFT = @@@@ = RIGHT
             ROOT = @@@@ = LEAVES
=== BRACKETED EXPRESSION: line ###:
    ROOT = @@@ = LEAVES
    ^^^^^^^^^^^^^^^^^^^
    ROOT = {"": LEAVES = {* @@@@, @@@@ *} = ROOT} = LEAVES
!@@@@ := ROOT "=" @@@@ "=" LEAVES:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
    RIGHT = @@@ = LEFT
    ^^^^^^^^^^^^^^^^^^
    RIGHT =
        {"": RIGHT = @@@@ = LEFT, LEFT = @@@@ = RIGHT, ROOT = @@@@
              = LEAVES|A|} = LEFT
!@@@@ := RIGHT "=" @@@@ "=" LEFT:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
    LEFT = @@@ = RIGHT
    ^^^^^^^^^^^^^^^^^^
    LEFT =
        {"": RIGHT = @@@@ = LEFT, LEFT = @@@@ = RIGHT, ROOT = @@@@
              = LEAVES|B|} = RIGHT
!@@@@ := LEFT "=" @@@@ "=" RIGHT:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ###-###:
@@@ := C:
        ^
    ROOT = @@@ = LEAVES
^^^^^^^^^^^^^^^^^^^^^^^
    RIGHT = @@@ = LEFT
^^^^^^^^^^^^^^^^^^^^^^
    LEFT = @@@ = RIGHT
^^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|ROOT
              = {"": LEAVES = {* @@@@, @@@@ *} = ROOT} = LEAVES|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              RIGHT =
              {"": RIGHT = @@@@ = LEFT, LEFT = @@@@ = RIGHT, ROOT = @@@@
                    = LEAVES|A|} = LEFT|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|LEFT
              =
              {"": RIGHT = @@@@ = LEFT, LEFT = @@@@ = RIGHT, ROOT = @@@@
                    = LEAVES|B|} = RIGHT|}|}
!@@@@ := @@@@ @@@@ @@@@:
             .terminator = [$ INDENTED_PARAGRAPH $]
             .position[H] = PACKED_VEC
             .initiator = ":"
=== BRACKETED EXPRESSION: line ###:
@@@ := C:
^^^^^^^^
    {*DATA*|C|*DATA*}
!@@@@ := C:
             .position[H] = PACKED_VEC
             .type = *DATA*
=== BRACKETED EXPRESSION: lines ###-###:
@@@ := C:
^^^^^^^^^
    ROOT = @@@ = LEAVES
^^^^^^^^^^^^^^^^^^^^^^^
    RIGHT = @@@ = LEFT
^^^^^^^^^^^^^^^^^^^^^^
    LEFT = @@@ = RIGHT
^^^^^^^^^^^^^^^^^^^^^^
    {"": RIGHT = @@@@ = LEFT, LEFT = @@@@ = RIGHT, ROOT = @@@@ = LEAVES|
         C|}
!@@@@ := C:
             .position[H] = PACKED_VEC
             RIGHT = @@@@ = LEFT
             LEFT = @@@@ = RIGHT
             ROOT = @@@@ = LEAVES
=== BRACKETED EXPRESSION: line ###:
ID 20 IS @@@
^^^^^^^^^^^^
    ID 20 IS {"": LEAVES = {* @@@@, @@@@, @@@@ *} = ROOT}
!@@@@ := ID 20 IS @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
ID 21 IS @@@
^^^^^^^^^^^^
    ID 21 IS
        {"": RIGHT = @@@@ = LEFT, LEFT = @@@@ = RIGHT, ROOT = @@@@
              = LEAVES|A|}
!@@@@ := ID 21 IS @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
ID 22 IS @@@
^^^^^^^^^^^^
    ID 22 IS
        {"": RIGHT = @@@@ = LEFT, LEFT = @@@@ = RIGHT, ROOT = @@@@
              = LEAVES|B|}
!@@@@ := ID 22 IS @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
ID 23 IS @@@
^^^^^^^^^^^^
    ID 23 IS
        {"": RIGHT = @@@@ = LEFT, LEFT = @@@@ = RIGHT, ROOT = @@@@
              = LEAVES|C|}
!@@@@ := ID 23 IS @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
    LEAVES[*,@]
          ^^^^^
    [*,@]
!@@@@ := "*,@":
             .terminator = "]"
             .initiator = "["
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
    LEAVES[*,@]
    ^^^^^^^^^^^
    LEAVES [*,@]
!@@@@ := LEAVES @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETABLE EXPRESSION: line ###:
    OTHER = {* 5, 6, 7 *}
            ^^^^^^^^^^^^^
    {|5, 6, 7|}
!@@@@ := 5 6 7:
             .separator = ","
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
    OTHER = {* 5, 6, 7 *}
            ^^^^^^^^^^^^^
    {* 5, 6, 7 *}
!@@@@ := 5 6 7:
             .terminator = [< "*" "}" >]
             .initiator = [< "{" "*" >]
             .separator = ","
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
    OTHER = {* 5, 6, 7 *}
    ^^^^^^^^^^^^^^^^^^^^^
    OTHER = {* 5, 6, 7 *}
!@@@@ := OTHER "=" @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ###-###:
@@@ := ABC:
          ^
    LEAVES[*,@]
^^^^^^^^^^^^^^^
    OTHER = {* 5, 6, 7 *}
^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              LEAVES [*,@]|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              OTHER = {* 5, 6, 7 *}|}|}
!@@@@ := @@@@ @@@@:
             .terminator = [$ INDENTED_PARAGRAPH $]
             .position[H] = PACKED_VEC
             .initiator = ":"
=== BRACKETED EXPRESSION: line ###:
@@@ := ABC:
^^^^^^^^^^
    {*DATA*|ABC|*DATA*}
!@@@@ := ABC:
             .position[H] = PACKED_VEC
             .type = *DATA*
=== BRACKETED EXPRESSION: lines ###-###:
@@@ := ABC:
^^^^^^^^^^^
    LEAVES[*,@]
^^^^^^^^^^^^^^^
    OTHER = {* 5, 6, 7 *}
^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": OTHER = {* 7, 5, 6 *}, LEAVES[*@]|ABC|}
!@@@@ := ABC:
             OTHER = {* 7, 5, 6 *}
             LEAVES[*@]
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
ID 30 IS NOW @@@
^^^^^^^^^^^^^^^^
    ID 30 IS NOW {"": OTHER = {* 7, 5, 6 *}, LEAVES[*@]|ABC|}
!@@@@ := ID 30 IS NOW @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
    X[aZ*+,/]
     ^^^^^^^^
    [aZ*+,/]
!@@@@ := aZ*+,/:
             .terminator = "]"
             .initiator = "["
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
    X[aZ*+,/]
    ^^^^^^^^^
    X [aZ*+,/]
!@@@@ := X @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
    Y[@] = 5
     ^^^
    [@]
!@@@@ := "@":
             .terminator = "]"
             .initiator = "["
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
    Y[@] = 5
    ^^^^^^^^
    Y [@] = 5
!@@@@ := Y @@@@ "=" 5:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ###-###:
@@@ := D:
        ^
    X[aZ*+,/]
^^^^^^^^^^^^^
    Y[@] = 5
^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|X
              [aZ*+,/]|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|Y
              [@] = 5|}|}
!@@@@ := @@@@ @@@@:
             .terminator = [$ INDENTED_PARAGRAPH $]
             .position[H] = PACKED_VEC
             .initiator = ":"
=== BRACKETED EXPRESSION: line ###:
@@@ := D:
^^^^^^^^
    {*DATA*|D|*DATA*}
!@@@@ := D:
             .position[H] = PACKED_VEC
             .type = *DATA*
=== BRACKETED EXPRESSION: lines ###-###:
@@@ := D:
^^^^^^^^^
    X[aZ*+,/]
^^^^^^^^^^^^^
    Y[@] = 5
^^^^^^^^^^^^
    {"": X[*+/aZ], Y[@] = 5|D|}
!@@@@ := D:
             X[*+/aZ]
             Y[@] = 5
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
ID 31 IS @@@
^^^^^^^^^^^^
    ID 31 IS {"": X[*+/aZ], Y[@] = 5|D|}
!@@@@ := ID 31 IS @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
            hi[*], hi[@]}
              ^^^
    [*]
!@@@@ := "*":
             .terminator = "]"
             .initiator = "["
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
            hi[*], hi[@]}
                     ^^^
    [@]
!@@@@ := "@":
             .terminator = "]"
             .initiator = "["
             .position[H] = PACKED_VEC
ERROR: in line ###: "hi" already has different value(s); old value(s)
       not changed:
!@@@ := {X: hi = @@, to = @@@ = from, hi = 77,
                                           ^^
ERROR: in line ###: flag `@' for label "hi" should be previously on but
       is off:
            hi[*], hi[@]}
                      ^
ERROR: in line ###: flag `*' for label "hi" should be previously off but
       is on:
            hi[*], hi[@]}
                     ^^^
ERROR: in line ###: "hi" already has different flag(s); old flag(s) not
       changed:
            hi[*], hi[@]}
                     ^^^
=== BRACKETED EXPRESSION: lines ###-###:
!@@@ := {X: hi = @@, to = @@@ = from, hi = 77,
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            hi[*], hi[@]}
^^^^^^^^^^^^^^^^^^^^^^^^^
    {X: hi[*] = {|A B C|}, to = @@@@ = from}
!@@@@ :=:
             .position[H] = PACKED_VEC
             from = @@@@ = to
!@@@@ :=:
             .type = X
             hi[*] = @@@@
             to = @@@@ = from
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ###-###:
!@@@ := {X: hi = @@, to = @@@ = from, hi = 77,
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            hi[*], hi[@]}
^^^^^^^^^^^^^^^^^^^^^^^^^
    {*RAW* *DATA*|{X: hi[*] = {|A B C|}, to = @@@@ = from}|*RAW* *DATA*}
!@@@@ := @@@@:
             .position[H] = PACKED_VEC
             .type = [< *RAW* *DATA* >]
=== BRACKETED EXPRESSION: lines ###-###:
!@@@ := {X: hi = @@, to = @@@ = from, hi = 77,
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            hi[*], hi[@]}
^^^^^^^^^^^^^^^^^^^^^^^^^
    {X: hi[*] = {|A B C|}, to = @@@@ = from}
!@@@@ :=:
             .type = X
             hi[*] = @@@@
             to = @@@@ = from
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
ID 40 IS [@@@]
          ^^^
    {X: hi[*] = {|A B C|}, to = @@@@ = from}
!@@@@ :=:
             .type = X
             hi[*] = @@@@
             to = @@@@ = from
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
ID 40 IS [@@@]
         ^^^^^
    [{X: hi[*] = {|A B C|}, to = @@@@ = from}]
!@@@@ := @@@@:
             .terminator = "]"
             .initiator = "["
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
ID 40 IS [@@@]
^^^^^^^^^^^^^^
    ID 40 IS [{X: hi[*] = {|A B C|}, to = @@@@ = from}]
!@@@@ := ID 40 IS @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
ID 41 IS [@@@]
         ^^^^^
    {"": .initiator = "[", .terminator = "]", from = @@@@ = to}
!@@@@ :=:
             .position[H] = PACKED_VEC
             .initiator = "["
             .terminator = "]"
             from = @@@@ = to
=== BRACKETED EXPRESSION: line ###:
ID 41 IS [@@@]
^^^^^^^^^^^^^^
    ID 41 IS {"": .initiator = "[", .terminator = "]", from = @@@@ = to}
!@@@@ := ID 41 IS @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
    end block BLOCK1
    ^^^^^^^^^^^^^^^^
    end block BLOCK1
!@@@@ := end block BLOCK1:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
    trace [+ parser commands]
          ^^^^^^^^^^^^^^^^^^^
    [+ parser commands]
!@@@@ := "+" parser commands:
             .terminator = "]"
             .initiator = "["
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
    trace [+ parser commands]
    ^^^^^^^^^^^^^^^^^^^^^^^^^
    trace [+ parser commands]
!@@@@ := trace @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ###-###:
*PARSER*:
^^^^^^^^^
    end block BLOCK1
^^^^^^^^^^^^^^^^^^^^
    trace [+ parser commands]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator =
         [< *PARSER* ":" >]|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|end
              block BLOCK1|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              trace [+ parser commands]|}|}
!@@@@ := @@@@ @@@@:
             .terminator = [$ INDENTED_PARAGRAPH $]
             .position[H] = PACKED_VEC
             .initiator = [< *PARSER* ":" >]
*PARSER*:
    trace [+ parser commands]
*PARSER*:
    begin block BLOCK1
    define bracket "<" ... ">" [code]
    define bracket "<<" ... ">>" [data]
    define bracket type "D" [code]
           with parsing selectors [data]
           with group *LINE*
    define indentation mark "::" [code]
           with parsing selectors [code]
           with implied header {D}
    trace [+ bracketed subexpressions]
=== BRACKETED EXPRESSION: line ###:
< 99 > << 88 >>
^^^^^^
    < 99 >
!@@@@ := 99:
             .terminator = ">"
             .initiator = "<"
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
< 99 > << 88 >>
^^^^^^^^^^^^^^^
    < 99 > << 88 >>
!@@@@ := @@@@ "<<" 88 ">>":
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
    < 99 > << 88 >>
           ^^^^^^^^
    << 88 >>
!@@@@ := 88:
             .terminator = ">>"
             .initiator = "<<"
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
    < 99 > << 88 >>
    ^^^^^^^^^^^^^^^
    {D|< 99 > << 88 >>|D}
!@@@@ := "<" 99 ">" @@@@:
             .type = D
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ###-###:
test paragraph::
              ^^
    < 99 > << 88 >>
^^^^^^^^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = "::"|
         {D|< 99 > << 88 >>|D}|}
!@@@@ := @@@@:
             .terminator = [$ INDENTED_PARAGRAPH $]
             .position[H] = PACKED_VEC
             .initiator = "::"
=== BRACKETED EXPRESSION: lines ###-###:
test paragraph::
^^^^^^^^^^^^^^^^
    < 99 > << 88 >>
^^^^^^^^^^^^^^^^^^^
    test paragraph::
        {D|< 99 > << 88 >>|D}
!@@@@ := test paragraph @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: line ###:
    end block BLOCK1
    ^^^^^^^^^^^^^^^^
    end block BLOCK1
!@@@@ := end block BLOCK1:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
=== BRACKETED EXPRESSION: lines ###-###:
*PARSER*:
^^^^^^^^^
    end block BLOCK1
^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator =
         [< *PARSER* ":" >]|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|end
              block BLOCK1|}|}
!@@@@ := @@@@:
             .terminator = [$ INDENTED_PARAGRAPH $]
             .position[H] = PACKED_VEC
             .initiator = [< *PARSER* ":" >]
*PARSER*:
    end block BLOCK1
=== BRACKETED EXPRESSION: line ###:
{|+ x|}
^^^^^^^
    + x
!@@@@ := "+" x:
             .terminator = "<LF>"
             .initiator = [$ LOGICAL_LINE $]
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{+ x +}
^^^^^^^
    {+ x +}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
!@@@@ := x:
             .type = "+"
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
ID 50 IS [@@@]
^^^^^^^^^^^^^^
    ID 50 IS
        {"": x = Z, y = Z, z = [< X Y Z >], .terminator = "]",
             .initiator = "["|A "B" C|}
!@@@@ := ID 50 IS @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
!@@@@ := A @@@@ C:
             x = Z
             y = Z
             z = [< X Y Z >]
             .terminator = "]"
             .position[H] = PACKED_VEC
             .initiator = "["
!@@@@ := B:
             .type = "<Q>"
=== BRACKETED EXPRESSION: line ###:
{my type: x = X, y = "Y"|A "B" C|}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my type: x = X, y = Y|A "B" C|my type}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
!@@@@ := A @@@@ C:
             x = X
             .type = [< my type >]
             y = Y
             .position[H] = PACKED_VEC
!@@@@ := B:
             .type = "<Q>"
ERROR: in line ###: not a legal label initial element `5':
{my type: x = @@@ = y, b = @@@ = 5 c}
                                 ^
ERROR: in line ###: bad attribute reverse label; attribute ignored:
{my type: x = @@@ = y, b = @@@ = 5 c}
                                 ^^^
=== BRACKETED EXPRESSION: line ###:
{my type: x = @@@ = y, b = @@@ = 5 c}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my type: x = @@@@ = y}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
!@@@@ :=:
             x = @@@@ = y
             .type = [< my type >]
             .position[H] = PACKED_VEC
WARNING: in line ###: mark should be quoted:
{my type: x = {* a b, c d e, f, 1 g, h + *}}
                                       ^
=== BRACKETED EXPRESSION: line ###:
{my type: x = {* a b, c d e, f, 1 g, h + *}}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my type: x =
              {* [< h "+" >], [< 1 g >], f, [< a b >], [< c d e >] *}}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
!@@@@ :=:
             x = {* [< h "+" >], [< 1 g >], f, [< a b >], [< c d e >] *}
             .type = [< my type >]
             .position[H] = PACKED_VEC
ERROR: in line ###: "x" already has different value(s); old value(s) not
       changed:
    x = B
        ^
=== BRACKETED EXPRESSION: line ###:
ID 60 IS [@@@]
^^^^^^^^^^^^^^
    ID 60 IS
        {"": x = A, y[S] = {* P, O, N *}, .terminator = "]",
             .initiator = "["}
!@@@@ := ID 60 IS @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
!@@@@ :=:
             .position[H] = PACKED_VEC
             x = A
             y[S] = {* P, O, N *}
             .terminator = "]"
             .initiator = "["
ERROR: in line ###: "x" already has different value(s); old value(s) not
       changed:
{my type: x = A, x = A, x = B,
                            ^
=== BRACKETED EXPRESSION: lines ###-###:
{my type: x = A, x = A, x = B,
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
          y[S] = N, y = O, y = P, y = N }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my type: x = A, y[S] = {* P, O, N *}}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
!@@@@ :=:
             x = A
             .type = [< my type >]
             y[S] = {* P, O, N *}
             .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
ID 70 IS [@@@]
^^^^^^^^^^^^^^
    ID 70 IS
        {"": x[M] = {* C, B, B, A, A, A *}, .terminator = "]",
             .initiator = "["}
!@@@@ := ID 70 IS @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
!@@@@ :=:
             .position[H] = PACKED_VEC
             x[M] = {* C, B, B, A, A, A *}
             .terminator = "]"
             .initiator = "["
=== BRACKETED EXPRESSION: lines ###-###:
{my type: x[M], x = A, x = A, x = A,
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                x = B, x = B,
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                x = C }
^^^^^^^^^^^^^^^^^^^^^^^
    {my type: x[M] = {* C, B, B, A, A, A *}}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
!@@@@ :=:
             x[M] = {* C, B, B, A, A, A *}
             .type = [< my type >]
             .position[H] = PACKED_VEC
ERROR: in line ###: flag `S' for label "z" should be previously on but
       is off:
    z[S]
      ^
ERROR: in line ###: flag `M' for label "z" should be previously off but
       is on:
    z[S]
     ^^^
ERROR: in line ###: "z" already has different flag(s); old flag(s) not
       changed:
    z[S]
     ^^^
=== BRACKETED EXPRESSION: line ###:
ID 80 IS [@@@]
^^^^^^^^^^^^^^
    ID 80 IS
        {"": .terminator = "]", x[S] = {* C, B, A *}, z[M], .initiator =
             "["}
!@@@@ := ID 80 IS @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
!@@@@ :=:
             .terminator = "]"
             x[S] = {* C, B, A *}
             z[M]
             .position[H] = PACKED_VEC
             .initiator = "["
ERROR: in line ###: flag `S' for label "z" should be previously on but
       is off:
                x[S] = C, z[M], z[S] }
                                  ^
ERROR: in line ###: flag `M' for label "z" should be previously off but
       is on:
                x[S] = C, z[M], z[S] }
                                 ^^^
ERROR: in line ###: "z" already has different flag(s); old flag(s) not
       changed:
                x[S] = C, z[M], z[S] }
                                 ^^^
=== BRACKETED EXPRESSION: lines ###-###:
{my type: x[S], x = A, x = A, x = A,
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                x = B, x = B,
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                x[S] = C, z[M], z[S] }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {my type: x[S] = {* C, B, A *}, z[M]}
!@@@@ := @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
!@@@@ :=:
             x[S] = {* C, B, A *}
             .type = [< my type >]
             z[M]
             .position[H] = PACKED_VEC
ERROR: in line ###: not a legal label element `MISSING':
    v = [< X [$ MISSING $]>]
             ^^^^^^^^^^^^^
ERROR: in line ###: evaluated to ERROR special value because of error(s)
       in label elements:
    v = [< X [$ MISSING $]>]
        ^^^^^^^^^^^^^^^^^^^^
ERROR: in line ###: not a legal value element `A B C':
    z = X [< A "B" C >]
          ^^^^^^^^^^^^^
ERROR: in line ###: after `=' attribute value (label or single bracketed
       subexpression) was expected but none found; line ignored:
    z = X [< A "B" C >]
      ^
ERROR: in line ###: not a legal value element `MISSING':
    u = X [$ MISSING $]
          ^^^^^^^^^^^^^
ERROR: in line ###: after `=' attribute value (label or single bracketed
       subexpression) was expected but none found; line ignored:
    u = X [$ MISSING $]
      ^
=== BRACKETED EXPRESSION: line ###:
ID 90 IS [@@@]
^^^^^^^^^^^^^^
    ID 90 IS
        {"": s = [$ MISSING $], v = [$ ERROR $], w =
             [< X [< A B C >] >], x = [< A B C >], y = [< A B C >],
             .terminator = "]", .initiator = "["|A "B" C|}
!@@@@ := ID 90 IS @@@@:
             .terminator = "<LF>"
             .position[H] = PACKED_VEC
             .initiator = [$ LOGICAL_LINE $]
!@@@@ := A @@@@ C:
             s = [$ MISSING $]
             .position[H] = PACKED_VEC
             v = [$ ERROR $]
             w = [< X [< A B C >] >]
             x = [< A B C >]
             y = [< A B C >]
             .terminator = "]"
             .initiator = "["
!@@@@ := B:
             .type = "<Q>"
