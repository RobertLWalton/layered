// Layered Languages Parser Command Test Data
//
// File:	ll_parser_command_test.in
// Author:	Bob Walton (walton@acm.org)
// Date:	Sun Dec 25 06:58:46 EST 2022
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

*PARSER*:
    print selector ""
    define selector my selector
    define selector operator 1 ++ extra stuff
    print selector ""
    print indentation mark "*TOP* *LEVEL*"

    print trace

*PARSER*:
    trace [+ parser input]
*PARSER*:
    print trace
*PARSER*:
    trace [- parser input]
    print trace

*PARSER*:
    print indentation mark "*TOP* *LEVEL*"
    define top level parsing selectors [my selector]
    print indentation mark "*TOP* *LEVEL*"
    print bracket ""
    print typed bracket ""
    print indentation mark ""

*PARSER* *TEST*:
    [ x <+ y +> z {w|4|} m (n (p)) ]
    `a b c [$ MISSING $] [< e f g [< h i >] j >]'
*PARSER*:
    begin block X
    define top level parsing selectors [+ data]
    print indentation mark "*TOP* *LEVEL*"
*PARSER* *TEST*:
    [ x <+ y +> z {w|4|} m (n (p)) ]
    `a b c [$ MISSING $] [< e f g [< h i >] j >]'
*PARSER*:
    end block X
*PARSER*:
    trace [+ subexpression lines]
*PARSER* *TEST*:
    [ x <+ y +> z {w|4|} m (n (p)) ]
*PARSER*:
    trace [- subexpression lines]
    trace [+ subexpression details]
*PARSER* *TEST*:
    [ x <+ y +> z {w|4|} m (n (p)) ]
*PARSER*:
    trace [+ subexpression elements]
*PARSER* *TEST*:
    [ x <+ y +> z {w|4|} m (n (p)) ]
*PARSER*:
    trace [- subexpression details]
*PARSER* *TEST*:
    [ x <+ y +> z {w|4|} m (n (p)) ]
*PARSER*:
    trace [+ subexpression lines]
*PARSER* *TEST*:
    [ x <+ y +> z {w|4|} m (n (p)) ]
*PARSER*:
    begin block X
    define top level parsing selectors [+ data]
*PARSER* *TEST*:
    {x|{x} hi|}
*PARSER*:
    end block X
*PARSER*:
    begin block X
    define mapped lexeme "foo" [data]
        with token value {p}
    define mapped lexeme "PREMATURE-END-OF-FILE" [data]
        with token value {p}
    define mapped lexeme "PREMATURE-END-OF-FILE" [data]
    print mapped lexeme ""
    end block X
    print mapped lexeme ""

*PARSER*:
    trace [+ parser output]
    define top level lexical master DEFAULT
    begin block X

@<hello> <there>

*PARSER*:
    define top level parsing selectors [data]
    define top level lexical master DATA-CHECK
    define mapped lexeme "DATA" [data]
        with token value {data}

@<hello> <there>
@<goodby> <there>

*PARSER*:
    end block X

@<hello> <there>

*PARSER*:
    begin block X
    define ID character "@"
    begin block Y
    define ID character disabled
    begin block Z
    define ID character "$"
    print ID
    end block Z
    end block Y
    end block X
    print ID

*PARSER*:
    begin block X
    define ID character "@"
    define top level lexical master DATA-CHECK
    define mapped lexeme "DATA" [TOP LEVEL]
        with token value {data}
    define bracket type "data" [TOP LEVEL]
        with parsing selectors [data]
	with group line
	with data reformatter
	     ( "@@@@", "::=",
	       ( ":" ), "=", "not", "[", "{*" )

@5 ::= Jack
@3 ::= `hello there @5'
@6 ::= @4 said @3
@4 ::= Jill
ID 6 is @6
ID 4 is @4

*PARSER*:
    print bracket type ""
    print mapped lexeme ""
    end block X

*PARSER*:
    begin block X
    print top level
    define top level line separator ";"
    print top level

Hi there; Bye there
Ho HO;

*PARSER*:
    define top level line separator NONE
    print top level

Hi there; Bye there

*PARSER*:
    end block X

*PARSER*:
    begin block X
    trace [+ parser input, - parser output]
    print input

NaN
123
1,234
1,234.5678
0.123,4
1,234.567,8

*PARSER*:
    input [- enable numeric words,
           - enable naturals,
           + enable integer commas,
	   + enable fraction commas]
    print input

NaN
123
1,234
1,234.5678
0.123,4
1,234.567,8


*PARSER*:
    end block X
