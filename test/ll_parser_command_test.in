// Layered Languages Parser Command Test Data
//
// File:	ll_parser_command_test.in
// Author:	Bob Walton (walton@acm.org)
// Date:	Fri Mar 22 12:36:39 EDT 2019
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

*PARSER*:
    print selector ""
    define selector my selector
    define selector operator 1 ++ extra stuff
    print selector ""
    print top level

    print trace

*PARSER*:
    trace [+ parser input]
*PARSER*:
    print trace
*PARSER*:
    trace [- parser input]
    print trace

*PARSER*:
    print top level
    define top level
        with parsing selectors [data, my selector]
        with parsing options [default options]
    print top level
    define top level
        with parsing selectors [TOP LEVEL, code]
        with parsing options [default options]
    print top level
    print bracket ""
    print typed bracket ""
    print indentation mark ""

*PARSER* *TEST*:
    [ x <+ y +> z {|4|w} m (n (p)) ]
*PARSER*:
    begin block X
    define top level
        with parsing selectors [+ data]
    print top level
*PARSER* *TEST*:
    [ x <+ y +> z {|4|w} m (n (p)) ]
*PARSER*:
    end block X
*PARSER*:
    trace [+ subexpression lines]
*PARSER* *TEST*:
    [ x <+ y +> z {|4|w} m (n (p)) ]
*PARSER*:
    trace [- subexpression lines]
    trace [+ subexpression details]
*PARSER* *TEST*:
    [ x <+ y +> z {|4|w} m (n (p)) ]
*PARSER*:
    trace [+ subexpression elements]
*PARSER* *TEST*:
    [ x <+ y +> z {|4|w} m (n (p)) ]
*PARSER*:
    trace [- subexpression details]
*PARSER* *TEST*:
    [ x <+ y +> z {|4|w} m (n (p)) ]
*PARSER*:
    trace [+ subexpression lines]
*PARSER* *TEST*:
    [ x <+ y +> z {|4|w} m (n (p)) ]
*PARSER*:
    begin block X
    define top level
        with parsing selectors [+ data]
*PARSER* *TEST*:
    {x|{x} hi|}
*PARSER*:
    end block X
*PARSER*:
    begin block X
    define mapped lexeme "foo" [data]
        with token value {p}
    define mapped lexeme "PREMATURE-END-OF-FILE" [data]
        with token value {p}
    define mapped lexeme "PREMATURE-END-OF-FILE" [data]
    print mapped lexeme ""
    end block X
    print mapped lexeme ""

*PARSER*:
    trace [+ parser output]
    begin block X
    define top level
        with lexical master DEFAULT

@hello there

*PARSER*:
    define top level
        with lexical master DATA-CHECK
    define mapped lexeme "DATA" [code, data]
        with token value {data}

@hello there
@goodby there

*PARSER*:
    end block X

@hello there

*PARSER*:
    begin block X
    define ID character "@"
    begin block Y
    define ID character disabled
    begin block Z
    define ID character "$"
    print ID character
    end block Z
    end block Y
    end block X
    print ID character

*PARSER*:
    begin block X
    define ID character "@"
    define top level
        with lexical master DATA-CHECK
    define mapped lexeme "DATA" [TOP LEVEL]
        with token value {data}
    define prefix "data" [TOP LEVEL]
        with parsing selectors [data]
	with data reformatter ( "=", "not", "[", "{*" )

@5 = Jack
@3 = `hello there @5'
@6 = @4 said @3
@4 = Jill
ID 6 is @6
ID 4 is @4

*PARSER*:
    print prefix ""
    print mapped lexeme ""
    end block X
