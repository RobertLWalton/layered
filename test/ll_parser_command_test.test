PARSER:
    print selector "":
        block standard: code
        block TOP LEVEL: data
        block TOP LEVEL: TOP LEVEL
    define selector my selector
ERROR: in line ##: extraneous stuff after:
    define selector operator 1 ++ extra stuff
                             ^
    print selector "":
        block standard: my selector
        block standard: code
        block TOP LEVEL: data
        block TOP LEVEL: TOP LEVEL
    print top level:
        block standard:  selectors [TOP LEVEL, code]
                         options [end at le indent,
                                  end at line separator,
                                  end at outer closing]
        block TOP LEVEL:  selectors [TOP LEVEL]
                          options [end at le indent,
                                   end at line separator,
                                   end at outer closing]
parser print trace:
        [ + warnings, - parser input, - parser output,
          + parser commands, - subexpression elements,
          - subexpression details, - subexpression lines, - keys,
          - bracketed subexpressions ]
PARSER:
    trace [+ parser input]
WORD: "parser": line ##:
parser:
^^^^^^
SEPARATOR: ":": line ##:
parser:
      ^
LINE_BREAK: line ##:
parser:
       ^
INDENT: line ##:
    print trace
^^^^
WORD: "print": line ##:
    print trace
    ^^^^^
WORD: "trace": line ##:
    print trace
          ^^^^^
LINE_BREAK: line ##:
    print trace
               ^
INDENT: line ##:
parser:
^
PARSER:
parser print trace:
        [ + warnings, + parser input, - parser output,
          + parser commands, - subexpression elements,
          - subexpression details, - subexpression lines, - keys,
          - bracketed subexpressions ]
WORD: "parser": line ##:
parser:
^^^^^^
SEPARATOR: ":": line ##:
parser:
      ^
LINE_BREAK: line ##:
parser:
       ^
INDENT: line ##:
    trace [- parser input]
^^^^
WORD: "trace": line ##:
    trace [- parser input]
    ^^^^^
SEPARATOR: "[": line ##:
    trace [- parser input]
          ^
MARK: "-": line ##:
    trace [- parser input]
           ^
WORD: "parser": line ##:
    trace [- parser input]
             ^^^^^^
WORD: "input": line ##:
    trace [- parser input]
                    ^^^^^
SEPARATOR: "]": line ##:
    trace [- parser input]
                         ^
LINE_BREAK: line ##:
    trace [- parser input]
                          ^
INDENT: line ##:
    print trace
^^^^
WORD: "print": line ##:
    print trace
    ^^^^^
WORD: "trace": line ##:
    print trace
          ^^^^^
LINE_BREAK: line ##:
    print trace
               ^
LINE_BREAK: line ##:
<BLANK-LINE>
^
INDENT: line ##:
parser:
^
PARSER:
    trace [- parser input]
parser print trace:
        [ + warnings, - parser input, - parser output,
          + parser commands, - subexpression elements,
          - subexpression details, - subexpression lines, - keys,
          - bracketed subexpressions ]
PARSER:
    print top level:
        block standard:  selectors [TOP LEVEL, code]
                         options [end at le indent,
                                  end at line separator,
                                  end at outer closing]
        block TOP LEVEL:  selectors [TOP LEVEL]
                          options [end at le indent,
                                   end at line separator,
                                   end at outer closing]
    define top level
        with parsing selectors [data, my selector]
        with parsing options [default options]
    print top level:
        block standard:  selectors [TOP LEVEL, data, my selector]
                         options [end at le indent,
                                  end at line separator,
                                  end at outer closing]
        block TOP LEVEL:  selectors [TOP LEVEL]
                          options [end at le indent,
                                   end at line separator,
                                   end at outer closing]
    define top level
        with parsing selectors [TOP LEVEL, code]
        with parsing options [default options]
    print top level:
        block standard:  selectors [TOP LEVEL, code]
                         options [end at le indent,
                                  end at line separator,
                                  end at outer closing]
        block TOP LEVEL:  selectors [TOP LEVEL]
                          options [end at le indent,
                                   end at line separator,
                                   end at outer closing]
======= PARSER TEST: "[" x <+ y +> z "{" "|" 4 "|" w "}" m "(" n "(" p
                         ")" ")" "]"
======= END PARSER TEST(S)
PARSER:
    trace [+ subexpression lines]
======= PARSER TEST:
======= line ##:
    [ x <+ y +> z {|4|w} m (n (p)) ]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
PARSER:
    trace [- subexpression lines]
    trace [+ subexpression details]
======= PARSER TEST:
@@ = "[" x <+ y +> z "{" "|" 4 "|" w "}" m "(" n "(" p ")" ")" "]":
         .terminator = "<LF>"
         .position[H] = {}
         .initiator = [$ LOGICAL_LINE $]
======= END PARSER TEST(S)
PARSER:
    trace [+ subexpression elements]
======= PARSER TEST: "[" x <+ y +> z "{" "|" 4 "|" w "}" m "(" n "(" p
                         ")" ")" "]"
@@ = "[" x <+ y +> z "{" "|" 4 "|" w "}" m "(" n "(" p ")" ")" "]":
         .terminator = "<LF>"
         .position[H] = {}
         .initiator = [$ LOGICAL_LINE $]
======= END PARSER TEST(S)
PARSER:
    trace [- subexpression details]
======= PARSER TEST: "[" x <+ y +> z "{" "|" 4 "|" w "}" m "(" n "(" p
                         ")" ")" "]"
======= END PARSER TEST(S)
PARSER:
    trace [+ subexpression lines]
======= PARSER TEST: "[" x <+ y +> z "{" "|" 4 "|" w "}" m "(" n "(" p
                         ")" ")" "]"
======= line ##:
    [ x <+ y +> z {|4|w} m (n (p)) ]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
