*PARSER*:
    print selector ""
        block TOP LEVEL: atom
        block TOP LEVEL: data
        block TOP LEVEL: LINE LEVEL
        block TOP LEVEL: TOP LEVEL
    define selector my selector
ERROR: in line ##: extraneous stuff after:
    define selector operator 1 ++ extra stuff
                             ^
    print selector ""
        block TOP LEVEL: my selector
        block TOP LEVEL: atom
        block TOP LEVEL: data
        block TOP LEVEL: LINE LEVEL
        block TOP LEVEL: TOP LEVEL
    print indentation mark "*TOP* *LEVEL*"
        block TOP LEVEL: indentation mark [< "*TOP*" "*LEVEL*" >] []
                         with parsing selectors []
                         with parsing options [end at le indent,
                                               end at line separator,
                                               end at outer closing,
                                               enable indented paragraph,
                                               enable header]
    print trace
        [ + warnings, - parser input, - parser output,
          + parser commands, - subexpression elements,
          - subexpression details, - subexpression lines, - keys,
          - bracketed subexpressions ]
*PARSER*:
    trace [+ parser input]
WORD: "*PARSER*": line ##:
*PARSER*:
^^^^^^^^
SEPARATOR: ":": line ##:
*PARSER*:
        ^
LINE-BREAK: line ##:
*PARSER*:
         ^
INDENT: line ##:
    print trace
^^^^
WORD: "print": line ##:
    print trace
    ^^^^^
WORD: "trace": line ##:
    print trace
          ^^^^^
LINE-BREAK: line ##:
    print trace
               ^
INDENT: line ##:
*PARSER*:
^
*PARSER*:
    print trace
        [ + warnings, + parser input, - parser output,
          + parser commands, - subexpression elements,
          - subexpression details, - subexpression lines, - keys,
          - bracketed subexpressions ]
WORD: "*PARSER*": line ##:
*PARSER*:
^^^^^^^^
SEPARATOR: ":": line ##:
*PARSER*:
        ^
LINE-BREAK: line ##:
*PARSER*:
         ^
INDENT: line ##:
    trace [- parser input]
^^^^
WORD: "trace": line ##:
    trace [- parser input]
    ^^^^^
SEPARATOR: "[": line ##:
    trace [- parser input]
          ^
MARK: "-": line ##:
    trace [- parser input]
           ^
WORD: "parser": line ##:
    trace [- parser input]
             ^^^^^^
WORD: "input": line ##:
    trace [- parser input]
                    ^^^^^
SEPARATOR: "]": line ##:
    trace [- parser input]
                         ^
LINE-BREAK: line ##:
    trace [- parser input]
                          ^
INDENT: line ##:
    print trace
^^^^
WORD: "print": line ##:
    print trace
    ^^^^^
WORD: "trace": line ##:
    print trace
          ^^^^^
LINE-BREAK: line ##:
    print trace
               ^
LINE-BREAK: line ##:
<BLANK-LINE>
^
INDENT: line ##:
*PARSER*:
^
*PARSER*:
    trace [- parser input]
    print trace
        [ + warnings, - parser input, - parser output,
          + parser commands, - subexpression elements,
          - subexpression details, - subexpression lines, - keys,
          - bracketed subexpressions ]
*PARSER*:
    print indentation mark "*TOP* *LEVEL*"
        block TOP LEVEL: indentation mark [< "*TOP*" "*LEVEL*" >] []
                         with parsing selectors []
                         with parsing options [end at le indent,
                                               end at line separator,
                                               end at outer closing,
                                               enable indented paragraph,
                                               enable header]
    define top level parsing selectors [my selector]
    print indentation mark "*TOP* *LEVEL*"
        block TOP LEVEL: indentation mark [< "*TOP*" "*LEVEL*" >] []
                         with parsing selectors [my selector]
                         with parsing options [end at le indent,
                                               end at line separator,
                                               end at outer closing,
                                               enable indented paragraph,
                                               enable header]
    print bracket ""
        block TOP LEVEL: bracket "``" ... "''" [data]
        block TOP LEVEL: bracket [< "[" "<" >] ... [< ">" "]" >]
                         [data, atom]
                         with parsing selectors [atom]
                         with label reformatter
        block TOP LEVEL: bracket [< "{" "*" >] ... [< "*" "}" >] [data]
                         with multivalue reformatter ( "," )
        block TOP LEVEL: bracket "(" ... ")" [data]
        block TOP LEVEL: bracket "[" ... "]" [data]
        block TOP LEVEL: bracket "`" ... "'" [data]
                         with parsing selectors [data]
        block TOP LEVEL: bracket [< "{" "{" >] ... [< "}" "}" >] [data]
        block TOP LEVEL: bracket [< "[" "$" >] ... [< "$" "]" >]
                         [data, atom]
                         with parsing selectors [data]
                         with special reformatter
    print typed bracket ""
        block TOP LEVEL: typed bracket "{" ... "|" ... "|" ... "}"
                         // "||" is also allowed.
                         [data]
                         with attribute selectors [data]
                         with attributes ":" ... "=" ... ","
                         with attribute negator "no"
                         with attribute flags initiator "["
                         with attribute multivalue initiator [< "{" "*" >]
                         with prefix selectors []
    print indentation mark ""
        block TOP LEVEL: indentation mark [< "*PARSER*" "*TEST*" ":" >] ... ";"
                         [TOP LEVEL]
        block TOP LEVEL: indentation mark [< "*PARSER*" ":" >] ... ";"
                         [TOP LEVEL]
                         with parsing selectors [data]
        block TOP LEVEL: indentation mark [< "*TOP*" "*LEVEL*" >] []
                         with parsing selectors [my selector]
                         with parsing options [end at le indent,
                                               end at line separator,
                                               end at outer closing,
                                               enable indented paragraph,
                                               enable header]
======= PARSER TEST: "[" x <+ y +> z "{" w "|" 4 "|" "}" m "(" n "(" p
                         ")" ")" "]"
======= PARSER TEST: "`" a b c "[" $ MISSING $ "]" "[" < e f g "[" < h i
                         > "]" j > "]" "'"
======= END PARSER TEST(S)
*PARSER*:
    begin block X
    define top level parsing selectors [+ data]
    print indentation mark "*TOP* *LEVEL*"
        block X: indentation mark [< "*TOP*" "*LEVEL*" >] []
                 with parsing selectors [data, my selector]
                 with parsing options [end at le indent,
                                       end at line separator,
                                       end at outer closing,
                                       enable indented paragraph,
                                       enable header]
        block TOP LEVEL: indentation mark [< "*TOP*" "*LEVEL*" >] []
                         with parsing selectors [my selector]
                         with parsing options [end at le indent,
                                               end at line separator,
                                               end at outer closing,
                                               enable indented paragraph,
                                               enable header]
======= PARSER TEST: [x <+ y +> z {w|4|w} m (n (p))]
======= PARSER TEST: `a b c [$ MISSING $] [< e f g [< h i >] j >]'
======= END PARSER TEST(S)
*PARSER*:
    end block X
*PARSER*:
    trace [+ subexpression lines]
======= PARSER TEST:
======= line ##:
    [ x <+ y +> z {w|4|} m (n (p)) ]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    trace [- subexpression lines]
    trace [+ subexpression details]
======= PARSER TEST:
!@@ := "[" x "<+" y "+>" z "{" w "|" 4 "|" "}" m "(" n "(" p ")" ")" "]":
           .terminator = "<LF>"
           .position[H] = PACKED_VEC
           .initiator = [$ LOGICAL_LINE $]
======= END PARSER TEST(S)
*PARSER*:
    trace [+ subexpression elements]
======= PARSER TEST: "[" x <+ y +> z "{" w "|" 4 "|" "}" m "(" n "(" p
                         ")" ")" "]"
!@@ := "[" x "<+" y "+>" z "{" w "|" 4 "|" "}" m "(" n "(" p ")" ")" "]":
           .terminator = "<LF>"
           .position[H] = PACKED_VEC
           .initiator = [$ LOGICAL_LINE $]
======= END PARSER TEST(S)
*PARSER*:
    trace [- subexpression details]
======= PARSER TEST: "[" x <+ y +> z "{" w "|" 4 "|" "}" m "(" n "(" p
                         ")" ")" "]"
======= END PARSER TEST(S)
*PARSER*:
    trace [+ subexpression lines]
======= PARSER TEST: "[" x <+ y +> z "{" w "|" 4 "|" "}" m "(" n "(" p
                         ")" ")" "]"
======= line ##:
    [ x <+ y +> z {w|4|} m (n (p)) ]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    begin block X
    define top level parsing selectors [+ data]
======= PARSER TEST: {x|{x} hi|x}
======= line ##:
    {x|{x} hi|}
    ^^^^^^^^^^^
------- line ##:
    {x|{x} hi|}
    ^^^^^^^^^^^
------- line ##:
    {x|{x} hi|}
       ^^^
======= END PARSER TEST(S)
*PARSER*:
    end block X
*PARSER*:
    begin block X
ERROR: in line ##: `"foo"' does not name a lexeme type:
    define mapped lexeme "foo" [data]
                         ^^^^^
    define mapped lexeme "PREMATURE-END-OF-FILE" [data]
        with token value {p}
    define mapped lexeme "PREMATURE-END-OF-FILE" [data]
    print mapped lexeme ""
        block X: mapped lexeme "PREMATURE-END-OF-FILE" [data]
        block X: mapped lexeme "PREMATURE-END-OF-FILE" [data]
                 with token value {p}
    end block X
    print mapped lexeme ""
        nothing found
*PARSER*:
    trace [+ parser output]
    define top level lexical master DEFAULT
    begin block X
BRACKETED EXPRESSION:
    @<hello> <there>
    line ##:
@<hello> <there>
^^^^^^^^^^^^^^^^
*PARSER*:
    define top level parsing selectors [data]
    define top level lexical master DATA-CHECK
    define mapped lexeme "DATA" [data]
        with token value {data}
BRACKETED EXPRESSION:
    {data} @<hello> <there>
    line ###:
@<hello> <there>
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {data} @<goodby> <there>
    line ###:
@<goodby> <there>
^^^^^^^^^^^^^^^^^
*PARSER*:
    end block X
BRACKETED EXPRESSION:
    @<hello> <there>
    line ###:
@<hello> <there>
^^^^^^^^^^^^^^^^
*PARSER*:
    begin block X
    define ID character "@"
    begin block Y
    define ID character disabled
    begin block Z
    define ID character "$"
    print ID
        block Z: ID character `$'
        block Y: ID character disabled
        block X: ID character `@'
        block TOP LEVEL: ID character disabled
    end block Z
    end block Y
    end block X
    print ID
        block TOP LEVEL: ID character disabled
*PARSER*:
    begin block X
    define ID character "@"
    define top level lexical master DATA-CHECK
    define mapped lexeme "DATA" [TOP LEVEL]
        with token value {data}
    define bracket type "data" [TOP LEVEL]
        with parsing selectors [data]
        with group line
        with data reformatter
             ( "@@@@", "::=",
               ( ":" ), "=", "not", "[", "{*" )
BRACKETED EXPRESSION:
    ID 6 is {|{|Jill|} said `hello there {|Jack|}'|}
    line ###:
ID 6 is @@
^^^^^^^^^^
BRACKETED EXPRESSION:
    ID 4 is {|Jill|}
    line ###:
ID 4 is @@
^^^^^^^^^^
*PARSER*:
    print bracket type ""
        block X: bracket type "data" [TOP LEVEL]
                 with parsing selectors [data]
                 with group line
                 with data reformatter ( "@@@@", "::=", {|":"|}, "=",
                 "not", "[", [< "{" "*" >] )
    print mapped lexeme ""
        block X: mapped lexeme "DATA" [TOP LEVEL]
                 with token value {data}
    end block X
*PARSER*:
    begin block X
    print top level
        block X:  selectors [my selector]
                  options [end at le indent, end at line separator,
                           end at outer closing,
                           enable indented paragraph, enable header]
                  lexical master "DEFAULT"
        block TOP LEVEL:  selectors [my selector]
                          options [end at le indent,
                                   end at line separator,
                                   end at outer closing,
                                   enable indented paragraph,
                                   enable header]
                          lexical master "DEFAULT"
    define top level line separator ";"
    print top level
        block X:  selectors [my selector]
                  options [end at le indent, end at line separator,
                           end at outer closing,
                           enable indented paragraph, enable header]
                  lexical master "DEFAULT"
                  line separator ";"
        block TOP LEVEL:  selectors [my selector]
                          options [end at le indent,
                                   end at line separator,
                                   end at outer closing,
                                   enable indented paragraph,
                                   enable header]
                          lexical master "DEFAULT"
BRACKETED EXPRESSION:
    Hi there;
    line ###:
Hi there; Bye there
^^^^^^^^^
BRACKETED EXPRESSION:
    Bye there
    line ###:
Hi there; Bye there
          ^^^^^^^^^
BRACKETED EXPRESSION:
    Ho HO;
    line ###:
Ho HO;
^^^^^^
*PARSER*:
    define top level line separator NONE
    print top level
        block X:  selectors [my selector]
                  options [end at le indent, end at line separator,
                           end at outer closing,
                           enable indented paragraph, enable header]
                  lexical master "DEFAULT"
        block TOP LEVEL:  selectors [my selector]
                          options [end at le indent,
                                   end at line separator,
                                   end at outer closing,
                                   enable indented paragraph,
                                   enable header]
                          lexical master "DEFAULT"
BRACKETED EXPRESSION:
    Hi there ";" Bye there
    line ###:
Hi there; Bye there
^^^^^^^^^^^^^^^^^^^
*PARSER*:
    end block X
*PARSER*:
    begin block X
    trace [+ parser input, - parser output]
    print input
        [ - enable integer commas, - enable fraction commas,
          + enable numeric words, + enable naturals ]
NUMERIC-WORD: nan: line ###:
NaN
^^^
LINE-BREAK: line ###:
NaN
   ^
INDENT: line ###:
123
^
NATURAL: 123: line ###:
123
^^^
LINE-BREAK: line ###:
123
   ^
INDENT: line ###:
1,234
^
NUMERIC: "1,234": line ###:
1,234
^^^^^
LINE-BREAK: line ###:
1,234
     ^
INDENT: line ###:
1,234.5678
^
NUMERIC: "1,234.5678": line ###:
1,234.5678
^^^^^^^^^^
LINE-BREAK: line ###:
1,234.5678
          ^
INDENT: line ###:
0.123,4
^
NUMERIC: "0.123,4": line ###:
0.123,4
^^^^^^^
LINE-BREAK: line ###:
0.123,4
       ^
INDENT: line ###:
1,234.567,8
^
NUMERIC: "1,234.567,8": line ###:
1,234.567,8
^^^^^^^^^^^
LINE-BREAK: line ###:
1,234.567,8
           ^
LINE-BREAK: line ###:
<BLANK-LINE>
^
INDENT: line ###:
*PARSER*:
^
WORD: "*PARSER*": line ###:
*PARSER*:
^^^^^^^^
SEPARATOR: ":": line ###:
*PARSER*:
        ^
LINE-BREAK: line ###:
*PARSER*:
         ^
INDENT: line ###:
    input [- enable numeric words,
^^^^
WORD: "input": line ###:
    input [- enable numeric words,
    ^^^^^
SEPARATOR: "[": line ###:
    input [- enable numeric words,
          ^
MARK: "-": line ###:
    input [- enable numeric words,
           ^
WORD: "enable": line ###:
    input [- enable numeric words,
             ^^^^^^
WORD: "numeric": line ###:
    input [- enable numeric words,
                    ^^^^^^^
WORD: "words": line ###:
    input [- enable numeric words,
                            ^^^^^
SEPARATOR: ",": line ###:
    input [- enable numeric words,
                                 ^
LINE-BREAK: line ###:
    input [- enable numeric words,
                                  ^
INDENT: line ###:
           - enable naturals,
^^^^^^^^^^^
MARK: "-": line ###:
           - enable naturals,
           ^
WORD: "enable": line ###:
           - enable naturals,
             ^^^^^^
WORD: "naturals": line ###:
           - enable naturals,
                    ^^^^^^^^
SEPARATOR: ",": line ###:
           - enable naturals,
                            ^
LINE-BREAK: line ###:
           - enable naturals,
                             ^
INDENT: line ###:
           + enable integer commas,
^^^^^^^^^^^
MARK: "+": line ###:
           + enable integer commas,
           ^
WORD: "enable": line ###:
           + enable integer commas,
             ^^^^^^
WORD: "integer": line ###:
           + enable integer commas,
                    ^^^^^^^
WORD: "commas": line ###:
           + enable integer commas,
                            ^^^^^^
SEPARATOR: ",": line ###:
           + enable integer commas,
                                  ^
LINE-BREAK: line ###:
           + enable integer commas,
                                   ^
INDENT: line ###:
           + enable fraction commas]
^^^^^^^^^^^
MARK: "+": line ###:
           + enable fraction commas]
           ^
WORD: "enable": line ###:
           + enable fraction commas]
             ^^^^^^
WORD: "fraction": line ###:
           + enable fraction commas]
                    ^^^^^^^^
WORD: "commas": line ###:
           + enable fraction commas]
                             ^^^^^^
SEPARATOR: "]": line ###:
           + enable fraction commas]
                                   ^
LINE-BREAK: line ###:
           + enable fraction commas]
                                    ^
INDENT: line ###:
    print input
^^^^
WORD: "print": line ###:
    print input
    ^^^^^
WORD: "input": line ###:
    print input
          ^^^^^
LINE-BREAK: line ###:
    print input
               ^
LINE-BREAK: line ###:
<BLANK-LINE>
^
INDENT: line ###:
NaN
^
*PARSER*:
    input [- enable numeric words,
           - enable naturals,
           + enable integer commas,
           + enable fraction commas]
    print input
        [ + enable integer commas, + enable fraction commas,
          - enable numeric words, - enable naturals ]
NUMBER: nan: line ###:
NaN
^^^
LINE-BREAK: line ###:
NaN
   ^
INDENT: line ###:
123
^
NUMBER: 123: line ###:
123
^^^
LINE-BREAK: line ###:
123
   ^
INDENT: line ###:
1,234
^
NUMBER: 1234: line ###:
1,234
^^^^^
LINE-BREAK: line ###:
1,234
     ^
INDENT: line ###:
1,234.5678
^
NUMBER: 1234.5678: line ###:
1,234.5678
^^^^^^^^^^
LINE-BREAK: line ###:
1,234.5678
          ^
INDENT: line ###:
0.123,4
^
NUMBER: 0.1234: line ###:
0.123,4
^^^^^^^
LINE-BREAK: line ###:
0.123,4
       ^
INDENT: line ###:
1,234.567,8
^
NUMBER: 1234.5678: line ###:
1,234.567,8
^^^^^^^^^^^
LINE-BREAK: line ###:
1,234.567,8
           ^
LINE-BREAK: line ###:
<BLANK-LINE>
^
LINE-BREAK: line ###:
<BLANK-LINE>
^
INDENT: line ###:
*PARSER*:
^
WORD: "*PARSER*": line ###:
*PARSER*:
^^^^^^^^
SEPARATOR: ":": line ###:
*PARSER*:
        ^
LINE-BREAK: line ###:
*PARSER*:
         ^
INDENT: line ###:
    end block X
^^^^
WORD: "end": line ###:
    end block X
    ^^^
WORD: "block": line ###:
    end block X
        ^^^^^
WORD: "X": line ###:
    end block X
              ^
LINE-BREAK: line ###:
    end block X
               ^
END-OF-FILE: line ###:
<END-OF-FILE>
^
*PARSER*:
    end block X
