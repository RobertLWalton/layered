parser print selectors:
    [ - parser, + code ]
parser define selector my selector
ERROR: in line 13: extraneous stuff after:
parser define selector operator 1 ++ extra stuff
                                ^
parser print selectors:
    [ - parser, + code, - my selector, - operator1 ]
parser print trace:
    [ - warnings, - parser input, - parser output, + parser commands,
      - subexpression elements, - subexpression details,
      - subexpression lines, - keys, - bracketed subexpressions ]
parser trace [+ parser input]
WORD: "parser": line 19:
parser trace [- parser input]
^^^^^^
WORD: "trace": line 19:
parser trace [- parser input]
       ^^^^^
SEPARATOR: "[": line 19:
parser trace [- parser input]
             ^
MARK: "-": line 19:
parser trace [- parser input]
              ^
WORD: "parser": line 19:
parser trace [- parser input]
                ^^^^^^
WORD: "input": line 19:
parser trace [- parser input]
                       ^^^^^
SEPARATOR: "]": line 19:
parser trace [- parser input]
                            ^
LINE_BREAK: line 19:
parser trace [- parser input]
                             ^
parser print trace:
    [ - warnings, + parser input, - parser output, + parser commands,
      - subexpression elements, - subexpression details,
      - subexpression lines, - keys, - bracketed subexpressions ]
WORD: "parser": line 20:
parser print trace
^^^^^^
WORD: "print": line 20:
parser print trace
       ^^^^^
WORD: "trace": line 20:
parser print trace
             ^^^^^
LINE_BREAK: lines 20-21:
parser print trace
                  ^
<BLANK-LINE>
^
parser trace [- parser input]
parser print trace:
    [ - warnings, - parser input, - parser output, + parser commands,
      - subexpression elements, - subexpression details,
      - subexpression lines, - keys, - bracketed subexpressions ]
parser print selectors:
    [ - parser, + code, - my selector, - operator1 ]
parser define context "default"
       with parsing selectors [parser,my selector]
parser print selectors:
    [ + parser, - code, + my selector, - operator1 ]
parser define context "default"
       with parsing selectors [code]
parser print selectors:
    [ - parser, + code, - my selector, - operator1 ]
======= TEST: parser test [ x <+ y +> z { u , v , w } m ( n ( p ) ) ]
parser trace [+ subexpression lines]
======= TEST:
------- line 32:
parser test [ x <+ y +> z {u,v,w} m (n (p)) ]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser trace [- subexpression lines]
parser trace [+ subexpression details]
======= TEST: parser test [ x <+ y +> z { u , v , w } m ( n ( p ) ) ] |:
              .terminator = "␤"
              .position = {| |}
parser trace [+ subexpression elements]
======= TEST: parser test [ x <+ y +> z { u , v , w } m ( n ( p ) ) ]
    parser test [ x <+ y +> z { u , v , w } m ( n ( p ) ) ] |:
    .terminator = "␤"
    .position = {| |}
parser trace [- subexpression details]
======= TEST: parser test [ x <+ y +> z { u , v , w } m ( n ( p ) ) ]
parser trace [+ subexpression lines]
======= TEST: parser test [ x <+ y +> z { u , v , w } m ( n ( p ) ) ]
------- line 41:
parser test [ x <+ y +> z {u,v,w} m (n (p)) ]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser begin special
parser define context "parser test special"
       with parsing selectors [parser]
parser print context "parser test special":
    block special: selectors = [parser]
parser print context "parser test special"
======= TEST: parser test special
              [x <+ y +> z { u , v , w } m ( n ( p ) )]
------- line 47:
parser test special [ x <+ y +> z {u,v,w} m (n (p)) ]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 47:
parser test special [ x <+ y +> z {u,v,w} m (n (p)) ]
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser print context "default":
    block special: selectors = [code]
    block standard: selectors = [code]
    block TOP-LEVEL: selectors = []
parser print context "default"
parser end special
parser print context "parser test special":
    not found
parser print context "parser test special"
parser print context "parser test":
    block TOP-LEVEL: selectors = none
parser print context "parser test"
parser print context "parser":
    block TOP-LEVEL: selectors = [parser]
parser print context "parser"
======= TEST: parser test special [ x <+ y +> z { u , v , w } m ( n ( p
              ) ) ]
------- line 53:
parser test special [ x <+ y +> z {u,v,w} m (n (p)) ]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
