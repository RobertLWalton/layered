parser print selector "":
    block standard: code
    block TOP LEVEL: prefix
    block TOP LEVEL: data
parser define selector my selector
ERROR: in line 13: extraneous stuff after:
parser define selector operator 1 ++ extra stuff
                                ^
parser print selector "":
    block standard: my selector
    block standard: code
    block TOP LEVEL: prefix
    block TOP LEVEL: data
parser print context "":
    block standard: default [code]
                            options [end at le indent,
                                     end at line separator,
                                     end at outer closing]
    block TOP LEVEL: default []
                             options [end at le indent,
                                      end at line separator,
                                      end at outer closing]
    block TOP LEVEL: parser [data]
                            options [end at le indent,
                                     end at line separator,
                                     end at outer closing]
    block TOP LEVEL: parser test []
parser print trace:
    [ + warnings, - parser input, - parser output, + parser commands,
      - subexpression elements, - subexpression details,
      - subexpression lines, - keys, - bracketed subexpressions ]
parser trace [+ parser input]
WORD: "parser": line 19:
parser print trace
^^^^^^
WORD: "print": line 19:
parser print trace
       ^^^^^
WORD: "trace": line 19:
parser print trace
             ^^^^^
LINE_BREAK: line 19:
parser print trace
                  ^
INDENT: line 20:
parser trace [- parser input]
^
parser print trace:
    [ + warnings, + parser input, - parser output, + parser commands,
      - subexpression elements, - subexpression details,
      - subexpression lines, - keys, - bracketed subexpressions ]
WORD: "parser": line 20:
parser trace [- parser input]
^^^^^^
WORD: "trace": line 20:
parser trace [- parser input]
       ^^^^^
SEPARATOR: "[": line 20:
parser trace [- parser input]
             ^
MARK: "-": line 20:
parser trace [- parser input]
              ^
WORD: "parser": line 20:
parser trace [- parser input]
                ^^^^^^
WORD: "input": line 20:
parser trace [- parser input]
                       ^^^^^
SEPARATOR: "]": line 20:
parser trace [- parser input]
                            ^
LINE_BREAK: line 20:
parser trace [- parser input]
                             ^
INDENT: line 21:
parser print trace
^
parser trace [- parser input]
parser print trace:
    [ + warnings, - parser input, - parser output, + parser commands,
      - subexpression elements, - subexpression details,
      - subexpression lines, - keys, - bracketed subexpressions ]
parser print context "":
    block standard: default [code]
                            options [end at le indent,
                                     end at line separator,
                                     end at outer closing]
    block TOP LEVEL: default []
                             options [end at le indent,
                                      end at line separator,
                                      end at outer closing]
    block TOP LEVEL: parser [data]
                            options [end at le indent,
                                     end at line separator,
                                     end at outer closing]
    block TOP LEVEL: parser test []
parser define context "default"
       with parsing selectors [data, my selector]
       with parsing options [default options]
parser print context "":
    block standard: default [data, my selector]
                            options [end at le indent,
                                     end at line separator,
                                     end at outer closing]
    block TOP LEVEL: default []
                             options [end at le indent,
                                      end at line separator,
                                      end at outer closing]
    block TOP LEVEL: parser [data]
                            options [end at le indent,
                                     end at line separator,
                                     end at outer closing]
    block TOP LEVEL: parser test []
parser define context "default"
       with parsing selectors [code]
       with parsing options [default options]
parser print context "":
    block standard: default [code]
                            options [end at le indent,
                                     end at line separator,
                                     end at outer closing]
    block TOP LEVEL: default []
                             options [end at le indent,
                                      end at line separator,
                                      end at outer closing]
    block TOP LEVEL: parser [data]
                            options [end at le indent,
                                     end at line separator,
                                     end at outer closing]
    block TOP LEVEL: parser test []
======= TEST: parser test "[" x <+ y +> z "{" "|" 4 "|" w "}" m "(" n
                  "(" p ")" ")" "]"
======= END TEST
parser trace [+ subexpression lines]
======= TEST:
------- line 35:
parser test [ x <+ y +> z {|4|w} m (n (p)) ]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser trace [- subexpression lines]
parser trace [+ subexpression details]
======= TEST:
@1 = parser test "[" x <+ y +> z "{" "|" 4 "|" w "}" m "(" n "(" p ")"
             ")" "]":
         .terminator = "<LF>"
         .position[H] = {}
         .initiator = [$ LOGICAL_LINE $]
======= END TEST
parser trace [+ subexpression elements]
======= TEST: parser test "[" x <+ y +> z "{" "|" 4 "|" w "}" m "(" n
                  "(" p ")" ")" "]"
@2 = parser test "[" x <+ y +> z "{" "|" 4 "|" w "}" m "(" n "(" p ")"
             ")" "]":
         .terminator = "<LF>"
         .position[H] = {}
         .initiator = [$ LOGICAL_LINE $]
======= END TEST
parser trace [- subexpression details]
======= TEST: parser test "[" x <+ y +> z "{" "|" 4 "|" w "}" m "(" n
                  "(" p ")" ")" "]"
======= END TEST
parser trace [+ subexpression lines]
======= TEST: parser test "[" x <+ y +> z "{" "|" 4 "|" w "}" m "(" n
                  "(" p ")" ")" "]"
------- line 44:
parser test [ x <+ y +> z {|4|w} m (n (p)) ]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser begin special
parser define context "parser test special"
       with parsing selectors [data]
       with parsing options [default options]
parser print context "parser<SP>test<SP>special":
    block special: parser test special [data]
                                       options [end at le indent,
                                                end at line separator,
                                                end at outer closing]
======= TEST: parser test special [x <+ y +> z {w|4|w} m (n (p))]
------- line 51:
parser test special [ x <+ y +> z {|4|w} m (n (p)) ]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 51:
parser test special [ x <+ y +> z {|4|w} m (n (p)) ]
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 51:
parser test special [ x <+ y +> z {|4|w} m (n (p)) ]
                                  ^^^^^^
------- line 51:
parser test special [ x <+ y +> z {|4|w} m (n (p)) ]
                                           ^^^^^^^
------- line 51:
parser test special [ x <+ y +> z {|4|w} m (n (p)) ]
                                              ^^^
======= END TEST
parser print context "default":
    block special: default [code]
                           options [end at le indent,
                                    end at line separator,
                                    end at outer closing]
    block standard: default [code]
                            options [end at le indent,
                                     end at line separator,
                                     end at outer closing]
    block TOP LEVEL: default []
                             options [end at le indent,
                                      end at line separator,
                                      end at outer closing]
parser end special
parser print context "parser<SP>test<SP>special":
    not found
parser print context "parser<SP>test":
    block TOP LEVEL: parser test []
parser print context "parser":
    block TOP LEVEL: parser [data]
                            options [end at le indent,
                                     end at line separator,
                                     end at outer closing]
    block TOP LEVEL: parser test []
======= TEST: parser test special "[" x <+ y +> z "{" "|" 4 "|" w "}" m
                  "(" n "(" p ")" ")" "]"
------- line 57:
parser test special [ x <+ y +> z {|4|w} m (n (p)) ]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
