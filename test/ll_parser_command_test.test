parser print selector "":
    block standard: code
    block TOP LEVEL: parser
parser define selector my selector
ERROR: in line 13: extraneous stuff after:
parser define selector operator 1 ++ extra stuff
                                ^
parser print selector "":
    block standard: my selector
    block standard: code
    block TOP LEVEL: parser
parser print context "":
    block standard: default [code]
    block TOP LEVEL: default []
    block TOP LEVEL: parser [+ parser, - code, - my selector]
    block TOP LEVEL: parser test []
parser print trace:
    [ - warnings, - parser input, - parser output, + parser commands,
      - subexpression elements, - subexpression details,
      - subexpression lines, - keys, - bracketed subexpressions ]
parser trace [+ parser input]
WORD: "parser": line 20:
parser trace [- parser input]
^^^^^^
WORD: "trace": line 20:
parser trace [- parser input]
       ^^^^^
SEPARATOR: "[": line 20:
parser trace [- parser input]
             ^
MARK: "-": line 20:
parser trace [- parser input]
              ^
WORD: "parser": line 20:
parser trace [- parser input]
                ^^^^^^
WORD: "input": line 20:
parser trace [- parser input]
                       ^^^^^
SEPARATOR: "]": line 20:
parser trace [- parser input]
                            ^
LINE_BREAK: line 20:
parser trace [- parser input]
                             ^
parser print trace:
    [ - warnings, + parser input, - parser output, + parser commands,
      - subexpression elements, - subexpression details,
      - subexpression lines, - keys, - bracketed subexpressions ]
WORD: "parser": line 21:
parser print trace
^^^^^^
WORD: "print": line 21:
parser print trace
       ^^^^^
WORD: "trace": line 21:
parser print trace
             ^^^^^
LINE_BREAK: lines 21-22:
parser print trace
                  ^
<BLANK-LINE>
^
parser trace [- parser input]
parser print trace:
    [ - warnings, - parser input, - parser output, + parser commands,
      - subexpression elements, - subexpression details,
      - subexpression lines, - keys, - bracketed subexpressions ]
parser print context "":
    block standard: default [code]
    block TOP LEVEL: default []
    block TOP LEVEL: parser [+ parser, - code, - my selector]
    block TOP LEVEL: parser test []
parser define context "default"
       with parsing selectors [parser, my selector]
parser print context "":
    block standard: default [parser, my selector]
    block TOP LEVEL: default []
    block TOP LEVEL: parser [+ parser, - code, - my selector]
    block TOP LEVEL: parser test []
parser define context "default"
       with parsing selectors [code]
parser print context "":
    block standard: default [code]
    block TOP LEVEL: default []
    block TOP LEVEL: parser [+ parser, - code, - my selector]
    block TOP LEVEL: parser test []
======= TEST: parser test "[" x <+ y +> z "{" u "," v "," w "}" m "(" n
                  "(" p ")" ")" "]"
======= END TEST
parser trace [+ subexpression lines]
======= TEST:
------- line 33:
parser test [ x <+ y +> z {u, v, w} m (n (p)) ]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser trace [- subexpression lines]
parser trace [+ subexpression details]
======= TEST:
@1 = parser test "[" x <+ y +> z "{" u "," v "," w "}" m "(" n "(" p ")"
             ")" "]":
         .type = "<LF>"
         .position[H] = {}
======= END TEST
parser trace [+ subexpression elements]
======= TEST: parser test "[" x <+ y +> z "{" u "," v "," w "}" m "(" n
                  "(" p ")" ")" "]"
@2 = parser test "[" x <+ y +> z "{" u "," v "," w "}" m "(" n "(" p ")"
             ")" "]":
         .type = "<LF>"
         .position[H] = {}
======= END TEST
parser trace [- subexpression details]
======= TEST: parser test "[" x <+ y +> z "{" u "," v "," w "}" m "(" n
                  "(" p ")" ")" "]"
======= END TEST
parser trace [+ subexpression lines]
======= TEST: parser test "[" x <+ y +> z "{" u "," v "," w "}" m "(" n
                  "(" p ")" ")" "]"
------- line 42:
parser test [ x <+ y +> z {u, v, w} m (n (p)) ]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
parser begin special
parser define context "parser test special"
       with parsing selectors [parser]
parser print context "parser<SP>test<SP>special":
    block special: parser test special [parser]
======= TEST: parser test special
                  [x <+ y +> z "{" u "," v "," w "}" m (n (p))]
------- line 48:
parser test special [ x <+ y +> z {u, v, w} m (n (p)) ]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 48:
parser test special [ x <+ y +> z {u, v, w} m (n (p)) ]
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 48:
parser test special [ x <+ y +> z {u, v, w} m (n (p)) ]
                                              ^^^^^^^
------- line 48:
parser test special [ x <+ y +> z {u, v, w} m (n (p)) ]
                                                 ^^^
======= END TEST
parser print context "default":
    block special: default [code]
    block standard: default [code]
    block TOP LEVEL: default []
parser end special
parser print context "parser<SP>test<SP>special":
    not found
parser print context "parser<SP>test":
    block TOP LEVEL: parser test []
parser print context "parser":
    block TOP LEVEL: parser [+ parser, - code, - my selector]
    block TOP LEVEL: parser test []
======= TEST: parser test special "[" x <+ y +> z "{" u "," v "," w "}"
                  m "(" n "(" p ")" ")" "]"
------- line 54:
parser test special [ x <+ y +> z {u, v, w} m (n (p)) ]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= END TEST
