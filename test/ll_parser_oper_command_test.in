// Layered Languages Parser Operator Command Test Data
//
// File:	ll_parser_oper_command_test.in
// Author:	Bob Walton (walton@acm.org)
// Date:	
Wed Feb 24 14:45:37 EST 2021
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

*PARSER*:
    print selector ""
    print pass
    print top level
    define pass operator [code, math] after top
    print pass
    trace [+ parser commands, + warnings ]
    trace [+ subexpression elements,
           + subexpression lines ]
    trace [- operator subexpressions, - operator fixity]
    print selector ""
    print operator ""

// Test define and undefine
//
*PARSER*:
    begin block BLOCK1
*PARSER* *TEST*:
    ( x / y ^ z w )
*PARSER*:
    define operator "/" [code, math] infix
        with binary reformatter with precedence -100
    print operator "/"
    define operator "^" [code, math] infix
        with binary reformatter with precedence +100
*PARSER* *TEST*:
    ( x / y ^ z w )
*PARSER*:
    print operator ""
    undefine operator "/" [code, math] infix
        with precedence -100
    print operator "/"
*PARSER* *TEST*:
    ( x / y ^ z w )
*PARSER*:
    end block BLOCK1
    print operator ""
*PARSER* *TEST*:
    ( x / y ^ z w )

// Test erroneous defines and undefines
//
*PARSER*:
    begin block BLOCK1
    define operator "+" [code, math] infix
        with binary reformatter
    define operator "+" [code, math] xxfix
        with precedence 3000
    define operator "+" [code, math] nofix
        with precedence 3000
        with none such reformatter
    print operator ""
    define operator "+" [code, math] nofix
        with precedence 3000000
        with binary reformatter

    define operator "+" [code, math] infix
        with binary reformatter
        with precedence 3000
    define operator "+" [code, math] nofix
        with precedence 3000
    undefine operator "+" [code, math] infix
    undefine operator "+" [code, math] 
        with precedence 3000
        with binary reformatter
    undefine operator "+" [code, math] prefix
        with precedence 3000
    undefine operator "+" [code, math] infix
        with precedence 2000
    undefine operator "+" [code, math] infix
        with precedence 3000
    print operator ""
    end block BLOCK1

// Operators are introduced lowest precedence first

*PARSER*:
    define operator "=" [code, math] infix
        with precedence 1000
        with right associative reformatter
    define operator "+=" [code, math] infix
        with precedence 1000
        with right associative reformatter
    define operator "-=" [code, math] infix
        with precedence 1000
        with right associative reformatter
    define operator "*=" [code, math] infix
        with precedence 1000
        with right associative reformatter
    define operator "/=" [code, math] infix
        with precedence 1000
        with right associative reformatter
*PARSER* *TEST*:
    (x = y += z w *= p q r = t v)

*PARSER*:
    define operator "," [code, math] nofix
        with precedence 2000
        with separator reformatter
    begin block BLOCK1
    define operator "..." [code, math] nofix
        with precedence 2000
        with separator reformatter
*PARSER* *TEST*:
    (x, y1, z w,, 3,)
    (,, x,, y,,,)
    (x, y... z)

*PARSER*:
    end block BLOCK1
    define operator "BUT NOT" [code, math] infix
        with precedence 3000
        with binary reformatter
    define operator "AND" [code, math] infix
        with precedence 3100
        with infix reformatter
    define operator "OR" [code, math] infix
        with precedence 3100
        with infix reformatter
    define operator "NOT" [code, math] prefix
        with precedence 3200
        with unary reformatter
*PARSER* *TEST*:
    (x OR y BUT NOT z AND w)
    (x OR y BUT NOT z AND w OR p)
    (NOT x y)
    (x NOT y)
    (NOT x AND y)
    (x AND NOT y)
    (x AND AND y)
    (NOT NOT x y)
    (NOT NOT)

*PARSER*:
    define operator "==" [code, math] infix
        with precedence 4000
        with infix and reformatter ( "AND" )
    define operator "/=" [code, math] infix
        with precedence 4000
        with infix and reformatter ( "AND" )
    define operator "!=" [code, math] infix
        with precedence 4000
        with infix and reformatter ( "AND" )
    define operator "<" [code, math] infix
        with precedence 4000
        with infix and reformatter ( "AND" )
    define operator "<=" [code, math] infix
        with precedence 4000
        with infix and reformatter ( "AND" )
    define operator "=<" [code, math] infix
        with precedence 4000
        with infix and reformatter ( "AND" )
    define operator ">" [code, math] infix
        with precedence 4000
        with infix and reformatter ( "AND" )
    define operator ">=" [code, math] infix
        with precedence 4000
        with infix and reformatter ( "AND" )
    define operator "=>" [code, math] infix
        with precedence 4000
        with infix and reformatter ( "AND" )
*PARSER* *TEST*:
    ( x < y <= z > w != p q =< u v )

*PARSER*:
    define operator "+" [code, math] infix prefix
        with precedence 5000
        with sum reformatter ( "+", "-" )
    define operator "-" [code, math] infix prefix
        with precedence 5000
        with sum reformatter ( "+", "-" )
*PARSER* *TEST*:
    ( x + y - z + w - v - u )
    ( - x + y - z )
    ( x < y + 5 <= z )

*PARSER*:
    define operator "/" [code, math] infix
        with precedence 5100
        with binary reformatter
    define operator "*" [code, math] infix
        with precedence 5200
        with infix reformatter
    define operator "^" [code, math] infix
        with precedence 5300
        with binary reformatter
*PARSER* *TEST*:
    ( x * y / z q * m p )
    ( x / y / z )
    ( x ^ 2 * y ^ 2 / y * z )

*PARSER*:
    define operator "@" [code, math] prefix
        with precedence 10000
*PARSER* *TEST*:
    ( - x + y - z )
    ( p * - x + y - z )
    ( @ x + y - @ z )
    ( + - + - x y )

*PARSER*:
    define operator "++" [code, math] postfix
        with precedence 10001
    define operator "--" [code, math] postfix
        with precedence 10001
*PARSER* *TEST*:
    ( x ++ + y - z -- )
    ( x y ++ -- ++ -- )

*PARSER*:
    define operator "<--" [code] nofix
        with precedence 0
        with declare reformatter
    define bracket "{$" ... "$}" [code]
    define operator bracket "{$" ... "$}" [code]
        nofix afix
        with precedence 0
    define operator indentation mark ":" [code]
        nofix afix
        with precedence 0
*PARSER* *TEST*:
    ( foo bar <-- boo bat {$ fee fie fo fum $} )
    ( foo bar <-- {$ fee fie fo fum $} )
    ( <-- boo bat {$ fee fie fo fum $} )
    ( foo bar <-- )
    foo bar <-- boo bat:
    	fee fie fo fum
	he ha ho hum

*PARSER*:
    print operator ""

// Temporary tests
