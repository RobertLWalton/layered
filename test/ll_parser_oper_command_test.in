// Layers Language Parser Operator Command Test Data
//
// File:	ll_parser_oper_command_test.in
// Author:	Bob Walton (walton@acm.org)
// Date:	Tue Apr 16 09:44:33 EDT 2013
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

parser print selectors
parser trace [+ parser commands, + warnings ]
parser trace [+ subexpression elements,
              + subexpression lines ]

// Test define and undefine
//
parser begin block
parser test ( x / y ^ z w )
parser define operator "/" [code, math] infix
       with binary reformatter with precedence 5100
parser define operator "^" [code, math] infix
       with binary reformatter with precedence 5300
parser test ( x / y ^ z w )
parser undefine operator "/" [code, math] infix
       with precedence 5100
parser test ( x / y ^ z w )
parser end block
parser test ( x / y ^ z w )

// Test erroneous defines and undefines
//
parser define operator "+" [code, math] infix
       with binary reformatter
parser define operator "+" [code, math]
       with precedence 3000
       with binary reformatter
parser define operator "+" [code, math] infix nofix
       with precedence 3000
       with binary reformatter
parser define operator "+" [code, math] nofix
       with precedence 3000
       with right associative reformatter
parser define operator "+" [code, math] nofix
       with precedence 3000
       with none such reformatter
parser undefine operator "+" [code, math] infix
parser undefine operator "+" [code, math] infix
       with precedence 3000
       with binary reformatter
parser undefine operator "+" [code, math]
       with precedence 3000

// Operators are introduces lowest precedence first

parser define operator "=" [code, math] infix
       with precedence 1000
       with right associative reformatter
parser define operator "+=" [code, math] infix
       with precedence 1000
       with right associative reformatter
parser define operator "-=" [code, math] infix
       with precedence 1000
       with right associative reformatter
parser define operator "*=" [code, math] infix
       with precedence 1000
       with right associative reformatter
parser define operator "/=" [code, math] infix
       with precedence 1000
       with right associative reformatter
parser test (x = y += z w *= p q r = t v)

parser define operator "," [code, math] nofix
       with precedence 2000
       with separator reformatter
parser test (x,y1,z w,,3,)

parser define operator "BUT NOT" [code, math] nofix
       with precedence 3000
       with binary reformatter
parser define operator "AND" [code, math] infix
       with precedence 3100
       with infix reformatter
parser define operator "OR" [code, math] infix
       with precedence 3100
       with infix reformatter
parser define operator "NOT" [code, math] nofix
       with precedence 3100
       with unary reformatter
parser test (x OR y BUT NOT z AND w)
parser test (x OR y BUT NOT z AND w OR p)
parser test (NOT x y)
parser test (x NOT y)
parser test (NOT x AND y)
parser test (x AND NOT y)

parser define operator "==" [code, math] infix
       with precedence 4000
       with compare reformatter
parser define operator "/=" [code, math] infix
       with precedence 4000
       with compare reformatter
parser define operator "!=" [code, math] infix
       with precedence 4000
       with compare reformatter
parser define operator "<" [code, math] infix
       with precedence 4000
       with compare reformatter
parser define operator "<=" [code, math] infix
       with precedence 4000
       with compare reformatter
parser define operator "=<" [code, math] infix
       with precedence 4000
       with compare reformatter
parser define operator ">" [code, math] infix
       with precedence 4000
       with compare reformatter
parser define operator ">=" [code, math] infix
       with precedence 4000
       with compare reformatter
parser define operator "=>" [code, math] infix
       with precedence 4000
       with compare reformatter
parser test ( x < y <= z > w != p q =< u v )

parser define operator "+" [code, math] infix
       with precedence 5000
       with sum reformatter
parser define operator "-" [code, math] infix
       with precedence 5000
       with sum reformatter
parser test ( x + y - z + w - v - u )
parser test ( - x + y - z )
parser test ( x < y + 5 <= z )

parser define operator "/" [code, math] infix
       with precedence 5100
       with binary reformatter
parser define operator "*" [code, math] infix
       with precedence 5200
       with infix reformatter
parser define operator "^" [code, math] infix
       with precedence 5300
       with binary reformatter
parser test ( x * y / z q * m p )
parser test ( x / y / z )
parser test ( x ^ 2 * y ^ 2 / y * z )

parser define operator "+" [code, math] prefix
       with precedence 10000
       with prefix reformatter
parser define operator "-" [code, math] prefix
       with precedence 10000
       with prefix reformatter
parser define operator "@" [code, math] prefix
       with precedence 10000
       with prefix reformatter
parser test ( - x + y - z )
parser test ( p * - x + y - z )
parser test ( @ x + y - @ z )
parser test ( + - + - x y )

// Temporary tests

