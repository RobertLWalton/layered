parser print selectors:
    [ - parser, + code, - math, - text ]
parser trace [+ parser commands, + warnings ]
parser trace [+ subexpression elements,
              + subexpression lines ]
parser begin block
======= TEST: parser test (x / y ^ z w)
------- line 19:
parser test ( x / y ^ z w )
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 19:
parser test ( x / y ^ z w )
            ^^^^^^^^^^^^^^^
======= END TEST
parser define operator "/" [code, math] infix
       with binary reformatter with precedence 5100
parser define operator "^" [code, math] infix
       with binary reformatter with precedence 5300
======= TEST: parser test (/ x [. ^ y [. z w .] .])
------- line 24:
parser test ( x / y ^ z w )
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 24:
parser test ( x / y ^ z w )
            ^^^^^^^^^^^^^^^
------- line 24:
parser test ( x / y ^ z w )
                  ^^^^^^^
------- line 24:
parser test ( x / y ^ z w )
                      ^^^
======= END TEST
parser undefine operator "/" [code, math] infix
       with precedence 5100
======= TEST: parser test (^ [. x / y .] [. z w .])
------- line 27:
parser test ( x / y ^ z w )
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 27:
parser test ( x / y ^ z w )
            ^^^^^^^^^^^^^^^
------- line 27:
parser test ( x / y ^ z w )
              ^^^^^
------- line 27:
parser test ( x / y ^ z w )
                      ^^^
======= END TEST
parser end block
======= TEST: parser test (x / y ^ z w)
------- line 29:
parser test ( x / y ^ z w )
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 29:
parser test ( x / y ^ z w )
            ^^^^^^^^^^^^^^^
======= END TEST
ERROR: in line 34: expected `with precedence ...' after:
       with binary reformatter
                   ^^^^^^^^^^^
ERROR: in line 35: expected operator flags after:
parser define operator "+" [code, math]
                           ^^^^^^^^^^^^
ERROR: in line 38: operator flags nofix and infix are incompatible:
parser define operator "+" [code, math] infix nofix
                                        ^^^^^^^^^^^
ERROR: in lines 41-43: `right associative' reformatter incompatible with
       nofix operator flag(s):
parser define operator "+" [code, math] nofix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       with precedence 3000
^^^^^^^^^^^^^^^^^^^^^^^^^^^
       with right associative reformatter
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR: in line 46: undefined reformatter name:
       with none such reformatter
            ^^^^^^^^^
ERROR: in line 47: expected `with precedence ...' after:
parser undefine operator "+" [code, math] infix
                                          ^^^^^
ERROR: in lines 48-50: did NOT expect `with ... reformater':
parser undefine operator "+" [code, math] infix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       with precedence 3000
^^^^^^^^^^^^^^^^^^^^^^^^^^^
       with binary reformatter
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR: in line 51: expected operator flags after:
parser undefine operator "+" [code, math]
                             ^^^^^^^^^^^^
parser define operator "," [code, math] nofix
       with precedence 1000
       with separator reformatter
======= TEST: parser test (x, [. y 1 .], [. z w .], [.  .], 3, [.  .])
------- line 59:
parser test (x,y1,z w,,3,)
^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 59:
parser test (x,y1,z w,,3,)
            ^^^^^^^^^^^^^^
------- line 59:
parser test (x,y1,z w,,3,)
               ^^
------- line 59:
parser test (x,y1,z w,,3,)
                  ^^^
------- line 59:
parser test (x,y1,z w,,3,)
                      ^
------- line 59:
parser test (x,y1,z w,,3,)
                         ^
======= END TEST
parser trace [+ keys, + operator subexpressions]
======= TEST: parser test (NOT x y)
------- line 62:
parser test (NOT x y)
^^^^^^^^^^^^^^^^^^^^^
------- line 62:
parser test (NOT x y)
            ^^^^^^^^^
======= END TEST
parser trace [- keys, - operator subexpressions]
parser define operator "NOT" [code, math] nofix
       with precedence 3000
       with unary reformatter
parser define operator "BUT NOT" [code, math] nofix
       with precedence 3000
       with binary reformatter
======= TEST: parser test (NOT [. x y .])
------- line 70:
parser test (NOT x y)
^^^^^^^^^^^^^^^^^^^^^
------- line 70:
parser test (NOT x y)
            ^^^^^^^^^
------- line 70:
parser test (NOT x y)
                 ^^^
======= END TEST
ERROR: operator `NOT' NOT at beginning of subexpression; subexpression
       should be of form `operator operand'; line 71:
parser test (x NOT y)
             ^^^^^^^
ERROR: subexpression is too long; subexpression should be of form
       `operator operand'; line 71:
parser test (x NOT y)
             ^^^^^^^
======= TEST: parser test (x NOT y)
------- line 71:
parser test (x NOT y)
^^^^^^^^^^^^^^^^^^^^^
------- line 71:
parser test (x NOT y)
            ^^^^^^^^^
======= END TEST
ERROR: too many operators in subexpression; subexpression should be of
       form `operator operand'; line 72:
parser test (NOT x NOT y)
             ^^^^^^^^^^^
ERROR: subexpression is too long; subexpression should be of form
       `operator operand'; line 72:
parser test (NOT x NOT y)
             ^^^^^^^^^^^
======= TEST: parser test (NOT x NOT y)
------- line 72:
parser test (NOT x NOT y)
^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 72:
parser test (NOT x NOT y)
            ^^^^^^^^^^^^^
======= END TEST
======= TEST: parser test (BUT NOT x y)
------- line 73:
parser test (x BUT NOT y)
^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 73:
parser test (x BUT NOT y)
            ^^^^^^^^^^^^^
======= END TEST
ERROR: operator `BUT NOT' NOT in middle of subexpression; subexpression
       should be of form `operand operator operand'; line 74:
parser test (BUT NOT x y)
             ^^^^^^^^^^^
ERROR: subexpression is too short; subexpression should be of form
       `operand operator operand'; line 74:
parser test (BUT NOT x y)
             ^^^^^^^^^^^
======= TEST: parser test (BUT NOT [. x y .])
------- line 74:
parser test (BUT NOT x y)
^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 74:
parser test (BUT NOT x y)
            ^^^^^^^^^^^^^
------- line 74:
parser test (BUT NOT x y)
                     ^^^
======= END TEST
parser trace [+ keys, + operator subexpressions]
OPERATOR `NOT' found; line 76:
parser test (NOT x BUT NOT y)
             ^^^
OPERATOR `BUT NOT' found; line 76:
parser test (NOT x BUT NOT y)
                   ^^^^^^^
ERROR: too many operators in subexpression; subexpression should be of
       form `operator operand'; line 76:
parser test (NOT x BUT NOT y)
             ^^^^^^^^^^^^^^^
ERROR: subexpression is too long; subexpression should be of form
       `operator operand'; line 76:
parser test (NOT x BUT NOT y)
             ^^^^^^^^^^^^^^^
======= TEST: parser test (NOT x BUT NOT y)
------- line 76:
parser test (NOT x BUT NOT y)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 76:
parser test (NOT x BUT NOT y)
            ^^^^^^^^^^^^^^^^^
======= END TEST
parser trace [- keys, - operator subexpressions]
parser define operator "AND" [code, math] infix
       with precedence 3100
       with infix reformatter
parser define operator "OR" [code, math] infix
       with precedence 3100
       with infix reformatter
======= TEST: parser test (AND x y z)
------- line 85:
parser test (x AND y AND z)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 85:
parser test (x AND y AND z)
            ^^^^^^^^^^^^^^^
======= END TEST
======= TEST: parser test (NOT [. AND x y .])
------- line 86:
parser test (NOT x AND y)
^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 86:
parser test (NOT x AND y)
            ^^^^^^^^^^^^^
------- line 86:
parser test (NOT x AND y)
                 ^^^^^^^
======= END TEST
ERROR: operator `OR' is not the same as first operator `AND' in
       subexpression; all operators must be the same in this
       subexpression; line 87:
parser test (x AND y OR z)
             ^^^^^^^^^^^^
======= TEST: parser test (AND x y z)
------- line 87:
parser test (x AND y OR z)
^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 87:
parser test (x AND y OR z)
            ^^^^^^^^^^^^^^
======= END TEST
======= TEST: parser test (BUT NOT [. AND x y .] [. OR z w .])
------- line 88:
parser test (x AND y BUT NOT z OR w)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 88:
parser test (x AND y BUT NOT z OR w)
            ^^^^^^^^^^^^^^^^^^^^^^^^
------- line 88:
parser test (x AND y BUT NOT z OR w)
             ^^^^^^^
------- line 88:
parser test (x AND y BUT NOT z OR w)
                             ^^^^^^
======= END TEST
ERROR: missing operand inserted; line 89:
parser test (x AND y AND NOT z)
                         ^
ERROR: operator `NOT' NOT at beginning of subexpression; subexpression
       should be of form `operator operand'; line 89:
parser test (x AND y AND NOT z)
             ^^^^^^^^^^^^^^^^^
ERROR: subexpression is too long; subexpression should be of form
       `operator operand'; line 89:
parser test (x AND y AND NOT z)
             ^^^^^^^^^^^^^^^^^
======= TEST: parser test ([. AND x y ERROR'OPERAND .] NOT z)
------- line 89:
parser test (x AND y AND NOT z)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 89:
parser test (x AND y AND NOT z)
            ^^^^^^^^^^^^^^^^^^^
------- line 89:
parser test (x AND y AND NOT z)
             ^^^^^^^^^^^^
======= END TEST
parser define operator "+" [code, math] infix
       with precedence 5000
       with sum reformatter
parser define operator "-" [code, math] infix
       with precedence 5000
       with sum reformatter
======= TEST: parser test (+ x y [. - z .] w [. - v .] [. - u .])
------- line 97:
parser test ( x + y - z + w - v - u )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 97:
parser test ( x + y - z + w - v - u )
            ^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 97:
parser test ( x + y - z + w - v - u )
                    ^^^
------- line 97:
parser test ( x + y - z + w - v - u )
                            ^^^
------- line 97:
parser test ( x + y - z + w - v - u )
                                ^^^
======= END TEST
======= TEST: parser test (+ [. - x .] y [. - z .])
------- line 98:
parser test ( - x + y - z )
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 98:
parser test ( - x + y - z )
            ^^^^^^^^^^^^^^^
------- line 98:
parser test ( - x + y - z )
              ^^^
------- line 98:
parser test ( - x + y - z )
                      ^^^
======= END TEST
parser define operator "+" [code, math] prefix
       with precedence 10000
parser define operator "-" [code, math] prefix
       with precedence 10000
======= TEST: parser test (+ [. - x .] y [. - z .])
------- line 105:
parser test ( - x + y - z )
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 105:
parser test ( - x + y - z )
            ^^^^^^^^^^^^^^^
------- line 105:
parser test ( - x + y - z )
              ^^^
------- line 105:
parser test ( - x + y - z )
                      ^^^
======= END TEST
