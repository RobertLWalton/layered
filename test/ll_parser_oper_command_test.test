*PARSER*:
    print selector ""
        block standard: text
        block standard: math
        block standard: code
        block TOP LEVEL: atom
        block TOP LEVEL: data
        block TOP LEVEL: TOP LEVEL
    print pass
        top
    print top level
        block standard:  selectors [TOP LEVEL, code]
                         options [end at le indent,
                                  end at line separator,
                                  end at outer closing]
        block TOP LEVEL:  selectors [TOP LEVEL]
                          options [end at le indent,
                                   end at line separator,
                                   end at outer closing]
    print pass
        top
        operator [code, math]
    trace [+ parser commands, + warnings ]
    trace [+ subexpression elements,
           + subexpression lines ]
    print selector ""
        block standard: text
        block standard: math
        block standard: code
        block TOP LEVEL: atom
        block TOP LEVEL: data
        block TOP LEVEL: TOP LEVEL
    print operator ""
        nothing found
*PARSER*:
    begin block BLOCK1
======= PARSER TEST: (x / y ^ z w)
======= line ##:
    ( x / y ^ z w )
    ^^^^^^^^^^^^^^^
------- line ##:
    ( x / y ^ z w )
    ^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    define operator "/" [code, math] infix
        with binary reformatter with precedence -100
    print operator "/"
        block BLOCK1: operator "/" [code, math]
                      infix
                      with precedence -100
                      with binary reformatter
    define operator "^" [code, math] infix
        with binary reformatter with precedence +100
======= PARSER TEST: {"": .operator = "/", .terminator = ")",
                          .initiator = "("|/ x
                          {"": .operator = "^"|^ y {|z w|}|}|}
======= line ##:
    ( x / y ^ z w )
    ^^^^^^^^^^^^^^^
------- line ##:
    ( x / y ^ z w )
    ^^^^^^^^^^^^^^^
------- line ##:
    ( x / y ^ z w )
          ^^^^^^^
------- line ##:
    ( x / y ^ z w )
              ^^^
======= END PARSER TEST(S)
*PARSER*:
    print operator ""
        block BLOCK1: operator "/" [code, math]
                      infix
                      with precedence -100
                      with binary reformatter
        block BLOCK1: operator "^" [code, math]
                      infix
                      with precedence 100
                      with binary reformatter
    undefine operator "/" [code, math] infix
        with precedence -100
    print operator "/"
        block BLOCK1: operator "/" []
                      infix
                      with precedence -100
                      with binary reformatter
======= PARSER TEST: {"": .operator = "^", .terminator = ")",
                          .initiator = "("|^ {|x / y|} {|z w|}|}
======= line ##:
    ( x / y ^ z w )
    ^^^^^^^^^^^^^^^
------- line ##:
    ( x / y ^ z w )
    ^^^^^^^^^^^^^^^
------- line ##:
    ( x / y ^ z w )
      ^^^^^
------- line ##:
    ( x / y ^ z w )
              ^^^
======= END PARSER TEST(S)
*PARSER*:
    end block BLOCK1
    print operator ""
        nothing found
======= PARSER TEST: (x / y ^ z w)
======= line ##:
    ( x / y ^ z w )
    ^^^^^^^^^^^^^^^
------- line ##:
    ( x / y ^ z w )
    ^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
ERROR: in line ##: expected `with precedence ...' after:
        with binary reformatter
                    ^^^^^^^^^^^
ERROR: in line ##: expected operator flags after:
    define operator "+" [code, math]
                        ^^^^^^^^^^^^
ERROR: in line ##: operator flags nofix and infix are incompatible:
    define operator "+" [code, math] infix nofix
                                     ^^^^^^^^^^^
ERROR: in lines ##-##: [< "right" "associative" >] reformatter
       incompatible with nofix operator flag(s):
    define operator "+" [code, math] nofix
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with precedence 3000
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with right associative reformatter
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR: in line ##: undefined reformatter name:
        with none such reformatter
             ^^^^^^^^^^^^^^^^^^^^^
ERROR: in line ##: expected `with precedence ...' after:
    undefine operator "+" [code, math] infix
                                       ^^^^^
ERROR: in lines ##-##: did NOT expect `with ... reformatter':
    undefine operator "+" [code, math] infix
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with precedence 3000
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with binary reformatter
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR: in line ##: expected operator flags after:
    undefine operator "+" [code, math]
                          ^^^^^^^^^^^^
    print operator ""
        nothing found
*PARSER*:
    define operator "=" [code, math] infix
        with precedence 1000
        with right associative reformatter
    define operator "+=" [code, math] infix
        with precedence 1000
        with right associative reformatter
    define operator "-=" [code, math] infix
        with precedence 1000
        with right associative reformatter
    define operator "*=" [code, math] infix
        with precedence 1000
        with right associative reformatter
    define operator "/=" [code, math] infix
        with precedence 1000
        with right associative reformatter
======= PARSER TEST: {"": .operator = "=", .terminator = ")",
                          .initiator = "("|= x
                          {"": .operator = "+="|+= y
                               {"": .operator = "*="|*= {|z w|}
                                    {"": .operator = "="|= {|p q r|}
                                         {|t v|}|}|}|}|}
======= line ##:
    (x = y += z w *= p q r = t v)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ##:
    (x = y += z w *= p q r = t v)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ##:
    (x = y += z w *= p q r = t v)
         ^^^^^^^^^^^^^^^^^^^^^^^
------- line ##:
    (x = y += z w *= p q r = t v)
              ^^^^^^^^^^^^^^^^^^
------- line ##:
    (x = y += z w *= p q r = t v)
              ^^^
------- line ##:
    (x = y += z w *= p q r = t v)
                     ^^^^^^^^^^^
------- line ##:
    (x = y += z w *= p q r = t v)
                     ^^^^^
------- line ##:
    (x = y += z w *= p q r = t v)
                             ^^^
======= END PARSER TEST(S)
*PARSER*:
    define operator "," [code, math] nofix
        with precedence 2000
        with separator reformatter ( "," )
======= PARSER TEST: (x, y1, {|z w|}, {}, 3, {})
======= line ###:
    (x, y1, z w,, 3,)
    ^^^^^^^^^^^^^^^^^
------- line ###:
    (x, y1, z w,, 3,)
    ^^^^^^^^^^^^^^^^^
------- line ###:
    (x, y1, z w,, 3,)
            ^^^
------- line ###:
    (x, y1, z w,, 3,)
                ^
------- line ###:
    (x, y1, z w,, 3,)
                    ^
======= END PARSER TEST(S)
*PARSER*:
    define operator "BUT NOT" [code, math] infix
        with precedence 3000
        with binary reformatter
    define operator "AND" [code, math] infix
        with precedence 3100
        with infix reformatter
    define operator "OR" [code, math] infix
        with precedence 3100
        with infix reformatter
    define operator "NOT" [code, math] nofix
        with precedence 3100
        with unary reformatter
ERROR: in line ###: wrong operator "OR" changed to "AND"; all operators
       must be the same in this subexpression:
    (x OR y BUT NOT z AND w OR p)
                    ^^^^^^^^^^^^
ERROR: in line ###: expected an operator and got "x"; deleted:
    (x NOT y)
     ^
ERROR: in line ###: extra stuff at end of unary expression; deleted:
    (NOT x AND y)
           ^^^^^
ERROR: in line ###: missing operand inserted:
    (x AND NOT y)
          ^
ERROR: in line ###: wrong operator "NOT" changed to "AND"; all operators
       must be the same in this subexpression:
    (x AND NOT y)
     ^^^^^^^^^^^
ERROR: in line ###: expected an operand and got "NOT"; deleted:
    (NOT NOT x y)
         ^^^
ERROR: in line ###: expected an operand and got "NOT"; deleted:
    (NOT NOT)
         ^^^
ERROR: in line ###: expected an operand after "NOT"; inserted
       ERROR'OPERAND:
    (NOT NOT)
     ^^^
======= PARSER TEST: {"": .operator = [< "BUT" "NOT" >], .terminator =
                          ")", .initiator = "("|[< BUT NOT >]
                          {"": .operator = "OR"|OR x y|}
                          {"": .operator = "AND"|AND z w|}|}
======= line ###:
    (x OR y BUT NOT z AND w)
    ^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    (x OR y BUT NOT z AND w)
    ^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    (x OR y BUT NOT z AND w)
     ^^^^^^
------- line ###:
    (x OR y BUT NOT z AND w)
                    ^^^^^^^
======= PARSER TEST: {"": .operator = [< "BUT" "NOT" >], .terminator =
                          ")", .initiator = "("|[< BUT NOT >]
                          {"": .operator = "OR"|OR x y|}
                          {"": .operator = "AND"|AND z w p|}|}
======= line ###:
    (x OR y BUT NOT z AND w OR p)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    (x OR y BUT NOT z AND w OR p)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    (x OR y BUT NOT z AND w OR p)
     ^^^^^^
------- line ###:
    (x OR y BUT NOT z AND w OR p)
                    ^^^^^^^^^^^^
======= PARSER TEST: {"": .operator = "NOT", .terminator = ")",
                          .initiator = "("|NOT {|x y|}|}
======= line ###:
    (NOT x y)
    ^^^^^^^^^
------- line ###:
    (NOT x y)
    ^^^^^^^^^
------- line ###:
    (NOT x y)
         ^^^
======= PARSER TEST: {"": .operator = "NOT", .terminator = ")",
                          .initiator = "("|NOT y|}
======= line ###:
    (x NOT y)
    ^^^^^^^^^
------- line ###:
    (x NOT y)
    ^^^^^^^^^
======= PARSER TEST: {"": .operator = "NOT", .terminator = ")",
                          .initiator = "("|NOT x|}
======= line ###:
    (NOT x AND y)
    ^^^^^^^^^^^^^
------- line ###:
    (NOT x AND y)
    ^^^^^^^^^^^^^
======= PARSER TEST: {"": .operator = "AND", .terminator = ")",
                          .initiator = "("|AND x ERROR'OPERAND y|}
======= line ###:
    (x AND NOT y)
    ^^^^^^^^^^^^^
------- line ###:
    (x AND NOT y)
    ^^^^^^^^^^^^^
======= PARSER TEST: {"": .operator = "AND", .terminator = ")",
                          .initiator = "("|AND x {|AND y|}|}
======= line ###:
    (x AND AND y)
    ^^^^^^^^^^^^^
------- line ###:
    (x AND AND y)
    ^^^^^^^^^^^^^
------- line ###:
    (x AND AND y)
           ^^^^^
======= PARSER TEST: {"": .operator = "NOT", .terminator = ")",
                          .initiator = "("|NOT {|x y|}|}
======= line ###:
    (NOT NOT x y)
    ^^^^^^^^^^^^^
------- line ###:
    (NOT NOT x y)
    ^^^^^^^^^^^^^
------- line ###:
    (NOT NOT x y)
             ^^^
======= PARSER TEST: {"": .operator = "NOT", .terminator = ")",
                          .initiator = "("|NOT ERROR'OPERAND|}
======= line ###:
    (NOT NOT)
    ^^^^^^^^^
------- line ###:
    (NOT NOT)
    ^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    define operator "==" [code, math] infix
        with precedence 4000
        with infix and reformatter ( "AND" )
    define operator "/=" [code, math] infix
        with precedence 4000
        with infix and reformatter ( "AND" )
    define operator "!=" [code, math] infix
        with precedence 4000
        with infix and reformatter ( "AND" )
    define operator "<" [code, math] infix
        with precedence 4000
        with infix and reformatter ( "AND" )
    define operator "<=" [code, math] infix
        with precedence 4000
        with infix and reformatter ( "AND" )
    define operator "=<" [code, math] infix
        with precedence 4000
        with infix and reformatter ( "AND" )
    define operator ">" [code, math] infix
        with precedence 4000
        with infix and reformatter ( "AND" )
    define operator ">=" [code, math] infix
        with precedence 4000
        with infix and reformatter ( "AND" )
    define operator "=>" [code, math] infix
        with precedence 4000
        with infix and reformatter ( "AND" )
======= PARSER TEST: {"": .operator = "AND", .terminator = ")",
                          .initiator = "("|AND
                          {"": .operator = "<"|< x
                               {"": .operator = "$"|$ 0 y|}|}
                          {"": .operator = "<="|<=
                               {"": .operator = "$"|$ 0|}
                               {"": .operator = "$"|$ 1 z|}|}
                          {"": .operator = ">"|>
                               {"": .operator = "$"|$ 1|}
                               {"": .operator = "$"|$ 2 w|}|}
                          {"": .operator = "!="|!=
                               {"": .operator = "$"|$ 2|}
                               {"": .operator = "$"|$ 3 {|p q|}|}|}
                          {"": .operator = "=<"|=<
                               {"": .operator = "$"|$ 3|} {|u v|}|}|}
======= line ###:
    ( x < y <= z > w != p q =< u v )
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x < y <= z > w != p q =< u v )
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x < y <= z > w != p q =< u v )
      ^^^^^
------- line ###:
    ( x < y <= z > w != p q =< u v )
          ^
------- line ###:
    ( x < y <= z > w != p q =< u v )
          ^^^^^^
------- line ###:
    ( x < y <= z > w != p q =< u v )
          ^
------- line ###:
    ( x < y <= z > w != p q =< u v )
               ^
------- line ###:
    ( x < y <= z > w != p q =< u v )
               ^^^^^
------- line ###:
    ( x < y <= z > w != p q =< u v )
               ^
------- line ###:
    ( x < y <= z > w != p q =< u v )
                   ^
------- line ###:
    ( x < y <= z > w != p q =< u v )
                   ^^^^^^^^
------- line ###:
    ( x < y <= z > w != p q =< u v )
                   ^
------- line ###:
    ( x < y <= z > w != p q =< u v )
                        ^^^
------- line ###:
    ( x < y <= z > w != p q =< u v )
                        ^^^
------- line ###:
    ( x < y <= z > w != p q =< u v )
                        ^^^^^^^^^^
------- line ###:
    ( x < y <= z > w != p q =< u v )
                        ^^^
------- line ###:
    ( x < y <= z > w != p q =< u v )
                               ^^^
======= END PARSER TEST(S)
*PARSER*:
    define operator "+" [code, math] infix
        with precedence 5000
        with sum reformatter ( "+", "-" )
    define operator "-" [code, math] infix
        with precedence 5000
        with sum reformatter ( "+", "-" )
======= PARSER TEST: {"": .operator = "+", .terminator = ")",
                          .initiator = "("|+ x y
                          {"": .operator = "-"|- z|} w
                          {"": .operator = "-"|- v|}
                          {"": .operator = "-"|- u|}|}
======= line ###:
    ( x + y - z + w - v - u )
    ^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x + y - z + w - v - u )
    ^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x + y - z + w - v - u )
            ^^^
------- line ###:
    ( x + y - z + w - v - u )
                    ^^^
------- line ###:
    ( x + y - z + w - v - u )
                        ^^^
======= PARSER TEST: {"": .operator = "+", .terminator = ")",
                          .initiator = "("|+ {|- x|} y
                          {"": .operator = "-"|- z|}|}
======= line ###:
    ( - x + y - z )
    ^^^^^^^^^^^^^^^
------- line ###:
    ( - x + y - z )
    ^^^^^^^^^^^^^^^
------- line ###:
    ( - x + y - z )
      ^^^
------- line ###:
    ( - x + y - z )
              ^^^
======= PARSER TEST: {"": .operator = "AND", .terminator = ")",
                          .initiator = "("|AND
                          {"": .operator = "<"|< x
                               {"": .operator = "$"|$ 4
                                    {"": .operator = "+"|+ y 5|}|}|}
                          {"": .operator = "<="|<=
                               {"": .operator = "$"|$ 4|} z|}|}
======= line ###:
    ( x < y + 5 <= z )
    ^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x < y + 5 <= z )
    ^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x < y + 5 <= z )
      ^^^^^^^^^
------- line ###:
    ( x < y + 5 <= z )
          ^^^^^
------- line ###:
    ( x < y + 5 <= z )
          ^^^^^
------- line ###:
    ( x < y + 5 <= z )
          ^^^^^^^^^^
------- line ###:
    ( x < y + 5 <= z )
          ^^^^^
======= END PARSER TEST(S)
*PARSER*:
    define operator "/" [code, math] infix
        with precedence 5100
        with binary reformatter
    define operator "*" [code, math] infix
        with precedence 5200
        with infix reformatter
    define operator "^" [code, math] infix
        with precedence 5300
        with binary reformatter
ERROR: in line ###: extra stuff at end of binary expression; deleted:
    ( x / y / z )
            ^^^
======= PARSER TEST: {"": .operator = "/", .terminator = ")",
                          .initiator = "("|/
                          {"": .operator = "*"|* x y|}
                          {"": .operator = "*"|* {|z q|} {|m p|}|}|}
======= line ###:
    ( x * y / z q * m p )
    ^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x * y / z q * m p )
    ^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x * y / z q * m p )
      ^^^^^
------- line ###:
    ( x * y / z q * m p )
              ^^^^^^^^^
------- line ###:
    ( x * y / z q * m p )
              ^^^
------- line ###:
    ( x * y / z q * m p )
                    ^^^
======= PARSER TEST: {"": .operator = "/", .terminator = ")",
                          .initiator = "("|/ x y|}
======= line ###:
    ( x / y / z )
    ^^^^^^^^^^^^^
------- line ###:
    ( x / y / z )
    ^^^^^^^^^^^^^
======= PARSER TEST: {"": .operator = "/", .terminator = ")",
                          .initiator = "("|/
                          {"": .operator = "*"|*
                               {"": .operator = "^"|^ x 2|}
                               {"": .operator = "^"|^ y 2|}|}
                          {"": .operator = "*"|* y z|}|}
======= line ###:
    ( x ^ 2 * y ^ 2 / y * z )
    ^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x ^ 2 * y ^ 2 / y * z )
    ^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x ^ 2 * y ^ 2 / y * z )
      ^^^^^^^^^^^^^
------- line ###:
    ( x ^ 2 * y ^ 2 / y * z )
      ^^^^^
------- line ###:
    ( x ^ 2 * y ^ 2 / y * z )
              ^^^^^
------- line ###:
    ( x ^ 2 * y ^ 2 / y * z )
                      ^^^^^
======= END PARSER TEST(S)
*PARSER*:
    define operator "+" [code, math] prefix
        with precedence 10000
    define operator "-" [code, math] prefix
        with precedence 10000
    define operator "@" [code, math] prefix
        with precedence 10000
======= PARSER TEST: {"": .operator = "+", .terminator = ")",
                          .initiator = "("|+ {"": .operator = "-"|- x|}
                          y {"": .operator = "-"|- z|}|}
======= line ###:
    ( - x + y - z )
    ^^^^^^^^^^^^^^^
------- line ###:
    ( - x + y - z )
    ^^^^^^^^^^^^^^^
------- line ###:
    ( - x + y - z )
      ^^^
------- line ###:
    ( - x + y - z )
              ^^^
======= PARSER TEST: {"": .operator = "+", .terminator = ")",
                          .initiator = "("|+
                          {"": .operator = "*"|* p
                               {"": .operator = "-"|- x|}|} y
                          {"": .operator = "-"|- z|}|}
======= line ###:
    ( p * - x + y - z )
    ^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( p * - x + y - z )
    ^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( p * - x + y - z )
      ^^^^^^^
------- line ###:
    ( p * - x + y - z )
          ^^^
------- line ###:
    ( p * - x + y - z )
                  ^^^
======= PARSER TEST: {"": .operator = "+", .terminator = ")",
                          .initiator = "("|+ {"": .operator = "@"|@ x|}
                          y
                          {"": .operator = "-"|-
                               {"": .operator = "@"|@ z|}|}|}
======= line ###:
    ( @ x + y - @ z )
    ^^^^^^^^^^^^^^^^^
------- line ###:
    ( @ x + y - @ z )
    ^^^^^^^^^^^^^^^^^
------- line ###:
    ( @ x + y - @ z )
      ^^^
------- line ###:
    ( @ x + y - @ z )
              ^^^^^
------- line ###:
    ( @ x + y - @ z )
                ^^^
======= PARSER TEST: {"": .operator = "+", .terminator = ")",
                          .initiator = "("|+
                          {"": .operator = "-"|-
                               {"": .operator = "+"|+
                                    {"": .operator = "-"|- {|x y|}|}|}|}|}
======= line ###:
    ( + - + - x y )
    ^^^^^^^^^^^^^^^
------- line ###:
    ( + - + - x y )
    ^^^^^^^^^^^^^^^
------- line ###:
    ( + - + - x y )
        ^^^^^^^^^
------- line ###:
    ( + - + - x y )
          ^^^^^^^
------- line ###:
    ( + - + - x y )
            ^^^^^
------- line ###:
    ( + - + - x y )
              ^^^
======= END PARSER TEST(S)
*PARSER*:
    define operator "++" [code, math] postfix
        with precedence 10001
    define operator "--" [code, math] postfix
        with precedence 10001
======= PARSER TEST: {"": .operator = "+", .terminator = ")",
                          .initiator = "("|+
                          {"": .operator = "++"|x ++|} y
                          {"": .operator = "-"|-
                               {"": .operator = "--"|z --|}|}|}
======= line ###:
    ( x ++ + y - z -- )
    ^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x ++ + y - z -- )
    ^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x ++ + y - z -- )
      ^^^^
------- line ###:
    ( x ++ + y - z -- )
               ^^^^^^
------- line ###:
    ( x ++ + y - z -- )
                 ^^^^
======= PARSER TEST: {"": .operator = "--", .terminator = ")",
                          .initiator = "("|
                          {"": .operator = "++"|
                               {"": .operator = "--"|
                                    {"": .operator = "++"|{|x y|} ++|}
                                    --|} ++|} --|}
======= line ###:
    ( x y ++ -- ++ -- )
    ^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x y ++ -- ++ -- )
    ^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x y ++ -- ++ -- )
      ^^^^^^^^^^^^
------- line ###:
    ( x y ++ -- ++ -- )
      ^^^^^^^^^
------- line ###:
    ( x y ++ -- ++ -- )
      ^^^^^^
------- line ###:
    ( x y ++ -- ++ -- )
      ^^^
======= END PARSER TEST(S)
*PARSER*:
    define operator "<--" [code] nofix
        with precedence 0
        with declare reformatter
    define operator bracket "{{" ... "}}" [code] afix
        with precedence 0
    define operator indentation mark ":" [code] afix
        with precedence 0
======= PARSER TEST: {"": .operator = "<--", .terminator = ")",
                          .initiator = "("|<-- {|foo bar|} {|boo bat|}
                          {{fee fie fo fum}}|}
======= line ###:
    ( foo bar <-- boo bat {{ fee fie fo fum }} )
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( foo bar <-- boo bat {{ fee fie fo fum }} )
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( foo bar <-- boo bat {{ fee fie fo fum }} )
      ^^^^^^^
------- line ###:
    ( foo bar <-- boo bat {{ fee fie fo fum }} )
                  ^^^^^^^
------- line ###:
    ( foo bar <-- boo bat {{ fee fie fo fum }} )
                          ^^^^^^^^^^^^^^^^^^^^
======= PARSER TEST: {"": .operator = "<--", .terminator = ")",
                          .initiator = "("|<-- {|foo bar|} {}
                          {{fee fie fo fum}}|}
======= line ###:
    ( foo bar <-- {{ fee fie fo fum }} )
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( foo bar <-- {{ fee fie fo fum }} )
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( foo bar <-- {{ fee fie fo fum }} )
      ^^^^^^^
------- line ###:
    ( foo bar <-- {{ fee fie fo fum }} )
                 ^
------- line ###:
    ( foo bar <-- {{ fee fie fo fum }} )
                  ^^^^^^^^^^^^^^^^^^^^
======= PARSER TEST: {"": .operator = "<--", .terminator = ")",
                          .initiator = "("|<-- {} {|boo bat|}
                          {{fee fie fo fum}}|}
======= line ###:
    ( <-- boo bat {{ fee fie fo fum }} )
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( <-- boo bat {{ fee fie fo fum }} )
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( <-- boo bat {{ fee fie fo fum }} )
      ^
------- line ###:
    ( <-- boo bat {{ fee fie fo fum }} )
          ^^^^^^^
------- line ###:
    ( <-- boo bat {{ fee fie fo fum }} )
                  ^^^^^^^^^^^^^^^^^^^^
======= PARSER TEST: {"": .operator = "<--", .terminator = ")",
                          .initiator = "("|<-- {|foo bar|} {}|}
======= line ###:
    ( foo bar <-- )
    ^^^^^^^^^^^^^^^
------- line ###:
    ( foo bar <-- )
    ^^^^^^^^^^^^^^^
------- line ###:
    ( foo bar <-- )
      ^^^^^^^
------- line ###:
    ( foo bar <-- )
                 ^
======= PARSER TEST: {"": .operator = "<--", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|<--
                          {|foo bar|} {|boo bat|}
                          {"": .terminator = [$ INDENTED_PARAGRAPH $],
                               .initiator = ":"|
                               {"": .terminator = "<LF>", .initiator =
                                    [$ LOGICAL_LINE $]|fee fie fo fum|}
                               {"": .terminator = "<LF>", .initiator =
                                    [$ LOGICAL_LINE $]|he ha ho hum|}|}|}
======= lines ###-###:
    foo bar <-- boo bat:
    ^^^^^^^^^^^^^^^^^^^^
        fee fie fo fum
^^^^^^^^^^^^^^^^^^^^^^
        he ha ho hum
^^^^^^^^^^^^^^^^^^^^
------- line ###:
    foo bar <-- boo bat:
    ^^^^^^^
------- line ###:
    foo bar <-- boo bat:
                ^^^^^^^
------- lines ###-###:
    foo bar <-- boo bat:
                       ^
        fee fie fo fum
^^^^^^^^^^^^^^^^^^^^^^
        he ha ho hum
^^^^^^^^^^^^^^^^^^^^
------- line ###:
        fee fie fo fum
        ^^^^^^^^^^^^^^
------- line ###:
        he ha ho hum
        ^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    print operator ""
        block standard: operator "*" [code, math]
                        infix
                        with precedence 5200
                        with infix reformatter
        block standard: operator "+" [code, math]
                        prefix
                        with precedence 10000
        block standard: operator "+" [code, math]
                        infix
                        with precedence 5000
                        with sum reformatter ( "+", "-" )
        block standard: operator "," [code, math]
                        nofix
                        with precedence 2000
                        with separator reformatter ( "," )
        block standard: operator "-" [code, math]
                        prefix
                        with precedence 10000
        block standard: operator "-" [code, math]
                        infix
                        with precedence 5000
                        with sum reformatter ( "+", "-" )
        block standard: operator "/" [code, math]
                        infix
                        with precedence 5100
                        with binary reformatter
        block standard: operator "<" [code, math]
                        infix
                        with precedence 4000
                        with infix and reformatter ( "AND" )
        block standard: operator "=" [code, math]
                        infix
                        with precedence 1000
                        with right associative reformatter
        block standard: operator ">" [code, math]
                        infix
                        with precedence 4000
                        with infix and reformatter ( "AND" )
        block standard: operator "@" [code, math]
                        prefix
                        with precedence 10000
        block standard: operator "!=" [code, math]
                        infix
                        with precedence 4000
                        with infix and reformatter ( "AND" )
        block standard: operator "^" [code, math]
                        infix
                        with precedence 5300
                        with binary reformatter
        block standard: operator "NOT" [code, math]
                        nofix
                        with precedence 3100
                        with unary reformatter
        block standard: operator "<--" [code]
                        nofix
                        with precedence 0
                        with declare reformatter
        block standard: operator [< "BUT" "NOT" >] [code, math]
                        infix
                        with precedence 3000
                        with binary reformatter
        block standard: operator "*=" [code, math]
                        infix
                        with precedence 1000
                        with right associative reformatter
        block standard: operator "++" [code, math]
                        postfix
                        with precedence 10001
        block standard: operator "+=" [code, math]
                        infix
                        with precedence 1000
                        with right associative reformatter
        block standard: operator "<=" [code, math]
                        infix
                        with precedence 4000
                        with infix and reformatter ( "AND" )
        block standard: operator "AND" [code, math]
                        infix
                        with precedence 3100
                        with infix reformatter
        block standard: operator "=<" [code, math]
                        infix
                        with precedence 4000
                        with infix and reformatter ( "AND" )
        block standard: operator "==" [code, math]
                        infix
                        with precedence 4000
                        with infix and reformatter ( "AND" )
        block standard: operator "--" [code, math]
                        postfix
                        with precedence 10001
        block standard: operator "=>" [code, math]
                        infix
                        with precedence 4000
                        with infix and reformatter ( "AND" )
        block standard: operator "-=" [code, math]
                        infix
                        with precedence 1000
                        with right associative reformatter
        block standard: operator ">=" [code, math]
                        infix
                        with precedence 4000
                        with infix and reformatter ( "AND" )
        block standard: operator "OR" [code, math]
                        infix
                        with precedence 3100
                        with infix reformatter
        block standard: operator "/=" [code, math]
                        infix
                        with precedence 4000
                        with infix and reformatter ( "AND" )
        block standard: operator "/=" [code, math]
                        infix
                        with precedence 1000
                        with right associative reformatter
        block standard: bracket ":" ... [$ MISSING $] [code]
                        afix
                        with precedence 0
        block standard: bracket [< "{" "{" >] ... [< "}" "}" >] [code]
                        afix
                        with precedence 0
