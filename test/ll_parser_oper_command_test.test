parser print selector "":
    block standard: text
    block standard: math
    block standard: code
    block TOP LEVEL: data
    block TOP LEVEL: parser
parser print pass:
    top
parser print context "":
    block standard: default [code]
    block TOP LEVEL: default []
    block TOP LEVEL: parser [+ parser, - data, - code, - math, - text]
    block TOP LEVEL: parser test []
parser print pass:
    top
    operator [code, math]
parser trace [+ parser commands, + warnings ]
parser trace [+ subexpression elements,
              + subexpression lines ]
parser print selector "":
    block standard: text
    block standard: math
    block standard: code
    block TOP LEVEL: data
    block TOP LEVEL: parser
parser print operator "":
    not found
parser begin block
======= TEST: parser test (x / y ^ z w)
------- line 25:
parser test ( x / y ^ z w )
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 25:
parser test ( x / y ^ z w )
            ^^^^^^^^^^^^^^^
======= END TEST
parser define operator "/" [code, math] infix
       with binary reformatter ( "/" )
       with precedence -100
parser print operator "/":
    block block: operator "/" [code, math]
                 infix
                 with precedence -100
                 with reformatter binary ( "/" )
parser define operator "^" [code, math] infix
       with binary reformatter ( "^" )
       with precedence +100
======= TEST: parser test
                  {"": .operator = "/", .terminator = ")", .initiator =
                       "("|/ x {"": .operator = "^"|^ y {|z w|}|}|}
------- line 33:
parser test ( x / y ^ z w )
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 33:
parser test ( x / y ^ z w )
            ^^^^^^^^^^^^^^^
------- line 33:
parser test ( x / y ^ z w )
                  ^^^^^^^
------- line 33:
parser test ( x / y ^ z w )
                      ^^^
======= END TEST
parser print operator "":
    block block: operator "/" [code, math]
                 infix
                 with precedence -100
                 with reformatter binary ( "/" )
    block block: operator "^" [code, math]
                 infix
                 with precedence 100
                 with reformatter binary ( "^" )
parser undefine operator "/" [code, math] infix
       with precedence -100
parser print operator "/":
    block block: operator "/" []
                 infix
                 with precedence -100
                 with reformatter binary ( "/" )
======= TEST: parser test
                  {"": .operator = "^", .terminator = ")", .initiator =
                       "("|^ {|x / y|} {|z w|}|}
------- line 38:
parser test ( x / y ^ z w )
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 38:
parser test ( x / y ^ z w )
            ^^^^^^^^^^^^^^^
------- line 38:
parser test ( x / y ^ z w )
              ^^^^^
------- line 38:
parser test ( x / y ^ z w )
                      ^^^
======= END TEST
parser end block
parser print operator "":
    not found
======= TEST: parser test (x / y ^ z w)
------- line 41:
parser test ( x / y ^ z w )
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 41:
parser test ( x / y ^ z w )
            ^^^^^^^^^^^^^^^
======= END TEST
ERROR: in line 46: expected `with precedence ...' after:
       with binary reformatter ( "+" )
                               ^^^^^^^
ERROR: in line 47: expected operator flags after:
parser define operator "+" [code, math]
                           ^^^^^^^^^^^^
ERROR: in line 50: operator flags nofix and infix are incompatible:
parser define operator "+" [code, math] infix nofix
                                        ^^^^^^^^^^^
ERROR: in lines 53-55: `right associative' reformatter incompatible with
       nofix operator flag(s):
parser define operator "+" [code, math] nofix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       with precedence 3000
^^^^^^^^^^^^^^^^^^^^^^^^^^^
       with right associative reformatter ( "+" )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR: in line 58: undefined reformatter name:
       with none such reformatter ( "+" )
            ^^^^^^^^^^^^^^^^^^^^^
ERROR: in line 59: expected `with precedence ...' after:
parser undefine operator "+" [code, math] infix
                                          ^^^^^
ERROR: in lines 60-62: did NOT expect `with ... reformatter':
parser undefine operator "+" [code, math] infix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       with precedence 3000
^^^^^^^^^^^^^^^^^^^^^^^^^^^
       with binary reformatter ( "+" )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR: in line 63: expected operator flags after:
parser undefine operator "+" [code, math]
                             ^^^^^^^^^^^^
parser print operator "":
    not found
parser define operator "=" [code, math] infix
       with precedence 1000
       with right associative reformatter ( "=" )
parser define operator "+=" [code, math] infix
       with precedence 1000
       with right associative reformatter ( "=" )
parser define operator "-=" [code, math] infix
       with precedence 1000
       with right associative reformatter ( "=" )
parser define operator "*=" [code, math] infix
       with precedence 1000
       with right associative reformatter ( "=" )
parser define operator "/=" [code, math] infix
       with precedence 1000
       with right associative reformatter ( "=" )
======= TEST: parser test
                  {"": .operator = "=", .terminator = ")", .initiator =
                       "("|= x
                       {"": .operator = "+="|+= y
                            {"": .operator = "*="|*= {|z w|}
                                 {"": .operator = "="|= {|p q r|}
                                      {|t v|}|}|}|}|}
------- line 84:
parser test (x = y += z w *= p q r = t v)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 84:
parser test (x = y += z w *= p q r = t v)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 84:
parser test (x = y += z w *= p q r = t v)
                 ^^^^^^^^^^^^^^^^^^^^^^^
------- line 84:
parser test (x = y += z w *= p q r = t v)
                      ^^^^^^^^^^^^^^^^^^
------- line 84:
parser test (x = y += z w *= p q r = t v)
                      ^^^
------- line 84:
parser test (x = y += z w *= p q r = t v)
                             ^^^^^^^^^^^
------- line 84:
parser test (x = y += z w *= p q r = t v)
                             ^^^^^
------- line 84:
parser test (x = y += z w *= p q r = t v)
                                     ^^^
======= END TEST
parser define operator "," [code, math] nofix
       with precedence 2000
       with separator reformatter ( ",", "," )
======= TEST: parser test (x, y1, {|z w|}, {}, 3, {})
------- line 89:
parser test (x, y1, z w,, 3,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 89:
parser test (x, y1, z w,, 3,)
            ^^^^^^^^^^^^^^^^^
------- line 89:
parser test (x, y1, z w,, 3,)
                    ^^^
------- line 89:
parser test (x, y1, z w,, 3,)
                        ^
------- line 89:
parser test (x, y1, z w,, 3,)
                            ^
======= END TEST
parser define operator "BUT NOT" [code, math] infix
       with precedence 3000
       with binary reformatter ( "logical" )
parser define operator "AND" [code, math] infix
       with precedence 3100
       with infix reformatter ( "logical" )
parser define operator "OR" [code, math] infix
       with precedence 3100
       with infix reformatter ( "logical" )
parser define operator "NOT" [code, math] nofix
       with precedence 3100
       with unary reformatter ( "logical" )
======= TEST: parser test
                  {"": .operator = [< "BUT" "NOT" >], .terminator = ")",
                       .initiator = "("|[< BUT NOT >]
                       {"": .operator = "OR"|OR x y|}
                       {"": .operator = "AND"|AND z w|}|}
------- line 103:
parser test (x OR y BUT NOT z AND w)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 103:
parser test (x OR y BUT NOT z AND w)
            ^^^^^^^^^^^^^^^^^^^^^^^^
------- line 103:
parser test (x OR y BUT NOT z AND w)
             ^^^^^^
------- line 103:
parser test (x OR y BUT NOT z AND w)
                            ^^^^^^^
======= END TEST
ERROR: wrong operator `OR' changed to `AND'; all operators must be the
       same in this subexpression; line 104:
parser test (x OR y BUT NOT z AND w OR p)
                            ^^^^^^^^^^^^
======= TEST: parser test
                  {"": .operator = [< "BUT" "NOT" >], .terminator = ")",
                       .initiator = "("|[< BUT NOT >]
                       {"": .operator = "OR"|OR x y|}
                       {"": .operator = "AND"|AND z w p|}|}
------- line 104:
parser test (x OR y BUT NOT z AND w OR p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 104:
parser test (x OR y BUT NOT z AND w OR p)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 104:
parser test (x OR y BUT NOT z AND w OR p)
             ^^^^^^
------- line 104:
parser test (x OR y BUT NOT z AND w OR p)
                            ^^^^^^^^^^^^
======= END TEST
======= TEST: parser test
                  {"": .operator = "NOT", .terminator = ")",
                       .initiator = "("|NOT {|x y|}|}
------- line 105:
parser test (NOT x y)
^^^^^^^^^^^^^^^^^^^^^
------- line 105:
parser test (NOT x y)
            ^^^^^^^^^
------- line 105:
parser test (NOT x y)
                 ^^^
======= END TEST
ERROR: expected an operator and got `x'; deleted; line 106:
parser test (x NOT y)
             ^
======= TEST: parser test
                  {"": .operator = "NOT", .terminator = ")",
                       .initiator = "("|NOT y|}
------- line 106:
parser test (x NOT y)
^^^^^^^^^^^^^^^^^^^^^
------- line 106:
parser test (x NOT y)
            ^^^^^^^^^
======= END TEST
ERROR: extra stuff at end of unary expression; deleted; line 107:
parser test (NOT x AND y)
                   ^^^^^
======= TEST: parser test
                  {"": .operator = "NOT", .terminator = ")",
                       .initiator = "("|NOT x|}
------- line 107:
parser test (NOT x AND y)
^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 107:
parser test (NOT x AND y)
            ^^^^^^^^^^^^^
======= END TEST
ERROR: missing operand inserted; line 108:
parser test (x AND NOT y)
                  ^
ERROR: wrong operator `NOT' changed to `AND'; all operators must be the
       same in this subexpression; line 108:
parser test (x AND NOT y)
             ^^^^^^^^^^^
======= TEST: parser test
                  {"": .operator = "AND", .terminator = ")",
                       .initiator = "("|AND x ERROR'OPERAND y|}
------- line 108:
parser test (x AND NOT y)
^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 108:
parser test (x AND NOT y)
            ^^^^^^^^^^^^^
======= END TEST
======= TEST: parser test
                  {"": .operator = "AND", .terminator = ")",
                       .initiator = "("|AND x {|AND y|}|}
------- line 109:
parser test (x AND AND y)
^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 109:
parser test (x AND AND y)
            ^^^^^^^^^^^^^
------- line 109:
parser test (x AND AND y)
                   ^^^^^
======= END TEST
ERROR: expected operand and got `NOT'; deleted; line 110:
parser test (NOT NOT x y)
                 ^^^
======= TEST: parser test
                  {"": .operator = "NOT", .terminator = ")",
                       .initiator = "("|NOT {|x y|}|}
------- line 110:
parser test (NOT NOT x y)
^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 110:
parser test (NOT NOT x y)
            ^^^^^^^^^^^^^
------- line 110:
parser test (NOT NOT x y)
                     ^^^
======= END TEST
ERROR: expected operand and got `NOT'; deleted; line 111:
parser test (NOT NOT)
                 ^^^
ERROR: expected operand after `NOT'; inserted ERROR'OPERAND; line 111:
parser test (NOT NOT)
             ^^^
======= TEST: parser test
                  {"": .operator = "NOT", .terminator = ")",
                       .initiator = "("|NOT ERROR'OPERAND|}
------- line 111:
parser test (NOT NOT)
^^^^^^^^^^^^^^^^^^^^^
------- line 111:
parser test (NOT NOT)
            ^^^^^^^^^
======= END TEST
parser define operator "==" [code, math] infix
       with precedence 4000
       with infix and reformatter ( "==", "AND" )
parser define operator "/=" [code, math] infix
       with precedence 4000
       with infix and reformatter ( "==", "AND" )
parser define operator "!=" [code, math] infix
       with precedence 4000
       with infix and reformatter ( "==", "AND" )
parser define operator "<" [code, math] infix
       with precedence 4000
       with infix and reformatter ( "==", "AND" )
parser define operator "<=" [code, math] infix
       with precedence 4000
       with infix and reformatter ( "==", "AND" )
parser define operator "=<" [code, math] infix
       with precedence 4000
       with infix and reformatter ( "==", "AND" )
parser define operator ">" [code, math] infix
       with precedence 4000
       with infix and reformatter ( "==", "AND" )
parser define operator ">=" [code, math] infix
       with precedence 4000
       with infix and reformatter ( "==", "AND" )
parser define operator "=>" [code, math] infix
       with precedence 4000
       with infix and reformatter ( "==", "AND" )
======= TEST: parser test
                  {"": .operator = "AND", .terminator = ")",
                       .initiator = "("|AND
                       {"": .operator = "<"|< x
                            {"": .operator = "$"|$ 0 y|}|}
                       {"": .operator = "<="|<=
                            {"": .operator = "$"|$ 0|}
                            {"": .operator = "$"|$ 1 z|}|}
                       {"": .operator = ">"|> {"": .operator = "$"|$ 1|}
                            {"": .operator = "$"|$ 2 w|}|}
                       {"": .operator = "!="|!=
                            {"": .operator = "$"|$ 2|}
                            {"": .operator = "$"|$ 3 {|p q|}|}|}
                       {"": .operator = "=<"|=<
                            {"": .operator = "$"|$ 3|} {|u v|}|}|}
------- line 140:
parser test ( x < y <= z > w != p q =< u v )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 140:
parser test ( x < y <= z > w != p q =< u v )
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 140:
parser test ( x < y <= z > w != p q =< u v )
              ^^^^^
------- line 140:
parser test ( x < y <= z > w != p q =< u v )
                  ^
------- line 140:
parser test ( x < y <= z > w != p q =< u v )
                  ^^^^^^
------- line 140:
parser test ( x < y <= z > w != p q =< u v )
                  ^
------- line 140:
parser test ( x < y <= z > w != p q =< u v )
                       ^
------- line 140:
parser test ( x < y <= z > w != p q =< u v )
                       ^^^^^
------- line 140:
parser test ( x < y <= z > w != p q =< u v )
                       ^
------- line 140:
parser test ( x < y <= z > w != p q =< u v )
                           ^
------- line 140:
parser test ( x < y <= z > w != p q =< u v )
                           ^^^^^^^^
------- line 140:
parser test ( x < y <= z > w != p q =< u v )
                           ^
------- line 140:
parser test ( x < y <= z > w != p q =< u v )
                                ^^^
------- line 140:
parser test ( x < y <= z > w != p q =< u v )
                                ^^^
------- line 140:
parser test ( x < y <= z > w != p q =< u v )
                                ^^^^^^^^^^
------- line 140:
parser test ( x < y <= z > w != p q =< u v )
                                ^^^
------- line 140:
parser test ( x < y <= z > w != p q =< u v )
                                       ^^^
======= END TEST
parser define operator "+" [code, math] infix
       with precedence 5000
       with sum reformatter ( "+", "+", "-" )
parser define operator "-" [code, math] infix
       with precedence 5000
       with sum reformatter ( "+", "+", "-" )
======= TEST: parser test
                  {"": .operator = "+", .terminator = ")", .initiator =
                       "("|+ x y {"": .operator = "-"|- z|} w
                       {"": .operator = "-"|- v|}
                       {"": .operator = "-"|- u|}|}
------- line 148:
parser test ( x + y - z + w - v - u )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 148:
parser test ( x + y - z + w - v - u )
            ^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 148:
parser test ( x + y - z + w - v - u )
                    ^^^
------- line 148:
parser test ( x + y - z + w - v - u )
                            ^^^
------- line 148:
parser test ( x + y - z + w - v - u )
                                ^^^
======= END TEST
======= TEST: parser test
                  {"": .operator = "+", .terminator = ")", .initiator =
                       "("|+ {|- x|} y {"": .operator = "-"|- z|}|}
------- line 149:
parser test ( - x + y - z )
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 149:
parser test ( - x + y - z )
            ^^^^^^^^^^^^^^^
------- line 149:
parser test ( - x + y - z )
              ^^^
------- line 149:
parser test ( - x + y - z )
                      ^^^
======= END TEST
======= TEST: parser test
                  {"": .operator = "AND", .terminator = ")",
                       .initiator = "("|AND
                       {"": .operator = "<"|< x
                            {"": .operator = "$"|$ 4
                                 {"": .operator = "+"|+ y 5|}|}|}
                       {"": .operator = "<="|<=
                            {"": .operator = "$"|$ 4|} z|}|}
------- line 150:
parser test ( x < y + 5 <= z )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 150:
parser test ( x < y + 5 <= z )
            ^^^^^^^^^^^^^^^^^^
------- line 150:
parser test ( x < y + 5 <= z )
              ^^^^^^^^^
------- line 150:
parser test ( x < y + 5 <= z )
                  ^^^^^
------- line 150:
parser test ( x < y + 5 <= z )
                  ^^^^^
------- line 150:
parser test ( x < y + 5 <= z )
                  ^^^^^^^^^^
------- line 150:
parser test ( x < y + 5 <= z )
                  ^^^^^
======= END TEST
parser define operator "/" [code, math] infix
       with precedence 5100
       with binary reformatter ( "/" )
parser define operator "*" [code, math] infix
       with precedence 5200
       with infix reformatter ( "*" )
parser define operator "^" [code, math] infix
       with precedence 5300
       with binary reformatter ( "^" )
======= TEST: parser test
                  {"": .operator = "/", .terminator = ")", .initiator =
                       "("|/ {"": .operator = "*"|* x y|}
                       {"": .operator = "*"|* {|z q|} {|m p|}|}|}
------- line 161:
parser test ( x * y / z q * m p )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 161:
parser test ( x * y / z q * m p )
            ^^^^^^^^^^^^^^^^^^^^^
------- line 161:
parser test ( x * y / z q * m p )
              ^^^^^
------- line 161:
parser test ( x * y / z q * m p )
                      ^^^^^^^^^
------- line 161:
parser test ( x * y / z q * m p )
                      ^^^
------- line 161:
parser test ( x * y / z q * m p )
                            ^^^
======= END TEST
ERROR: extra stuff at end of binary expression; deleted; line 162:
parser test ( x / y / z )
                    ^^^
======= TEST: parser test
                  {"": .operator = "/", .terminator = ")", .initiator =
                       "("|/ x y|}
------- line 162:
parser test ( x / y / z )
^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 162:
parser test ( x / y / z )
            ^^^^^^^^^^^^^
======= END TEST
======= TEST: parser test
                  {"": .operator = "/", .terminator = ")", .initiator =
                       "("|/
                       {"": .operator = "*"|*
                            {"": .operator = "^"|^ x 2|}
                            {"": .operator = "^"|^ y 2|}|}
                       {"": .operator = "*"|* y z|}|}
------- line 163:
parser test ( x ^ 2 * y ^ 2 / y * z )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 163:
parser test ( x ^ 2 * y ^ 2 / y * z )
            ^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 163:
parser test ( x ^ 2 * y ^ 2 / y * z )
              ^^^^^^^^^^^^^
------- line 163:
parser test ( x ^ 2 * y ^ 2 / y * z )
              ^^^^^
------- line 163:
parser test ( x ^ 2 * y ^ 2 / y * z )
                      ^^^^^
------- line 163:
parser test ( x ^ 2 * y ^ 2 / y * z )
                              ^^^^^
======= END TEST
parser define operator "+" [code, math] prefix
       with precedence 10000
parser define operator "-" [code, math] prefix
       with precedence 10000
parser define operator "@" [code, math] prefix
       with precedence 10000
======= TEST: parser test
                  {"": .operator = "+", .terminator = ")", .initiator =
                       "("|+ {"": .operator = "-"|- x|} y
                       {"": .operator = "-"|- z|}|}
------- line 171:
parser test ( - x + y - z )
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 171:
parser test ( - x + y - z )
            ^^^^^^^^^^^^^^^
------- line 171:
parser test ( - x + y - z )
              ^^^
------- line 171:
parser test ( - x + y - z )
                      ^^^
======= END TEST
======= TEST: parser test
                  {"": .operator = "+", .terminator = ")", .initiator =
                       "("|+
                       {"": .operator = "*"|* p
                            {"": .operator = "-"|- x|}|} y
                       {"": .operator = "-"|- z|}|}
------- line 172:
parser test ( p * - x + y - z )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 172:
parser test ( p * - x + y - z )
            ^^^^^^^^^^^^^^^^^^^
------- line 172:
parser test ( p * - x + y - z )
              ^^^^^^^
------- line 172:
parser test ( p * - x + y - z )
                  ^^^
------- line 172:
parser test ( p * - x + y - z )
                          ^^^
======= END TEST
======= TEST: parser test
                  {"": .operator = "+", .terminator = ")", .initiator =
                       "("|+ {"": .operator = "@"|@ x|} y
                       {"": .operator = "-"|-
                            {"": .operator = "@"|@ z|}|}|}
------- line 173:
parser test ( @ x + y - @ z )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 173:
parser test ( @ x + y - @ z )
            ^^^^^^^^^^^^^^^^^
------- line 173:
parser test ( @ x + y - @ z )
              ^^^
------- line 173:
parser test ( @ x + y - @ z )
                      ^^^^^
------- line 173:
parser test ( @ x + y - @ z )
                        ^^^
======= END TEST
======= TEST: parser test
                  {"": .operator = "+", .terminator = ")", .initiator =
                       "("|+
                       {"": .operator = "-"|-
                            {"": .operator = "+"|+
                                 {"": .operator = "-"|- {|x y|}|}|}|}|}
------- line 174:
parser test ( + - + - x y )
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 174:
parser test ( + - + - x y )
            ^^^^^^^^^^^^^^^
------- line 174:
parser test ( + - + - x y )
                ^^^^^^^^^
------- line 174:
parser test ( + - + - x y )
                  ^^^^^^^
------- line 174:
parser test ( + - + - x y )
                    ^^^^^
------- line 174:
parser test ( + - + - x y )
                      ^^^
======= END TEST
parser define operator "++" [code, math] postfix
       with precedence 10001
parser define operator "--" [code, math] postfix
       with precedence 10001
======= TEST: parser test
                  {"": .operator = "+", .terminator = ")", .initiator =
                       "("|+ {"": .operator = "++"|x ++|} y
                       {"": .operator = "-"|-
                            {"": .operator = "--"|z --|}|}|}
------- line 180:
parser test ( x ++ + y - z -- )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 180:
parser test ( x ++ + y - z -- )
            ^^^^^^^^^^^^^^^^^^^
------- line 180:
parser test ( x ++ + y - z -- )
              ^^^^
------- line 180:
parser test ( x ++ + y - z -- )
                       ^^^^^^
------- line 180:
parser test ( x ++ + y - z -- )
                         ^^^^
======= END TEST
======= TEST: parser test
                  {"": .operator = "--", .terminator = ")", .initiator =
                       "("|
                       {"": .operator = "++"|
                            {"": .operator = "--"|
                                 {"": .operator = "++"|{|x y|} ++|} --|}
                            ++|} --|}
------- line 181:
parser test ( x y ++ -- ++ -- )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 181:
parser test ( x y ++ -- ++ -- )
            ^^^^^^^^^^^^^^^^^^^
------- line 181:
parser test ( x y ++ -- ++ -- )
              ^^^^^^^^^^^^
------- line 181:
parser test ( x y ++ -- ++ -- )
              ^^^^^^^^^
------- line 181:
parser test ( x y ++ -- ++ -- )
              ^^^^^^
------- line 181:
parser test ( x y ++ -- ++ -- )
              ^^^
======= END TEST
parser define operator "<--" [code] nofix
       with precedence 0
       with declare reformatter ( "<--" )
parser define operator bracket "{{" ... "}}" [code] afix
       with precedence 0
parser define operator indentation mark ":" [code] afix
       with precedence 0
======= TEST: parser test
                  {"": .operator = "<--", .terminator = ")",
                       .initiator = "("|<-- {|foo bar|} {|boo bat|}
                       {{fee fie fo fum}}|}
------- line 190:
parser test ( foo bar <-- boo bat {{ fee fie fo fum }} )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 190:
parser test ( foo bar <-- boo bat {{ fee fie fo fum }} )
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 190:
parser test ( foo bar <-- boo bat {{ fee fie fo fum }} )
              ^^^^^^^
------- line 190:
parser test ( foo bar <-- boo bat {{ fee fie fo fum }} )
                          ^^^^^^^
------- line 190:
parser test ( foo bar <-- boo bat {{ fee fie fo fum }} )
                                  ^^^^^^^^^^^^^^^^^^^^
======= END TEST
======= TEST: parser test
                  {"": .operator = "<--", .terminator = ")",
                       .initiator = "("|<-- {|foo bar|} {}
                       {{fee fie fo fum}}|}
------- line 191:
parser test ( foo bar <-- {{ fee fie fo fum }} )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 191:
parser test ( foo bar <-- {{ fee fie fo fum }} )
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 191:
parser test ( foo bar <-- {{ fee fie fo fum }} )
              ^^^^^^^
------- line 191:
parser test ( foo bar <-- {{ fee fie fo fum }} )
                         ^
------- line 191:
parser test ( foo bar <-- {{ fee fie fo fum }} )
                          ^^^^^^^^^^^^^^^^^^^^
======= END TEST
======= TEST: parser test
                  {"": .operator = "<--", .terminator = ")",
                       .initiator = "("|<-- {} {|boo bat|}
                       {{fee fie fo fum}}|}
------- line 192:
parser test ( <-- boo bat {{ fee fie fo fum }} )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 192:
parser test ( <-- boo bat {{ fee fie fo fum }} )
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 192:
parser test ( <-- boo bat {{ fee fie fo fum }} )
              ^
------- line 192:
parser test ( <-- boo bat {{ fee fie fo fum }} )
                  ^^^^^^^
------- line 192:
parser test ( <-- boo bat {{ fee fie fo fum }} )
                          ^^^^^^^^^^^^^^^^^^^^
======= END TEST
======= TEST: parser test
                  {"": .operator = "<--", .terminator = ")",
                       .initiator = "("|<-- {|foo bar|} {}|}
------- line 193:
parser test ( foo bar <-- )
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 193:
parser test ( foo bar <-- )
            ^^^^^^^^^^^^^^^
------- line 193:
parser test ( foo bar <-- )
              ^^^^^^^
------- line 193:
parser test ( foo bar <-- )
                         ^
======= END TEST
======= TEST: parser test:
                  {"<LF>": .operator = "<--"|<-- {|foo bar|}
                           {|boo bat
                             {: {"<LF>"|fee fie fo fum|"<LF>"}
                                {"<LF>"|he ha ho hum|"<LF>"} :}|}|"<LF>"}
------- lines 194-197:
parser test:
^^^^^^^^^^^^
    foo bar <-- boo bat:
^^^^^^^^^^^^^^^^^^^^^^^^
        fee fie fo fum
^^^^^^^^^^^^^^^^^^^^^^
        he ha ho hum
^^^^^^^^^^^^^^^^^^^^
------- lines 194-197:
parser test:
           ^
    foo bar <-- boo bat:
^^^^^^^^^^^^^^^^^^^^^^^^
        fee fie fo fum
^^^^^^^^^^^^^^^^^^^^^^
        he ha ho hum
^^^^^^^^^^^^^^^^^^^^
------- lines 195-197:
    foo bar <-- boo bat:
    ^^^^^^^^^^^^^^^^^^^^
        fee fie fo fum
^^^^^^^^^^^^^^^^^^^^^^
        he ha ho hum
^^^^^^^^^^^^^^^^^^^^
------- line 195:
    foo bar <-- boo bat:
    ^^^^^^^
------- lines 195-197:
    foo bar <-- boo bat:
                ^^^^^^^^
        fee fie fo fum
^^^^^^^^^^^^^^^^^^^^^^
        he ha ho hum
^^^^^^^^^^^^^^^^^^^^
------- lines 195-197:
    foo bar <-- boo bat:
                       ^
        fee fie fo fum
^^^^^^^^^^^^^^^^^^^^^^
        he ha ho hum
^^^^^^^^^^^^^^^^^^^^
------- line 196:
        fee fie fo fum
        ^^^^^^^^^^^^^^
------- line 197:
        he ha ho hum
        ^^^^^^^^^^^^
======= END TEST
parser print operator "":
    block standard: operator "*" [code, math]
                    infix
                    with precedence 5200
                    with reformatter infix ( "*" )
    block standard: operator "+" [code, math]
                    prefix
                    with precedence 10000
    block standard: operator "+" [code, math]
                    infix
                    with precedence 5000
                    with reformatter sum ( "+", "+", "-" )
    block standard: operator "," [code, math]
                    nofix
                    with precedence 2000
                    with reformatter separator ( ",", "," )
    block standard: operator "-" [code, math]
                    prefix
                    with precedence 10000
    block standard: operator "-" [code, math]
                    infix
                    with precedence 5000
                    with reformatter sum ( "+", "+", "-" )
    block standard: operator "/" [code, math]
                    infix
                    with precedence 5100
                    with reformatter binary ( "/" )
    block standard: operator "<" [code, math]
                    infix
                    with precedence 4000
                    with reformatter infix and ( "==", "AND" )
    block standard: operator "=" [code, math]
                    infix
                    with precedence 1000
                    with reformatter right associative ( "=" )
    block standard: operator ">" [code, math]
                    infix
                    with precedence 4000
                    with reformatter infix and ( "==", "AND" )
    block standard: operator "@" [code, math]
                    prefix
                    with precedence 10000
    block standard: operator "!=" [code, math]
                    infix
                    with precedence 4000
                    with reformatter infix and ( "==", "AND" )
    block standard: operator "^" [code, math]
                    infix
                    with precedence 5300
                    with reformatter binary ( "^" )
    block standard: operator "NOT" [code, math]
                    nofix
                    with precedence 3100
                    with reformatter unary ( "logical" )
    block standard: operator "<--" [code]
                    nofix
                    with precedence 0
                    with reformatter declare ( "<--" )
    block standard: operator [< "BUT" "NOT" >] [code, math]
                    infix
                    with precedence 3000
                    with reformatter binary ( "logical" )
    block standard: operator "*=" [code, math]
                    infix
                    with precedence 1000
                    with reformatter right associative ( "=" )
    block standard: operator "++" [code, math]
                    postfix
                    with precedence 10001
    block standard: operator "+=" [code, math]
                    infix
                    with precedence 1000
                    with reformatter right associative ( "=" )
    block standard: operator "<=" [code, math]
                    infix
                    with precedence 4000
                    with reformatter infix and ( "==", "AND" )
    block standard: operator "AND" [code, math]
                    infix
                    with precedence 3100
                    with reformatter infix ( "logical" )
    block standard: operator "=<" [code, math]
                    infix
                    with precedence 4000
                    with reformatter infix and ( "==", "AND" )
    block standard: operator "==" [code, math]
                    infix
                    with precedence 4000
                    with reformatter infix and ( "==", "AND" )
    block standard: operator "--" [code, math]
                    postfix
                    with precedence 10001
    block standard: operator "=>" [code, math]
                    infix
                    with precedence 4000
                    with reformatter infix and ( "==", "AND" )
    block standard: operator "-=" [code, math]
                    infix
                    with precedence 1000
                    with reformatter right associative ( "=" )
    block standard: operator ">=" [code, math]
                    infix
                    with precedence 4000
                    with reformatter infix and ( "==", "AND" )
    block standard: operator "OR" [code, math]
                    infix
                    with precedence 3100
                    with reformatter infix ( "logical" )
    block standard: operator "/=" [code, math]
                    infix
                    with precedence 4000
                    with reformatter infix and ( "==", "AND" )
    block standard: operator "/=" [code, math]
                    infix
                    with precedence 1000
                    with reformatter right associative ( "=" )
    block standard: bracket ":" ... [$ MISSING $] [code]
                    afix
                    with precedence 0
    block standard: bracket [< "{" "{" >] ... [< "}" "}" >] [code]
                    afix
                    with precedence 0
