*PARSER*:
    print selector ""
        block standard: data paragraph
        block standard: math
        block standard: text
        block standard: code
        block TOP LEVEL: atom
        block TOP LEVEL: data
        block TOP LEVEL: LINE LEVEL
        block TOP LEVEL: TOP LEVEL
    print pass
        top
    print top level
        block standard:  selectors [code]
                         options [end at le indent,
                                  end at line separator,
                                  end at outer closing,
                                  enable indented paragraph,
                                  enable header]
                         paragraph lexical master "PARAGRAPH-CHECK"
                         line lexical master "DATA-CHECK"
                         line separator ";"
        block TOP LEVEL:  selectors []
                          options [end at le indent,
                                   end at line separator,
                                   end at outer closing,
                                   enable indented paragraph,
                                   enable header]
    print pass
        top
        operator [code, math]
    trace [+ parser commands, + warnings ]
    trace [+ subexpression elements,
           + subexpression lines ]
    trace [- operator subexpressions]
    print selector ""
        block standard: data paragraph
        block standard: math
        block standard: text
        block standard: code
        block TOP LEVEL: atom
        block TOP LEVEL: data
        block TOP LEVEL: LINE LEVEL
        block TOP LEVEL: TOP LEVEL
    print operator ""
        nothing found
    print bracket ""
        block standard: bracket "``" ... "''" [data, code, text, math]
                        with parsing selectors [- data, - code, + text,
                                                - math]
                        with text reformatter ( "s", ".", "?", "!", ":",
                        ";" )
        block TOP LEVEL: bracket "``" ... "''" [data]
        block standard: bracket [< "[" "<" >] ... [< ">" "]" >]
                        [code, text, math]
                        with parsing selectors [atom]
                        with label reformatter
        block TOP LEVEL: bracket [< "[" "<" >] ... [< ">" "]" >]
                         [data, atom]
                         with parsing selectors [atom]
                         with label reformatter
        block TOP LEVEL: bracket [< "{" "*" >] ... [< "*" "}" >] [data]
                         with multivalue reformatter ( "," )
        block standard: bracket "(" ... ")" [code, text, math]
        block TOP LEVEL: bracket "(" ... ")" [data]
        block standard: bracket "[" ... "]" [code, text, math]
        block TOP LEVEL: bracket "[" ... "]" [data]
        block standard: bracket "`" ... "'" [code, text, math]
                        with parsing selectors [atom]
        block TOP LEVEL: bracket "`" ... "'" [data]
                         with parsing selectors [atom]
        block standard: bracket [< "{" "{" >] ... [< "}" "}" >]
                        [data, code, text, math]
                        with parsing selectors [- data, - code, - text,
                                                + math]
        block TOP LEVEL: bracket [< "{" "{" >] ... [< "}" "}" >] [data]
        block standard: bracket [< "[" "$" >] ... [< "$" "]" >]
                        [code, text, math]
                        with parsing selectors [atom]
                        with special reformatter
        block TOP LEVEL: bracket [< "[" "$" >] ... [< "$" "]" >]
                         [data, atom]
                         with parsing selectors [atom]
                         with special reformatter
*PARSER*:
    begin block BLOCK1
======= PARSER TEST: (x / y ^ z w)
======= line ##:
    ( x / y ^ z w )
    ^^^^^^^^^^^^^^^
------- line ##:
    ( x / y ^ z w )
    ^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    define operator "/" [code, math] infix
        with binary reformatter with precedence -100
    print operator "/"
        block BLOCK1: operator "/" [code, math]
                      infix
                      with precedence -100
                      with binary reformatter
    define operator "^" [code, math] infix
        with binary reformatter with precedence +100
======= PARSER TEST: ({|x|} / {|{|y|} ^ {|z w|}|})
======= line ##:
    ( x / y ^ z w )
    ^^^^^^^^^^^^^^^
------- line ##:
    ( x / y ^ z w )
    ^^^^^^^^^^^^^^^
------- line ##:
    ( x / y ^ z w )
      ^
------- line ##:
    ( x / y ^ z w )
          ^^^^^^^
------- line ##:
    ( x / y ^ z w )
          ^
------- line ##:
    ( x / y ^ z w )
              ^^^
======= END PARSER TEST(S)
*PARSER*:
    print operator ""
        block BLOCK1: operator "/" [code, math]
                      infix
                      with precedence -100
                      with binary reformatter
        block BLOCK1: operator "^" [code, math]
                      infix
                      with precedence 100
                      with binary reformatter
    undefine operator "/" [code, math] infix
        with precedence -100
    print operator "/"
        block BLOCK1: operator "/" []
                      infix
                      with precedence -100
                      with binary reformatter
======= PARSER TEST: ({|x / y|} ^ {|z w|})
======= line ##:
    ( x / y ^ z w )
    ^^^^^^^^^^^^^^^
------- line ##:
    ( x / y ^ z w )
    ^^^^^^^^^^^^^^^
------- line ##:
    ( x / y ^ z w )
      ^^^^^
------- line ##:
    ( x / y ^ z w )
              ^^^
======= END PARSER TEST(S)
*PARSER*:
    end block BLOCK1
    print operator ""
        nothing found
======= PARSER TEST: (x / y ^ z w)
======= line ##:
    ( x / y ^ z w )
    ^^^^^^^^^^^^^^^
------- line ##:
    ( x / y ^ z w )
    ^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    begin block BLOCK1
ERROR: in line ##: expected `with precedence ...' after:
        with binary reformatter
                    ^^^^^^^^^^^
ERROR: in line ##: expected `with' after:
    define operator "+" [code, math] xxfix
                        ^^^^^^^^^^^^
ERROR: in line ##: undefined reformatter name:
        with none such reformatter
             ^^^^^^^^^^^^^^^^^^^^^
    print operator ""
        nothing found
ERROR: in line ##: precedence out of range:
        with precedence 3000000
                        ^^^^^^^
    define operator "+" [code, math] infix
        with binary reformatter
        with precedence 3000
    define operator "+" [code, math] nofix
        with precedence 3000
ERROR: in line ##: expected `with precedence ...' after:
    undefine operator "+" [code, math] infix
                                       ^^^^^
ERROR: in lines ##-##: did NOT expect `with ... reformatter':
    undefine operator "+" [code, math]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with precedence 3000
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with binary reformatter
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
WARNING: in lines ##-##: undefine found no definition:
    undefine operator "+" [code, math] prefix
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with precedence 3000
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    undefine operator "+" [code, math] prefix
        with precedence 3000
WARNING: in lines ##-##: undefine found no definition:
    undefine operator "+" [code, math] infix
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with precedence 2000
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    undefine operator "+" [code, math] infix
        with precedence 2000
    undefine operator "+" [code, math] infix
        with precedence 3000
    print operator ""
        block BLOCK1: operator "+" [code, math]
                      nofix
                      with precedence 3000
        block BLOCK1: operator "+" []
                      infix
                      with precedence 3000
                      with binary reformatter
    end block BLOCK1
*PARSER*:
    define operator "=" [code, math] infix
        with precedence 1000
        with right associative reformatter
    define operator "+=" [code, math] infix
        with precedence 1000
        with right associative reformatter
    define operator "-=" [code, math] infix
        with precedence 1000
        with right associative reformatter
    define operator "*=" [code, math] infix
        with precedence 1000
        with right associative reformatter
    define operator "/=" [code, math] infix
        with precedence 1000
        with right associative reformatter
======= PARSER TEST: ({|x|} =
                      {|{|y|} +=
                        {|{|z w|} *= {|{|p q r|} = {|t v|}|}|}|})
======= line ###:
    (x = y += z w *= p q r = t v)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    (x = y += z w *= p q r = t v)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    (x = y += z w *= p q r = t v)
     ^
------- line ###:
    (x = y += z w *= p q r = t v)
         ^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    (x = y += z w *= p q r = t v)
         ^
------- line ###:
    (x = y += z w *= p q r = t v)
              ^^^^^^^^^^^^^^^^^^
------- line ###:
    (x = y += z w *= p q r = t v)
              ^^^
------- line ###:
    (x = y += z w *= p q r = t v)
                     ^^^^^^^^^^^
------- line ###:
    (x = y += z w *= p q r = t v)
                     ^^^^^
------- line ###:
    (x = y += z w *= p q r = t v)
                             ^^^
======= END PARSER TEST(S)
*PARSER*:
    define operator "," [code, math] nofix
        with precedence 2000
        with separator reformatter
    begin block BLOCK1
    define operator "..." [code, math] nofix
        with precedence 2000
        with separator reformatter
ERROR: in line ###: wrong separator "..." changed to ",":
    (x, y... z)
         ^^^
======= PARSER TEST: ({|x|}, {|y1|}, {|z w|}, {}, {|3|}, {})
======= line ###:
    (x, y1, z w,, 3,)
    ^^^^^^^^^^^^^^^^^
------- line ###:
    (x, y1, z w,, 3,)
    ^^^^^^^^^^^^^^^^^
------- line ###:
    (x, y1, z w,, 3,)
     ^
------- line ###:
    (x, y1, z w,, 3,)
        ^^
------- line ###:
    (x, y1, z w,, 3,)
            ^^^
------- line ###:
    (x, y1, z w,, 3,)
                ^
------- line ###:
    (x, y1, z w,, 3,)
                  ^
------- line ###:
    (x, y1, z w,, 3,)
                    ^
======= PARSER TEST: ({}, {}, {|x|}, {}, {|y|}, {}, {}, {})
======= line ###:
    (,, x,, y,,,)
    ^^^^^^^^^^^^^
------- line ###:
    (,, x,, y,,,)
    ^^^^^^^^^^^^^
------- line ###:
    (,, x,, y,,,)
     ^
------- line ###:
    (,, x,, y,,,)
      ^
------- line ###:
    (,, x,, y,,,)
        ^
------- line ###:
    (,, x,, y,,,)
          ^
------- line ###:
    (,, x,, y,,,)
            ^
------- line ###:
    (,, x,, y,,,)
              ^
------- line ###:
    (,, x,, y,,,)
               ^
------- line ###:
    (,, x,, y,,,)
                ^
======= PARSER TEST: ({|x|}, {|y|}, {|z|})
======= line ###:
    (x, y... z)
    ^^^^^^^^^^^
------- line ###:
    (x, y... z)
    ^^^^^^^^^^^
------- line ###:
    (x, y... z)
     ^
------- line ###:
    (x, y... z)
        ^
------- line ###:
    (x, y... z)
             ^
======= END PARSER TEST(S)
*PARSER*:
    end block BLOCK1
    define operator "BUT NOT" [code, math] infix
        with precedence 3000
        with binary reformatter
    define operator "AND" [code, math] infix
        with precedence 3100
        with infix reformatter ( "AND" )
    define operator "OR" [code, math] infix
        with precedence 3100
        with infix reformatter ( "OR" )
    define operator "NOT" [code, math] prefix
        with precedence 3200
        with unary reformatter
ERROR: in line ###: illegal operator "OR" in expression beginnning with
       "AND"; changed to "AND":
    (x OR y BUT NOT z AND w OR p)
                            ^^
ERROR: in line ###: missing operand; error operand inserted:
    (NOT NOT)
             ^
======= PARSER TEST: ({|{|x|} OR {|y|}|} [< BUT NOT >]
                      {|{|z|} AND {|w|}|})
======= line ###:
    (x OR y BUT NOT z AND w)
    ^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    (x OR y BUT NOT z AND w)
    ^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    (x OR y BUT NOT z AND w)
     ^^^^^^
------- line ###:
    (x OR y BUT NOT z AND w)
     ^
------- line ###:
    (x OR y BUT NOT z AND w)
          ^
------- line ###:
    (x OR y BUT NOT z AND w)
                    ^^^^^^^
------- line ###:
    (x OR y BUT NOT z AND w)
                    ^
------- line ###:
    (x OR y BUT NOT z AND w)
                          ^
======= PARSER TEST: ({|{|x|} OR {|y|}|} [< BUT NOT >]
                      {|{|z|} AND {|w|} AND {|p|}|})
======= line ###:
    (x OR y BUT NOT z AND w OR p)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    (x OR y BUT NOT z AND w OR p)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    (x OR y BUT NOT z AND w OR p)
     ^^^^^^
------- line ###:
    (x OR y BUT NOT z AND w OR p)
     ^
------- line ###:
    (x OR y BUT NOT z AND w OR p)
          ^
------- line ###:
    (x OR y BUT NOT z AND w OR p)
                    ^^^^^^^^^^^^
------- line ###:
    (x OR y BUT NOT z AND w OR p)
                    ^
------- line ###:
    (x OR y BUT NOT z AND w OR p)
                          ^
------- line ###:
    (x OR y BUT NOT z AND w OR p)
                               ^
======= PARSER TEST: (NOT {|x y|})
======= line ###:
    (NOT x y)
    ^^^^^^^^^
------- line ###:
    (NOT x y)
    ^^^^^^^^^
------- line ###:
    (NOT x y)
         ^^^
======= PARSER TEST: (x NOT y)
======= line ###:
    (x NOT y)
    ^^^^^^^^^
------- line ###:
    (x NOT y)
    ^^^^^^^^^
======= PARSER TEST: ({|NOT {|x|}|} AND {|y|})
======= line ###:
    (NOT x AND y)
    ^^^^^^^^^^^^^
------- line ###:
    (NOT x AND y)
    ^^^^^^^^^^^^^
------- line ###:
    (NOT x AND y)
     ^^^^^
------- line ###:
    (NOT x AND y)
         ^
------- line ###:
    (NOT x AND y)
               ^
======= PARSER TEST: ({|x|} AND {|NOT {|y|}|})
======= line ###:
    (x AND NOT y)
    ^^^^^^^^^^^^^
------- line ###:
    (x AND NOT y)
    ^^^^^^^^^^^^^
------- line ###:
    (x AND NOT y)
     ^
------- line ###:
    (x AND NOT y)
           ^^^^^
------- line ###:
    (x AND NOT y)
               ^
======= PARSER TEST: ({|x|} AND {|AND y|})
======= line ###:
    (x AND AND y)
    ^^^^^^^^^^^^^
------- line ###:
    (x AND AND y)
    ^^^^^^^^^^^^^
------- line ###:
    (x AND AND y)
     ^
------- line ###:
    (x AND AND y)
           ^^^^^
======= PARSER TEST: (NOT {|NOT {|x y|}|})
======= line ###:
    (NOT NOT x y)
    ^^^^^^^^^^^^^
------- line ###:
    (NOT NOT x y)
    ^^^^^^^^^^^^^
------- line ###:
    (NOT NOT x y)
         ^^^^^^^
------- line ###:
    (NOT NOT x y)
             ^^^
======= PARSER TEST: (NOT {|NOT ERROR'OPERAND|})
======= line ###:
    (NOT NOT)
    ^^^^^^^^^
------- line ###:
    (NOT NOT)
    ^^^^^^^^^
------- line ###:
    (NOT NOT)
         ^^^^
======= END PARSER TEST(S)
*PARSER*:
    define operator "==" [code, math] infix
        with precedence 4000
        with infix reformatter
    define operator "/=" [code, math] infix
        with precedence 4000
        with infix reformatter
    define operator "!=" [code, math] infix
        with precedence 4000
        with infix reformatter
    define operator "<" [code, math] infix
        with precedence 4000
        with infix reformatter
    define operator "<=" [code, math] infix
        with precedence 4000
        with infix reformatter
    define operator "=<" [code, math] infix
        with precedence 4000
        with infix reformatter
    define operator ">" [code, math] infix
        with precedence 4000
        with infix reformatter
    define operator ">=" [code, math] infix
        with precedence 4000
        with infix reformatter
    define operator "=>" [code, math] infix
        with precedence 4000
        with infix reformatter
======= PARSER TEST: ({|x|} < {|y|} <= {|z|} > {|w|} != {|p q|} =<
                      {|u v|})
======= line ###:
    ( x < y <= z > w != p q =< u v )
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x < y <= z > w != p q =< u v )
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x < y <= z > w != p q =< u v )
      ^
------- line ###:
    ( x < y <= z > w != p q =< u v )
          ^
------- line ###:
    ( x < y <= z > w != p q =< u v )
               ^
------- line ###:
    ( x < y <= z > w != p q =< u v )
                   ^
------- line ###:
    ( x < y <= z > w != p q =< u v )
                        ^^^
------- line ###:
    ( x < y <= z > w != p q =< u v )
                               ^^^
======= END PARSER TEST(S)
*PARSER*:
    define operator "+" [code, math] prefix
        with precedence 999999
        with unary reformatter
    define operator "+" [code, math] infix
        with precedence 5000
        with infix reformatter ( "+", "-" )
    define operator "-" [code, math] prefix
        with precedence 999999
        with unary reformatter
    define operator "-" [code, math] infix
        with precedence 5000
        with infix reformatter ( "+", "-" )
======= PARSER TEST: ({|x|} + {|y|} - {|z|} + {|w|} - {|v|} - {|u|})
======= line ###:
    ( x + y - z + w - v - u )
    ^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x + y - z + w - v - u )
    ^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x + y - z + w - v - u )
      ^
------- line ###:
    ( x + y - z + w - v - u )
          ^
------- line ###:
    ( x + y - z + w - v - u )
              ^
------- line ###:
    ( x + y - z + w - v - u )
                  ^
------- line ###:
    ( x + y - z + w - v - u )
                      ^
------- line ###:
    ( x + y - z + w - v - u )
                          ^
======= PARSER TEST: ({|- {|x|}|} + {|y|} - {|z|})
======= line ###:
    ( - x + y - z )
    ^^^^^^^^^^^^^^^
------- line ###:
    ( - x + y - z )
    ^^^^^^^^^^^^^^^
------- line ###:
    ( - x + y - z )
      ^^^
------- line ###:
    ( - x + y - z )
        ^
------- line ###:
    ( - x + y - z )
            ^
------- line ###:
    ( - x + y - z )
                ^
======= PARSER TEST: ({|x|} < {|{|y|} + {|5|}|} <= {|z|})
======= line ###:
    ( x < y + 5 <= z )
    ^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x < y + 5 <= z )
    ^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x < y + 5 <= z )
      ^
------- line ###:
    ( x < y + 5 <= z )
          ^^^^^
------- line ###:
    ( x < y + 5 <= z )
          ^
------- line ###:
    ( x < y + 5 <= z )
              ^
------- line ###:
    ( x < y + 5 <= z )
                   ^
======= END PARSER TEST(S)
*PARSER*:
    define operator "/" [code, math] infix
        with precedence 5100
        with binary reformatter
    define operator "*" [code, math] infix
        with precedence 5200
        with infix reformatter ( "*" )
    define operator "^" [code, math] infix
        with precedence 5300
        with binary reformatter
ERROR: in line ###: extra stuff at end of expression; deleted:
    ( x / y / z )
            ^^^
======= PARSER TEST: ({|{|x|} * {|y|}|} / {|{|z q|} * {|m p|}|})
======= line ###:
    ( x * y / z q * m p )
    ^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x * y / z q * m p )
    ^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x * y / z q * m p )
      ^^^^^
------- line ###:
    ( x * y / z q * m p )
      ^
------- line ###:
    ( x * y / z q * m p )
          ^
------- line ###:
    ( x * y / z q * m p )
              ^^^^^^^^^
------- line ###:
    ( x * y / z q * m p )
              ^^^
------- line ###:
    ( x * y / z q * m p )
                    ^^^
======= PARSER TEST: ({|x|} / {|y|})
======= line ###:
    ( x / y / z )
    ^^^^^^^^^^^^^
------- line ###:
    ( x / y / z )
    ^^^^^^^^^^^^^
------- line ###:
    ( x / y / z )
      ^
------- line ###:
    ( x / y / z )
          ^
======= PARSER TEST: ({|{|{|x|} ^ {|2|}|} * {|{|y|} ^ {|2|}|}|} /
                      {|{|y|} * {|z|}|})
======= line ###:
    ( x ^ 2 * y ^ 2 / y * z )
    ^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x ^ 2 * y ^ 2 / y * z )
    ^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x ^ 2 * y ^ 2 / y * z )
      ^^^^^^^^^^^^^
------- line ###:
    ( x ^ 2 * y ^ 2 / y * z )
      ^^^^^
------- line ###:
    ( x ^ 2 * y ^ 2 / y * z )
      ^
------- line ###:
    ( x ^ 2 * y ^ 2 / y * z )
          ^
------- line ###:
    ( x ^ 2 * y ^ 2 / y * z )
              ^^^^^
------- line ###:
    ( x ^ 2 * y ^ 2 / y * z )
              ^
------- line ###:
    ( x ^ 2 * y ^ 2 / y * z )
                  ^
------- line ###:
    ( x ^ 2 * y ^ 2 / y * z )
                      ^^^^^
------- line ###:
    ( x ^ 2 * y ^ 2 / y * z )
                      ^
------- line ###:
    ( x ^ 2 * y ^ 2 / y * z )
                          ^
======= END PARSER TEST(S)
*PARSER*:
    define operator "@" [code, math] prefix
        with precedence 999999
======= PARSER TEST: ({|- {|x|}|} + {|y|} - {|z|})
======= line ###:
    ( - x + y - z )
    ^^^^^^^^^^^^^^^
------- line ###:
    ( - x + y - z )
    ^^^^^^^^^^^^^^^
------- line ###:
    ( - x + y - z )
      ^^^
------- line ###:
    ( - x + y - z )
        ^
------- line ###:
    ( - x + y - z )
            ^
------- line ###:
    ( - x + y - z )
                ^
======= PARSER TEST: ({|{|p|} * {|- {|x|}|}|} + {|y|} - {|z|})
======= line ###:
    ( p * - x + y - z )
    ^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( p * - x + y - z )
    ^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( p * - x + y - z )
      ^^^^^^^
------- line ###:
    ( p * - x + y - z )
      ^
------- line ###:
    ( p * - x + y - z )
          ^^^
------- line ###:
    ( p * - x + y - z )
            ^
------- line ###:
    ( p * - x + y - z )
                ^
------- line ###:
    ( p * - x + y - z )
                    ^
======= PARSER TEST: ({|@ {|x|}|} + {|y|} - {|@ {|z|}|})
======= line ###:
    ( @ x + y - @ z )
    ^^^^^^^^^^^^^^^^^
------- line ###:
    ( @ x + y - @ z )
    ^^^^^^^^^^^^^^^^^
------- line ###:
    ( @ x + y - @ z )
      ^^^
------- line ###:
    ( @ x + y - @ z )
        ^
------- line ###:
    ( @ x + y - @ z )
            ^
------- line ###:
    ( @ x + y - @ z )
                ^^^
------- line ###:
    ( @ x + y - @ z )
                  ^
======= PARSER TEST: (+ {|- {|+ {|- {|x y|}|}|}|})
======= line ###:
    ( + - + - x y )
    ^^^^^^^^^^^^^^^
------- line ###:
    ( + - + - x y )
    ^^^^^^^^^^^^^^^
------- line ###:
    ( + - + - x y )
        ^^^^^^^^^
------- line ###:
    ( + - + - x y )
          ^^^^^^^
------- line ###:
    ( + - + - x y )
            ^^^^^
------- line ###:
    ( + - + - x y )
              ^^^
======= END PARSER TEST(S)
*PARSER*:
    define operator "++" [code, math] postfix
        with precedence 1000000
    define operator "--" [code, math] postfix
        with precedence 1000000
======= PARSER TEST: ({|{|x|} ++|} + {|y|} - {|{|z|} --|})
======= line ###:
    ( x ++ + y - z -- )
    ^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x ++ + y - z -- )
    ^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x ++ + y - z -- )
      ^^^^
------- line ###:
    ( x ++ + y - z -- )
      ^
------- line ###:
    ( x ++ + y - z -- )
             ^
------- line ###:
    ( x ++ + y - z -- )
                 ^^^^
------- line ###:
    ( x ++ + y - z -- )
                 ^
======= PARSER TEST: ({|{|{|{|x y|} ++|} --|} ++|} --)
======= line ###:
    ( x y ++ -- ++ -- )
    ^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x y ++ -- ++ -- )
    ^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( x y ++ -- ++ -- )
      ^^^^^^^^^^^^
------- line ###:
    ( x y ++ -- ++ -- )
      ^^^^^^^^^
------- line ###:
    ( x y ++ -- ++ -- )
      ^^^^^^
------- line ###:
    ( x y ++ -- ++ -- )
      ^^^
======= END PARSER TEST(S)
*PARSER*:
    define operator "<--" [code] nofix line
        with precedence 0
        with declare reformatter
    define bracket "{$" ... "$}" [code]
    define operator bracket "{$" ... "$}" [code]
        nofix afix line
        with precedence 0
    define operator indentation mark ":" [code]
        nofix afix line
        with precedence 0
======= PARSER TEST: <-- {|foo bar|} {|boo bat|} {$ fee fie fo fum $}
======= line ###:
    foo bar <-- boo bat {$ fee fie fo fum $}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    foo bar <-- boo bat {$ fee fie fo fum $}
    ^^^^^^^
------- line ###:
    foo bar <-- boo bat {$ fee fie fo fum $}
                ^^^^^^^
------- line ###:
    foo bar <-- boo bat {$ fee fie fo fum $}
                        ^^^^^^^^^^^^^^^^^^^^
======= PARSER TEST: <-- {|foo bar|} {} {$ fee fie fo fum $}
======= line ###:
    foo bar <-- {$ fee fie fo fum $}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    foo bar <-- {$ fee fie fo fum $}
    ^^^^^^^
------- line ###:
    foo bar <-- {$ fee fie fo fum $}
               ^
------- line ###:
    foo bar <-- {$ fee fie fo fum $}
                ^^^^^^^^^^^^^^^^^^^^
======= PARSER TEST: <-- {} {|boo bat|} {$ fee fie fo fum $}
======= line ###:
    <-- boo bat {$ fee fie fo fum $}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    <-- boo bat {$ fee fie fo fum $}
    ^
------- line ###:
    <-- boo bat {$ fee fie fo fum $}
        ^^^^^^^
------- line ###:
    <-- boo bat {$ fee fie fo fum $}
                ^^^^^^^^^^^^^^^^^^^^
======= PARSER TEST: <-- {|foo bar|} {}
======= line ###:
    foo bar <--
    ^^^^^^^^^^^
------- line ###:
    foo bar <--
    ^^^^^^^
------- line ###:
    foo bar <--
               ^
======= PARSER TEST: <-- {|foo bar|} {|boo bat|}:
                         fee fie fo fum
                         he ha ho hum
======= lines ###-###:
    foo bar <-- boo bat:
    ^^^^^^^^^^^^^^^^^^^^
        fee fie fo fum
^^^^^^^^^^^^^^^^^^^^^^
        he ha ho hum
^^^^^^^^^^^^^^^^^^^^
------- line ###:
    foo bar <-- boo bat:
    ^^^^^^^
------- line ###:
    foo bar <-- boo bat:
                ^^^^^^^
------- lines ###-###:
    foo bar <-- boo bat:
                       ^
        fee fie fo fum
^^^^^^^^^^^^^^^^^^^^^^
        he ha ho hum
^^^^^^^^^^^^^^^^^^^^
------- line ###:
        fee fie fo fum
        ^^^^^^^^^^^^^^
------- line ###:
        he ha ho hum
        ^^^^^^^^^^^^
======= END PARSER TEST(S)
======= PARSER TEST: (foo bar <-- boo bat {$ fee fie fo fum $})
======= line ###:
    ( foo bar <-- boo bat {$ fee fie fo fum $} )
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( foo bar <-- boo bat {$ fee fie fo fum $} )
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    ( foo bar <-- boo bat {$ fee fie fo fum $} )
                          ^^^^^^^^^^^^^^^^^^^^
======= PARSER TEST: <-- {|foo bar|} {|boo bat|} {$ fee fie fo fum $}
======= line ###:
    foo bar <-- boo bat {$ fee fie fo fum $}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ###:
    foo bar <-- boo bat {$ fee fie fo fum $}
    ^^^^^^^
------- line ###:
    foo bar <-- boo bat {$ fee fie fo fum $}
                ^^^^^^^
------- line ###:
    foo bar <-- boo bat {$ fee fie fo fum $}
                        ^^^^^^^^^^^^^^^^^^^^
======= END PARSER TEST(S)
*PARSER*:
    print operator ""
        block standard: operator "*" [code, math]
                        infix
                        with precedence 5200
                        with infix reformatter ( "*" )
        block standard: operator "+" [code, math]
                        infix
                        with precedence 5000
                        with infix reformatter ( "+", "-" )
        block standard: operator "+" [code, math]
                        prefix
                        with precedence 999999
                        with unary reformatter
        block standard: operator "," [code, math]
                        nofix
                        with precedence 2000
                        with separator reformatter
        block standard: operator "-" [code, math]
                        infix
                        with precedence 5000
                        with infix reformatter ( "+", "-" )
        block standard: operator "-" [code, math]
                        prefix
                        with precedence 999999
                        with unary reformatter
        block standard: operator "/" [code, math]
                        infix
                        with precedence 5100
                        with binary reformatter
        block standard: operator "<" [code, math]
                        infix
                        with precedence 4000
                        with infix reformatter
        block standard: operator "=" [code, math]
                        infix
                        with precedence 1000
                        with right associative reformatter
        block standard: operator ">" [code, math]
                        infix
                        with precedence 4000
                        with infix reformatter
        block standard: operator "@" [code, math]
                        prefix
                        with precedence 999999
        block standard: operator "!=" [code, math]
                        infix
                        with precedence 4000
                        with infix reformatter
        block standard: operator "^" [code, math]
                        infix
                        with precedence 5300
                        with binary reformatter
        block standard: operator "NOT" [code, math]
                        prefix
                        with precedence 3200
                        with unary reformatter
        block standard: operator "<--" [code]
                        nofix line
                        with precedence 0
                        with declare reformatter
        block standard: operator [< "BUT" "NOT" >] [code, math]
                        infix
                        with precedence 3000
                        with binary reformatter
        block standard: operator "*=" [code, math]
                        infix
                        with precedence 1000
                        with right associative reformatter
        block standard: operator "++" [code, math]
                        postfix
                        with precedence 1000000
        block standard: operator "+=" [code, math]
                        infix
                        with precedence 1000
                        with right associative reformatter
        block standard: operator "<=" [code, math]
                        infix
                        with precedence 4000
                        with infix reformatter
        block standard: operator "AND" [code, math]
                        infix
                        with precedence 3100
                        with infix reformatter ( "AND" )
        block standard: operator "=<" [code, math]
                        infix
                        with precedence 4000
                        with infix reformatter
        block standard: operator "==" [code, math]
                        infix
                        with precedence 4000
                        with infix reformatter
        block standard: operator "--" [code, math]
                        postfix
                        with precedence 1000000
        block standard: operator "=>" [code, math]
                        infix
                        with precedence 4000
                        with infix reformatter
        block standard: operator "-=" [code, math]
                        infix
                        with precedence 1000
                        with right associative reformatter
        block standard: operator ">=" [code, math]
                        infix
                        with precedence 4000
                        with infix reformatter
        block standard: operator "OR" [code, math]
                        infix
                        with precedence 3100
                        with infix reformatter ( "OR" )
        block standard: operator "/=" [code, math]
                        infix
                        with precedence 4000
                        with infix reformatter
        block standard: operator "/=" [code, math]
                        infix
                        with precedence 1000
                        with right associative reformatter
        block standard: bracket [< "{" "$" >] ... [< "$" "}" >] [code]
                        nofix afix line
                        with precedence 0
        block standard: bracket ":" [code]
                        nofix afix line
                        with precedence 0
