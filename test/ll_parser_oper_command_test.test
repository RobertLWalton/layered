parser print selectors:
    [ - parser, + code, - math, - text ]
parser trace [+ parser commands, + warnings ]
parser trace [+ subexpression elements,
              + subexpression lines ]
parser begin block
======= TEST: parser test (x / y ^ z w)
------- line 19:
parser test ( x / y ^ z w )
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 19:
parser test ( x / y ^ z w )
            ^^^^^^^^^^^^^^^
======= END TEST
parser define operator "/" [code, math] infix
       with binary reformatter with precedence 5100
parser define operator "^" [code, math] infix
       with binary reformatter with precedence 5300
======= TEST: parser test (/ x [. ^ y [. z w .] .])
------- line 24:
parser test ( x / y ^ z w )
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 24:
parser test ( x / y ^ z w )
            ^^^^^^^^^^^^^^^
------- line 24:
parser test ( x / y ^ z w )
                  ^^^^^^^
------- line 24:
parser test ( x / y ^ z w )
                      ^^^
======= END TEST
parser undefine operator "/" [code, math] infix
       with precedence 5100
======= TEST: parser test (^ [. x / y .] [. z w .])
------- line 27:
parser test ( x / y ^ z w )
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 27:
parser test ( x / y ^ z w )
            ^^^^^^^^^^^^^^^
------- line 27:
parser test ( x / y ^ z w )
              ^^^^^
------- line 27:
parser test ( x / y ^ z w )
                      ^^^
======= END TEST
parser end block
======= TEST: parser test (x / y ^ z w)
------- line 29:
parser test ( x / y ^ z w )
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 29:
parser test ( x / y ^ z w )
            ^^^^^^^^^^^^^^^
======= END TEST
ERROR: in line 34: expected `with precedence ...' after:
       with binary reformatter
                   ^^^^^^^^^^^
ERROR: in line 35: expected operator flags after:
parser define operator "+" [code, math]
                           ^^^^^^^^^^^^
ERROR: in line 38: operator flags nofix and infix are incompatible:
parser define operator "+" [code, math] infix nofix
                                        ^^^^^^^^^^^
ERROR: in lines 41-43: `right associative' reformatter incompatible with
       nofix operator flag(s):
parser define operator "+" [code, math] nofix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       with precedence 3000
^^^^^^^^^^^^^^^^^^^^^^^^^^^
       with right associative reformatter
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR: in line 46: undefined reformatter name:
       with none such reformatter
            ^^^^^^^^^
ERROR: in line 47: expected `with precedence ...' after:
parser undefine operator "+" [code, math] infix
                                          ^^^^^
ERROR: in lines 48-50: did NOT expect `with ... reformater':
parser undefine operator "+" [code, math] infix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       with precedence 3000
^^^^^^^^^^^^^^^^^^^^^^^^^^^
       with binary reformatter
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR: in line 51: expected operator flags after:
parser undefine operator "+" [code, math]
                             ^^^^^^^^^^^^
parser define operator "=" [code, math] infix
       with precedence 1000
       with right associative reformatter
parser define operator "+=" [code, math] infix
       with precedence 1000
       with right associative reformatter
parser define operator "-=" [code, math] infix
       with precedence 1000
       with right associative reformatter
parser define operator "*=" [code, math] infix
       with precedence 1000
       with right associative reformatter
parser define operator "/=" [code, math] infix
       with precedence 1000
       with right associative reformatter
======= TEST: parser test
              (= x
               [. += y
                  [. *= [. z w .] [. = [. p q r .] [. t v .] .] .] .])
------- line 71:
parser test (x = y += z w *= p q r = t v)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 71:
parser test (x = y += z w *= p q r = t v)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 71:
parser test (x = y += z w *= p q r = t v)
                 ^^^^^^^^^^^^^^^^^^^^^^^
------- line 71:
parser test (x = y += z w *= p q r = t v)
                      ^^^^^^^^^^^^^^^^^^
------- line 71:
parser test (x = y += z w *= p q r = t v)
                      ^^^
------- line 71:
parser test (x = y += z w *= p q r = t v)
                             ^^^^^^^^^^^
------- line 71:
parser test (x = y += z w *= p q r = t v)
                             ^^^^^
------- line 71:
parser test (x = y += z w *= p q r = t v)
                                     ^^^
======= END TEST
parser define operator "," [code, math] nofix
       with precedence 2000
       with separator reformatter
======= TEST: parser test (x, [. y 1 .], [. z w .], [.  .], 3, [.  .])
------- line 76:
parser test (x,y1,z w,,3,)
^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 76:
parser test (x,y1,z w,,3,)
            ^^^^^^^^^^^^^^
------- line 76:
parser test (x,y1,z w,,3,)
               ^^
------- line 76:
parser test (x,y1,z w,,3,)
                  ^^^
------- line 76:
parser test (x,y1,z w,,3,)
                      ^
------- line 76:
parser test (x,y1,z w,,3,)
                         ^
======= END TEST
parser define operator "BUT NOT" [code, math] nofix
       with precedence 3000
       with binary reformatter
parser define operator "AND" [code, math] infix
       with precedence 3100
       with infix reformatter
parser define operator "OR" [code, math] infix
       with precedence 3100
       with infix reformatter
parser define operator "NOT" [code, math] nofix
       with precedence 3100
       with unary reformatter
======= TEST: parser test (BUT NOT [. OR x y .] [. AND z w .])
------- line 90:
parser test (x OR y BUT NOT z AND w)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 90:
parser test (x OR y BUT NOT z AND w)
            ^^^^^^^^^^^^^^^^^^^^^^^^
------- line 90:
parser test (x OR y BUT NOT z AND w)
             ^^^^^^
------- line 90:
parser test (x OR y BUT NOT z AND w)
                            ^^^^^^^
======= END TEST
ERROR: operator `OR' is not the same as first operator `AND' in
       subexpression; all operators must be the same in this
       subexpression; line 91:
parser test (x OR y BUT NOT z AND w OR p)
                            ^^^^^^^^^^^^
======= TEST: parser test (BUT NOT [. OR x y .] [. AND z w p .])
------- line 91:
parser test (x OR y BUT NOT z AND w OR p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 91:
parser test (x OR y BUT NOT z AND w OR p)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 91:
parser test (x OR y BUT NOT z AND w OR p)
             ^^^^^^
------- line 91:
parser test (x OR y BUT NOT z AND w OR p)
                            ^^^^^^^^^^^^
======= END TEST
======= TEST: parser test (NOT [. x y .])
------- line 92:
parser test (NOT x y)
^^^^^^^^^^^^^^^^^^^^^
------- line 92:
parser test (NOT x y)
            ^^^^^^^^^
------- line 92:
parser test (NOT x y)
                 ^^^
======= END TEST
ERROR: operator `NOT' NOT at beginning of subexpression; subexpression
       should be of form `operator operand'; line 93:
parser test (x NOT y)
             ^^^^^^^
ERROR: subexpression is too long; subexpression should be of form
       `operator operand'; line 93:
parser test (x NOT y)
             ^^^^^^^
======= TEST: parser test (x NOT y)
------- line 93:
parser test (x NOT y)
^^^^^^^^^^^^^^^^^^^^^
------- line 93:
parser test (x NOT y)
            ^^^^^^^^^
======= END TEST
ERROR: too many operators in subexpression; subexpression should be of
       form `operator operand'; line 94:
parser test (NOT x AND y)
             ^^^^^^^^^^^
ERROR: subexpression is too long; subexpression should be of form
       `operator operand'; line 94:
parser test (NOT x AND y)
             ^^^^^^^^^^^
======= TEST: parser test (NOT x AND y)
------- line 94:
parser test (NOT x AND y)
^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 94:
parser test (NOT x AND y)
            ^^^^^^^^^^^^^
======= END TEST
ERROR: missing operand inserted; line 95:
parser test (x AND NOT y)
                   ^
ERROR: operator `NOT' is not the same as first operator `AND' in
       subexpression; all operators must be the same in this
       subexpression; line 95:
parser test (x AND NOT y)
             ^^^^^^^^^^^
======= TEST: parser test (AND x ERROR'OPERAND y)
------- line 95:
parser test (x AND NOT y)
^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 95:
parser test (x AND NOT y)
            ^^^^^^^^^^^^^
======= END TEST
parser define operator "==" [code, math] infix
       with precedence 4000
       with compare reformatter
parser define operator "/=" [code, math] infix
       with precedence 4000
       with compare reformatter
parser define operator "!=" [code, math] infix
       with precedence 4000
       with compare reformatter
parser define operator "<" [code, math] infix
       with precedence 4000
       with compare reformatter
parser define operator "<=" [code, math] infix
       with precedence 4000
       with compare reformatter
parser define operator "=<" [code, math] infix
       with precedence 4000
       with compare reformatter
parser define operator ">" [code, math] infix
       with precedence 4000
       with compare reformatter
parser define operator ">=" [code, math] infix
       with precedence 4000
       with compare reformatter
parser define operator "=>" [code, math] infix
       with precedence 4000
       with compare reformatter
======= TEST: parser test
              (AND [. < x [. $ 0 y .] .] [. <= [. $ 0 .] [. $ 1 z .] .]
               [. > [. $ 1 .] [. $ 2 w .] .]
               [. != [. $ 2 .] [. $ 3 [. p q .] .] .]
               [. =< [. $ 3 .] [. u v .] .])
------- line 124:
parser test ( x < y <= z > w != p q =< u v )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 124:
parser test ( x < y <= z > w != p q =< u v )
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 124:
parser test ( x < y <= z > w != p q =< u v )
              ^^^^^
------- line 124:
parser test ( x < y <= z > w != p q =< u v )
                  ^
------- line 124:
parser test ( x < y <= z > w != p q =< u v )
                  ^^^^^^
------- line 124:
parser test ( x < y <= z > w != p q =< u v )
                  ^
------- line 124:
parser test ( x < y <= z > w != p q =< u v )
                       ^
------- line 124:
parser test ( x < y <= z > w != p q =< u v )
                       ^^^^^
------- line 124:
parser test ( x < y <= z > w != p q =< u v )
                       ^
------- line 124:
parser test ( x < y <= z > w != p q =< u v )
                           ^
------- line 124:
parser test ( x < y <= z > w != p q =< u v )
                           ^^^^^^^^
------- line 124:
parser test ( x < y <= z > w != p q =< u v )
                           ^
------- line 124:
parser test ( x < y <= z > w != p q =< u v )
                                ^^^
------- line 124:
parser test ( x < y <= z > w != p q =< u v )
                                ^^^
------- line 124:
parser test ( x < y <= z > w != p q =< u v )
                                ^^^^^^^^^^
------- line 124:
parser test ( x < y <= z > w != p q =< u v )
                                ^^^
------- line 124:
parser test ( x < y <= z > w != p q =< u v )
                                       ^^^
======= END TEST
parser define operator "+" [code, math] infix
       with precedence 5000
       with sum reformatter
parser define operator "-" [code, math] infix
       with precedence 5000
       with sum reformatter
======= TEST: parser test (+ x y [. - z .] w [. - v .] [. - u .])
------- line 132:
parser test ( x + y - z + w - v - u )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 132:
parser test ( x + y - z + w - v - u )
            ^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 132:
parser test ( x + y - z + w - v - u )
                    ^^^
------- line 132:
parser test ( x + y - z + w - v - u )
                            ^^^
------- line 132:
parser test ( x + y - z + w - v - u )
                                ^^^
======= END TEST
======= TEST: parser test (+ [. - x .] y [. - z .])
------- line 133:
parser test ( - x + y - z )
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 133:
parser test ( - x + y - z )
            ^^^^^^^^^^^^^^^
------- line 133:
parser test ( - x + y - z )
              ^^^
------- line 133:
parser test ( - x + y - z )
                      ^^^
======= END TEST
======= TEST: parser test
              (AND [. < x [. $ 4 [. + y 5 .] .] .] [. <= [. $ 4 .] z .])
------- line 134:
parser test ( x < y + 5 <= z )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 134:
parser test ( x < y + 5 <= z )
            ^^^^^^^^^^^^^^^^^^
------- line 134:
parser test ( x < y + 5 <= z )
              ^^^^^^^^^
------- line 134:
parser test ( x < y + 5 <= z )
                  ^^^^^
------- line 134:
parser test ( x < y + 5 <= z )
                  ^^^^^
------- line 134:
parser test ( x < y + 5 <= z )
                  ^^^^^^^^^^
------- line 134:
parser test ( x < y + 5 <= z )
                  ^^^^^
======= END TEST
parser define operator "/" [code, math] infix
       with precedence 5100
       with binary reformatter
parser define operator "*" [code, math] infix
       with precedence 5200
       with infix reformatter
parser define operator "^" [code, math] infix
       with precedence 5300
       with binary reformatter
======= TEST: parser test (/ [. * x y .] [. * [. z q .] [. m p .] .])
------- line 145:
parser test ( x * y / z q * m p )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 145:
parser test ( x * y / z q * m p )
            ^^^^^^^^^^^^^^^^^^^^^
------- line 145:
parser test ( x * y / z q * m p )
              ^^^^^
------- line 145:
parser test ( x * y / z q * m p )
                      ^^^^^^^^^
------- line 145:
parser test ( x * y / z q * m p )
                      ^^^
------- line 145:
parser test ( x * y / z q * m p )
                            ^^^
======= END TEST
ERROR: too many operators in subexpression; subexpression should be of
       form `operand operator operand'; line 146:
parser test ( x / y / z )
              ^^^^^^^^^
ERROR: subexpression is too long; subexpression should be of form
       `operand operator operand'; line 146:
parser test ( x / y / z )
              ^^^^^^^^^
======= TEST: parser test (x / y / z)
------- line 146:
parser test ( x / y / z )
^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 146:
parser test ( x / y / z )
            ^^^^^^^^^^^^^
======= END TEST
======= TEST: parser test
              (/ [. * [. ^ x 2 .] [. ^ y 2 .] .] [. * y z .])
------- line 147:
parser test ( x ^ 2 * y ^ 2 / y * z )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 147:
parser test ( x ^ 2 * y ^ 2 / y * z )
            ^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 147:
parser test ( x ^ 2 * y ^ 2 / y * z )
              ^^^^^^^^^^^^^
------- line 147:
parser test ( x ^ 2 * y ^ 2 / y * z )
              ^^^^^
------- line 147:
parser test ( x ^ 2 * y ^ 2 / y * z )
                      ^^^^^
------- line 147:
parser test ( x ^ 2 * y ^ 2 / y * z )
                              ^^^^^
======= END TEST
parser define operator "+" [code, math] prefix
       with precedence 10000
parser define operator "-" [code, math] prefix
       with precedence 10000
parser define operator "@" [code, math] prefix
       with precedence 10000
======= TEST: parser test (+ [. - x .] y [. - z .])
------- line 155:
parser test ( - x + y - z )
^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 155:
parser test ( - x + y - z )
            ^^^^^^^^^^^^^^^
------- line 155:
parser test ( - x + y - z )
              ^^^
------- line 155:
parser test ( - x + y - z )
                      ^^^
======= END TEST
======= TEST: parser test (+ [. * p [. - x .] .] y [. - z .])
------- line 156:
parser test ( p * - x + y - z )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 156:
parser test ( p * - x + y - z )
            ^^^^^^^^^^^^^^^^^^^
------- line 156:
parser test ( p * - x + y - z )
              ^^^^^^^
------- line 156:
parser test ( p * - x + y - z )
                  ^^^
------- line 156:
parser test ( p * - x + y - z )
                          ^^^
======= END TEST
======= TEST: parser test (+ [. @ x .] y [. - [. @ z .] .])
------- line 157:
parser test ( @ x + y - @ z )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line 157:
parser test ( @ x + y - @ z )
            ^^^^^^^^^^^^^^^^^
------- line 157:
parser test ( @ x + y - @ z )
              ^^^
------- line 157:
parser test ( @ x + y - @ z )
                      ^^^^^
------- line 157:
parser test ( @ x + y - @ z )
                        ^^^
======= END TEST
