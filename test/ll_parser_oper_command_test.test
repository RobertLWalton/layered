*PARSER*:
    print selector ""
        block standard: data paragraph
        block standard: math
        block standard: text
        block standard: label
        block standard: code
        block TOP LEVEL: data
        block TOP LEVEL: LINE LEVEL
        block TOP LEVEL: TOP LEVEL
    print pass
        top
    print top level
        block standard:  selectors [code]
                         options [end at le indent,
                                  end at line separator,
                                  end at outer closing,
                                  enable indented paragraph,
                                  enable header]
                         paragraph lexical master "PARAGRAPH-CHECK"
                         line lexical master "DATA-CHECK"
                         line separator ";"
        block TOP LEVEL:  selectors []
                          options [end at le indent,
                                   end at line separator,
                                   end at outer closing,
                                   enable indented paragraph,
                                   enable header]
    print pass
        top
        operator [code, math]
    trace [+ parser commands, + warnings ]
    trace [+ parser output,
           + subexpression elements,
           + subexpression lines ]
    trace [- operator subexpressions]
    print selector ""
        block standard: data paragraph
        block standard: math
        block standard: text
        block standard: label
        block standard: code
        block TOP LEVEL: data
        block TOP LEVEL: LINE LEVEL
        block TOP LEVEL: TOP LEVEL
    print operator ""
        nothing found
    print bracket ""
        block standard: bracket "``" ... "''" [code, label, text, math]
                        with parsing selectors [- code, - label, + text,
                                                - math]
                        with parsing options [+ enable table prefix]
                        with text reformatter ( "s", ".", "?", "!", ":",
                        ";" )
        block TOP LEVEL: bracket "``" ... "''" [data]
        block standard: bracket [< "[" "<" >] ... [< ">" "]" >]
                        [code, label, text, math]
                        with parsing selectors [label]
                        with label reformatter
        block TOP LEVEL: bracket [< "[" "<" >] ... [< ">" "]" >] [data]
                         with parsing selectors [data]
                         with label reformatter
        block standard: bracket [< "{" "*" >] ... [< "*" "}" >] [label]
                        with multivalue reformatter ( "," )
        block TOP LEVEL: bracket [< "{" "*" >] ... [< "*" "}" >] [data]
                         with multivalue reformatter ( "," )
        block standard: bracket "(" ... ")" [code, label, text, math]
        block TOP LEVEL: bracket "(" ... ")" [data]
        block standard: bracket "[" ... "]" [code, label, text, math]
                        with parsing selectors [+ code, - label, - text,
                                                - math]
        block TOP LEVEL: bracket "[" ... "]" [data]
        block standard: bracket "`" ... "'" [code, label, text, math]
                        with parsing selectors [- code, - label, + text,
                                                - math]
        block TOP LEVEL: bracket "`" ... "'" [data]
                         with parsing selectors [data]
        block standard: bracket [< "{" "{" >] ... [< "}" "}" >]
                        [code, label, text, math]
                        with parsing selectors [- code, - label, - text,
                                                + math]
        block TOP LEVEL: bracket [< "{" "{" >] ... [< "}" "}" >] [data]
        block standard: bracket [< "[" "$" >] ... [< "$" "]" >]
                        [code, label, text, math]
                        with parsing selectors [label]
                        with special reformatter
        block TOP LEVEL: bracket [< "[" "$" >] ... [< "$" "]" >] [data]
                         with parsing selectors [data]
                         with special reformatter
*PARSER*:
    begin block BLOCK1
=== BRACKETED EXPRESSION: line ##:
( x / y ^ z w )
^^^^^^^^^^^^^^^
    (x / y ^ z w)
*PARSER*:
    define operator "/" [code, math] infix
        with binary reformatter with precedence -100
    print operator "/"
        block BLOCK1: operator "/" [code, math]
                      infix
                      with precedence -100
                      with binary reformatter
    define operator "^" [code, math] infix
        with binary reformatter with precedence +100
=== BRACKETED EXPRESSION: line ##:
( x / y ^ z w )
^^^^^^^^^^^^^^^
    ({|x|} / {|{|y|} ^ {|z w|}|})
*PARSER*:
    print operator ""
        block BLOCK1: operator "/" [code, math]
                      infix
                      with precedence -100
                      with binary reformatter
        block BLOCK1: operator "^" [code, math]
                      infix
                      with precedence 100
                      with binary reformatter
    undefine operator "/" [code, math] infix
        with precedence -100
    print operator "/"
        block BLOCK1: operator "/" []
                      infix
                      with precedence -100
                      with binary reformatter
=== BRACKETED EXPRESSION: line ##:
( x / y ^ z w )
^^^^^^^^^^^^^^^
    ({|x / y|} ^ {|z w|})
*PARSER*:
    end block BLOCK1
    print operator ""
        nothing found
=== BRACKETED EXPRESSION: line ##:
( x / y ^ z w )
^^^^^^^^^^^^^^^
    (x / y ^ z w)
*PARSER*:
    begin block BLOCK1
ERROR: in line ##: expected `with precedence ...' after:
        with binary reformatter
                    ^^^^^^^^^^^
ERROR: in line ##: expected `with' after:
    define operator "+" [code, math] xxfix
                        ^^^^^^^^^^^^
ERROR: in line ##: undefined reformatter name:
        with none such reformatter
             ^^^^^^^^^^^^^^^^^^^^^
    print operator ""
        nothing found
ERROR: in line ##: precedence is not an integer in range:
        with precedence 3000000
                        ^^^^^^^
    define operator "+" [code, math] infix
        with binary reformatter
        with precedence 3000
    define operator "+" [code, math] nofix
        with precedence 3000
ERROR: in line ##: expected `with precedence ...' after:
    undefine operator "+" [code, math] infix
                                       ^^^^^
ERROR: in lines ##-##: did NOT expect `with ... reformatter':
    undefine operator "+" [code, math]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with precedence 3000
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with binary reformatter
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
WARNING: in lines ##-##: undefine found no definition:
    undefine operator "+" [code, math] prefix
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with precedence 3000
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    undefine operator "+" [code, math] prefix
        with precedence 3000
WARNING: in lines ##-##: undefine found no definition:
    undefine operator "+" [code, math] infix
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        with precedence 2000
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    undefine operator "+" [code, math] infix
        with precedence 2000
    undefine operator "+" [code, math] infix
        with precedence 3000
    print operator ""
        block BLOCK1: operator "+" [code, math]
                      nofix
                      with precedence 3000
        block BLOCK1: operator "+" []
                      infix
                      with precedence 3000
                      with binary reformatter
    end block BLOCK1
*PARSER*:
    begin block BLOCK1
    define operator "+" [code, math] prefix
        with precedence 3000
    define operator "-" [code, math] initial
        with precedence 3000
    define operator "+" [code, math] infix
        with precedence 3000
    define operator "++" [code, math] postfix
        with precedence 3000
    define operator "--" [code, math] final
        with precedence 3000
=== BRACKETED EXPRESSION: line ###:
+ + x + y
^^^^^^^^^
    + {|+ {|x|} + {|y|}|}
=== BRACKETED EXPRESSION: line ###:
+ + x + y ++
^^^^^^^^^^^^
    + {|+ {|x|} + {|y|} ++|}
=== BRACKETED EXPRESSION: line ###:
+ + x + y ++ ++
^^^^^^^^^^^^^^^
    + {|+ {|x|} + {|y|} ++|} ++
=== BRACKETED EXPRESSION: line ###:
+ x + y ++ ++
^^^^^^^^^^^^^
    {|+ {|x|} + {|y|} ++|} ++
=== BRACKETED EXPRESSION: line ###:
x + y ++ ++
^^^^^^^^^^^
    {|{|x|} + {|y|} ++|} ++
=== BRACKETED EXPRESSION: line ###:
+ + + x + y
^^^^^^^^^^^
    + {|+ {|+ {|x|} + {|y|}|}|}
=== BRACKETED EXPRESSION: line ###:
x + y ++ ++ ++
^^^^^^^^^^^^^^
    {|{|{|x|} + {|y|} ++|} ++|} ++
=== BRACKETED EXPRESSION: line ###:
+ - x + y -- ++
^^^^^^^^^^^^^^^
    + {|- {|x|} + {|y|} --|} ++
=== BRACKETED EXPRESSION: line ###:
+ + - x + y -- ++ ++
^^^^^^^^^^^^^^^^^^^^
    + {|+ {|- {|x|} + {|y|} --|} ++|} ++
ERROR: in line ###: missing operator; nofix error operator of precedence
       -1000001 inserted:
+ - - x + y -- -- ++
               ^^
=== BRACKETED EXPRESSION: line ###:
+ - - x + y -- -- ++
^^^^^^^^^^^^^^^^^^^^
    {|+ {|- {|- x|} + {|y|} --|}|} ERROR'OPERATOR {|{|--|} ++|}
=== BRACKETED EXPRESSION: line ###:
+ + + x + y ++ ++ ++
^^^^^^^^^^^^^^^^^^^^
    + {|+ {|+ {|x|} + {|y|} ++|} ++|} ++
*PARSER*:
    end block BLOCK1
*PARSER*:
    define operator "=" [code, math] infix
        with precedence 1000
        with right associative reformatter
    define operator "+=" [code, math] infix
        with precedence 1000
        with right associative reformatter
    define operator "-=" [code, math] infix
        with precedence 1000
        with right associative reformatter
    define operator "*=" [code, math] infix
        with precedence 1000
        with right associative reformatter
    define operator "/=" [code, math] infix
        with precedence 1000
        with right associative reformatter
=== BRACKETED EXPRESSION: line ###:
(x = y += z w *= p q r = t v)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ({|x|} = {|{|y|} += {|{|z w|} *= {|{|p q r|} = {|t v|}|}|}|})
*PARSER*:
    define operator "," [code, math] nofix
        with precedence 2000
        with separator reformatter
    begin block BLOCK1
    define operator "..." [code, math] nofix
        with precedence 2000
        with separator reformatter
=== BRACKETED EXPRESSION: line ###:
(x, y1, z w,, 3,)
^^^^^^^^^^^^^^^^^
    ({|x|}, {|y1|}, {|z w|}, {}, {|3|}, {})
=== BRACKETED EXPRESSION: line ###:
(,, x,, y,,,)
^^^^^^^^^^^^^
    ({}, {}, {|x|}, {}, {|y|}, {}, {}, {})
ERROR: in line ###: wrong separator "..." changed to ",":
(x, y... z)
     ^^^
=== BRACKETED EXPRESSION: line ###:
(x, y... z)
^^^^^^^^^^^
    ({|x|}, {|y|}, {|z|})
*PARSER*:
    end block BLOCK1
    define operator "BUT NOT" [code, math] infix
        with precedence 3000
        with binary reformatter
    define operator "AND" [code, math] infix
        with precedence 3100
        with infix reformatter ( "AND" )
    define operator "OR" [code, math] infix
        with precedence 3100
        with infix reformatter ( "OR" )
    define operator "NOT" [code, math] prefix
        with precedence 3200
        with unary reformatter
=== BRACKETED EXPRESSION: line ###:
(x OR y BUT NOT z AND w)
^^^^^^^^^^^^^^^^^^^^^^^^
    ({|{|x|} OR {|y|}|} [< BUT NOT >] {|{|z|} AND {|w|}|})
ERROR: in line ###: illegal operator "OR" in expression beginnning with
       "AND"; changed to "AND":
(x OR y BUT NOT z AND w OR p)
                        ^^
=== BRACKETED EXPRESSION: line ###:
(x OR y BUT NOT z AND w OR p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ({|{|x|} OR {|y|}|} [< BUT NOT >] {|{|z|} AND {|w|} AND {|p|}|})
=== BRACKETED EXPRESSION: line ###:
(NOT x y)
^^^^^^^^^
    (NOT {|x y|})
=== BRACKETED EXPRESSION: line ###:
(x NOT y)
^^^^^^^^^
    (x NOT y)
=== BRACKETED EXPRESSION: line ###:
(NOT x AND y)
^^^^^^^^^^^^^
    ({|NOT {|x|}|} AND {|y|})
=== BRACKETED EXPRESSION: line ###:
(x AND NOT y)
^^^^^^^^^^^^^
    ({|x|} AND {|NOT {|y|}|})
=== BRACKETED EXPRESSION: line ###:
(x AND AND y)
^^^^^^^^^^^^^
    ({|x|} AND {|AND y|})
=== BRACKETED EXPRESSION: line ###:
(NOT NOT x y)
^^^^^^^^^^^^^
    (NOT {|NOT {|x y|}|})
ERROR: in line ###: missing operand; error operand inserted:
(NOT NOT)
         ^
=== BRACKETED EXPRESSION: line ###:
(NOT NOT)
^^^^^^^^^
    (NOT {|NOT ERROR'OPERAND|})
*PARSER*:
    define operator "==" [code, math] infix
        with precedence 4000
        with infix reformatter
    define operator "/=" [code, math] infix
        with precedence 4000
        with infix reformatter
    define operator "!=" [code, math] infix
        with precedence 4000
        with infix reformatter
    define operator "<" [code, math] infix
        with precedence 4000
        with infix reformatter
    define operator "<=" [code, math] infix
        with precedence 4000
        with infix reformatter
    define operator "=<" [code, math] infix
        with precedence 4000
        with infix reformatter
    define operator ">" [code, math] infix
        with precedence 4000
        with infix reformatter
    define operator ">=" [code, math] infix
        with precedence 4000
        with infix reformatter
    define operator "=>" [code, math] infix
        with precedence 4000
        with infix reformatter
=== BRACKETED EXPRESSION: line ###:
( x < y <= z > w != p q =< u v )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ({|x|} < {|y|} <= {|z|} > {|w|} != {|p q|} =< {|u v|})
*PARSER*:
    define operator "+" [code, math] prefix
        with precedence 999999
        with unary reformatter
    define operator "+" [code, math] infix
        with precedence 5000
        with infix reformatter ( "+", "-" )
    define operator "-" [code, math] prefix
        with precedence 999999
        with unary reformatter
    define operator "-" [code, math] infix
        with precedence 5000
        with infix reformatter ( "+", "-" )
=== BRACKETED EXPRESSION: line ###:
( x + y - z + w - v - u )
^^^^^^^^^^^^^^^^^^^^^^^^^
    ({|x|} + {|y|} - {|z|} + {|w|} - {|v|} - {|u|})
=== BRACKETED EXPRESSION: line ###:
( - x + y - z )
^^^^^^^^^^^^^^^
    ({|- {|x|}|} + {|y|} - {|z|})
=== BRACKETED EXPRESSION: line ###:
( x < y + 5 <= z )
^^^^^^^^^^^^^^^^^^
    ({|x|} < {|{|y|} + {|5|}|} <= {|z|})
*PARSER*:
    define operator "/" [code, math] infix
        with precedence 5100
        with binary reformatter
    define operator "*" [code, math] infix
        with precedence 5200
        with infix reformatter ( "*" )
    define operator "^" [code, math] infix
        with precedence 5300
        with binary reformatter
=== BRACKETED EXPRESSION: line ###:
( x * y / z q * m p )
^^^^^^^^^^^^^^^^^^^^^
    ({|{|x|} * {|y|}|} / {|{|z q|} * {|m p|}|})
ERROR: in line ###: extra stuff at end of expression; deleted:
( x / y / z )
        ^^^
=== BRACKETED EXPRESSION: line ###:
( x / y / z )
^^^^^^^^^^^^^
    ({|x|} / {|y|})
=== BRACKETED EXPRESSION: line ###:
( x ^ 2 * y ^ 2 / y * z )
^^^^^^^^^^^^^^^^^^^^^^^^^
    ({|{|{|x|} ^ {|2|}|} * {|{|y|} ^ {|2|}|}|} / {|{|y|} * {|z|}|})
*PARSER*:
    define operator "@" [code, math] prefix
        with precedence 999999
=== BRACKETED EXPRESSION: line ###:
( - x + y - z )
^^^^^^^^^^^^^^^
    ({|- {|x|}|} + {|y|} - {|z|})
=== BRACKETED EXPRESSION: line ###:
( p * - x + y - z )
^^^^^^^^^^^^^^^^^^^
    ({|{|p|} * {|- {|x|}|}|} + {|y|} - {|z|})
=== BRACKETED EXPRESSION: line ###:
( @ x + y - @ z )
^^^^^^^^^^^^^^^^^
    ({|@ {|x|}|} + {|y|} - {|@ {|z|}|})
=== BRACKETED EXPRESSION: line ###:
( + - + - x y )
^^^^^^^^^^^^^^^
    (+ {|- {|+ {|- {|x y|}|}|}|})
*PARSER*:
    define operator "++" [code, math] postfix
        with precedence 1000000
    define operator "--" [code, math] postfix
        with precedence 1000000
=== BRACKETED EXPRESSION: line ###:
( x ++ + y - z -- )
^^^^^^^^^^^^^^^^^^^
    ({|{|x|} ++|} + {|y|} - {|{|z|} --|})
=== BRACKETED EXPRESSION: line ###:
( x y ++ -- ++ -- )
^^^^^^^^^^^^^^^^^^^
    ({|{|{|{|x y|} ++|} --|} ++|} --)
*PARSER*:
    define operator "<--" [code] nofix line
        with precedence 0
        with declare reformatter ( ":" )
    define operator ":" [code]
        right afix line
        with precedence 0
    define operator indentation mark ":" [code]
        nofix afix line
        with precedence 0
=== BRACKETED EXPRESSION: line ###:
foo bar <-- boo bat : fee fie fo fum
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {|foo bar|} <-- {|boo bat|} ":" {|fee fie fo fum|}
=== BRACKETED EXPRESSION: line ###:
foo bar <-- : fee fie fo fum
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {|foo bar|} <-- {} ":" {|fee fie fo fum|}
=== BRACKETED EXPRESSION: line ###:
<-- boo bat : fee fie fo fum
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {} <-- {|boo bat|} ":" {|fee fie fo fum|}
=== BRACKETED EXPRESSION: line ###:
foo bar <--
^^^^^^^^^^^
    {|foo bar|} <-- {}
=== BRACKETED EXPRESSION: lines ###-###:
foo bar <-- boo bat:
^^^^^^^^^^^^^^^^^^^^
    fee fie fo fum
^^^^^^^^^^^^^^^^^^
    he ha ho hum
^^^^^^^^^^^^^^^^
    {|foo bar|} <-- {|boo bat|}:
        fee fie fo fum
        he ha ho hum
=== BRACKETED EXPRESSION: line ###:
( foo bar <-- boo bat : fee fie fo fum )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    (foo bar <-- boo bat ":" fee fie fo fum)
=== BRACKETED EXPRESSION: line ###:
foo bar <-- boo bat : fee fie fo fum
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {|foo bar|} <-- {|boo bat|} ":" {|fee fie fo fum|}
*PARSER*:
    print operator ""
        block standard: operator "*" [code, math]
                        infix
                        with precedence 5200
                        with infix reformatter ( "*" )
        block standard: operator "+" [code, math]
                        infix
                        with precedence 5000
                        with infix reformatter ( "+", "-" )
        block standard: operator "+" [code, math]
                        prefix
                        with precedence 999999
                        with unary reformatter
        block standard: operator "," [code, math]
                        nofix
                        with precedence 2000
                        with separator reformatter
        block standard: operator "-" [code, math]
                        infix
                        with precedence 5000
                        with infix reformatter ( "+", "-" )
        block standard: operator "-" [code, math]
                        prefix
                        with precedence 999999
                        with unary reformatter
        block standard: operator "/" [code, math]
                        infix
                        with precedence 5100
                        with binary reformatter
        block standard: operator ":" [code]
                        right afix line
                        with precedence 0
        block standard: operator "<" [code, math]
                        infix
                        with precedence 4000
                        with infix reformatter
        block standard: operator "=" [code, math]
                        infix
                        with precedence 1000
                        with right associative reformatter
        block standard: operator ">" [code, math]
                        infix
                        with precedence 4000
                        with infix reformatter
        block standard: operator "@" [code, math]
                        prefix
                        with precedence 999999
        block standard: operator "!=" [code, math]
                        infix
                        with precedence 4000
                        with infix reformatter
        block standard: operator "^" [code, math]
                        infix
                        with precedence 5300
                        with binary reformatter
        block standard: operator "NOT" [code, math]
                        prefix
                        with precedence 3200
                        with unary reformatter
        block standard: operator "<--" [code]
                        nofix line
                        with precedence 0
                        with declare reformatter ( ":" )
        block standard: operator [< "BUT" "NOT" >] [code, math]
                        infix
                        with precedence 3000
                        with binary reformatter
        block standard: operator "*=" [code, math]
                        infix
                        with precedence 1000
                        with right associative reformatter
        block standard: operator "++" [code, math]
                        postfix
                        with precedence 1000000
        block standard: operator "+=" [code, math]
                        infix
                        with precedence 1000
                        with right associative reformatter
        block standard: operator "<=" [code, math]
                        infix
                        with precedence 4000
                        with infix reformatter
        block standard: operator "AND" [code, math]
                        infix
                        with precedence 3100
                        with infix reformatter ( "AND" )
        block standard: operator "=<" [code, math]
                        infix
                        with precedence 4000
                        with infix reformatter
        block standard: operator "==" [code, math]
                        infix
                        with precedence 4000
                        with infix reformatter
        block standard: operator "--" [code, math]
                        postfix
                        with precedence 1000000
        block standard: operator "=>" [code, math]
                        infix
                        with precedence 4000
                        with infix reformatter
        block standard: operator "-=" [code, math]
                        infix
                        with precedence 1000
                        with right associative reformatter
        block standard: operator ">=" [code, math]
                        infix
                        with precedence 4000
                        with infix reformatter
        block standard: operator "OR" [code, math]
                        infix
                        with precedence 3100
                        with infix reformatter ( "OR" )
        block standard: operator "/=" [code, math]
                        infix
                        with precedence 4000
                        with infix reformatter
        block standard: operator "/=" [code, math]
                        infix
                        with precedence 1000
                        with right associative reformatter
        block standard: bracket ":" [code]
                        nofix afix line
                        with precedence 0
