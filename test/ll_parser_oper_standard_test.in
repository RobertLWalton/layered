// Layered Languages Standard Operations Parser Test
//         Data
//
// File:	ll_parser_oper_standard_test.in
// Author:	Bob Walton (walton@acm.org)
// Date:	Thu Aug  4 21:55:46 EDT 2022
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

a b c
a < b < c
[ x ( y ) z {{u, v, w}} m (n (p)) ]
(, x, y 4,, z,,)
y += z
x = y
w4 *= w5 
w3 = w4
w2 += w3
w1 = w2
x1, x2 += z1, z2
x = y + z * w << q + u * v ** p
x < y < z
x = ( y < z )
x = w < y < z
{t|1 2 3|b = (a, b, c), no d, e, f = (m; n; p): t}
{X: Y = {* A, B, C *} | 1 2 3 |}
a + b - c
- a
+ a - b - c
a + b * c + d
a + b * c / d * e + f
a + b * e ** d * f ** g
x + + y
x + {|+ y|}
x * * y
x * {|* y|}
x / y
x / y / z
NOT NOT x
x NOT y
(NOT)
x AND y AND z
x AND NOT y AND NOT z
x AND y BUT NOT z OR w OR v
x AND y OR z

while x == y:
    a + b
x, y = while z:
    c = a + b
while x == y, until v != w:
    p(q) = x[v]
a, b = while x == y, until v != w:
    foo (b) fum(c) = p, q
next x, next y, next z =:
    next x += 1
    next y += 1
    next z += 1
repeat 5 times:
    next x += 1
until z == x, at most 10 times:
    next x += 1
next x, y =:
    y = x
    next x += 1
next x, y:
    y = x
    next x += 1

if x == y: foo ( a, b )
if w == v:
    c = d + e
else if x != y: foo ( a, b )
else if w != v:
    c = d + e
else: foo ( a, b )
else:
    c = d + e
