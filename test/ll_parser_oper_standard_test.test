ERROR: in line ##: operator "OR" should equal "AND"; all operators must
       be the same in this subexpression; operator "OR" changed to
       "AND":
    x AND y OR z
    ^^^^^^^^^^^^
======= PARSER TEST: a b c
======= line ##:
    a b c
    ^^^^^
======= PARSER TEST: {"": .operator = "AND", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|AND
                          {"": .operator = "<"|< a
                               {"": .operator = "$"|$ 0 b|}|}
                          {"": .operator = "<"|<
                               {"": .operator = "$"|$ 0|} c|}|}
======= line ##:
    a < b < c
    ^^^^^^^^^
------- line ##:
    a < b < c
    ^^^^^
------- line ##:
    a < b < c
        ^
------- line ##:
    a < b < c
        ^^^^^
------- line ##:
    a < b < c
        ^
======= PARSER TEST: [x (y) z {{u, v, w}} m (n (p))]
======= line ##:
    [ x ( y ) z {{u, v, w}} m (n (p)) ]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ##:
    [ x ( y ) z {{u, v, w}} m (n (p)) ]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ##:
    [ x ( y ) z {{u, v, w}} m (n (p)) ]
        ^^^^^
------- line ##:
    [ x ( y ) z {{u, v, w}} m (n (p)) ]
                ^^^^^^^^^^^
------- line ##:
    [ x ( y ) z {{u, v, w}} m (n (p)) ]
                              ^^^^^^^
------- line ##:
    [ x ( y ) z {{u, v, w}} m (n (p)) ]
                                 ^^^
======= PARSER TEST: ({}, x, {|y 4|}, {}, z, {}, {})
======= line ##:
    (, x, y 4,, z,,)
    ^^^^^^^^^^^^^^^^
------- line ##:
    (, x, y 4,, z,,)
    ^^^^^^^^^^^^^^^^
------- line ##:
    (, x, y 4,, z,,)
     ^
------- line ##:
    (, x, y 4,, z,,)
          ^^^
------- line ##:
    (, x, y 4,, z,,)
              ^
------- line ##:
    (, x, y 4,, z,,)
                  ^
------- line ##:
    (, x, y 4,, z,,)
                   ^
======= PARSER TEST: {"": .operator = "+=", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|+= y z|}
======= line ##:
    y += z
    ^^^^^^
======= PARSER TEST: {"": .operator = "=", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|= x y|}
======= line ##:
    x = y
    ^^^^^
======= PARSER TEST: {"": .operator = "*=", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|*= w4 w5|}
======= line ##:
    w4 *= w5
    ^^^^^^^^
======= PARSER TEST: {"": .operator = "=", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|= w3 w4|}
======= line ##:
    w3 = w4
    ^^^^^^^
======= PARSER TEST: {"": .operator = "+=", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|+= w2 w3|}
======= line ##:
    w2 += w3
    ^^^^^^^^
======= PARSER TEST: {"": .operator = "=", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|= w1 w2|}
======= line ##:
    w1 = w2
    ^^^^^^^
======= PARSER TEST: {"": .operator = "+=", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|+= {|x1, x2|}
                          {|z1, z2|}|}
======= line ##:
    x1, x2 += z1, z2
    ^^^^^^^^^^^^^^^^
------- line ##:
    x1, x2 += z1, z2
    ^^^^^^
------- line ##:
    x1, x2 += z1, z2
              ^^^^^^
======= PARSER TEST: {"": .operator = "AND", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|AND
                          {"": .operator = "<"|< x
                               {"": .operator = "$"|$ 1 y|}|}
                          {"": .operator = "<"|<
                               {"": .operator = "$"|$ 1|} z|}|}
======= line ##:
    x < y < z
    ^^^^^^^^^
------- line ##:
    x < y < z
    ^^^^^
------- line ##:
    x < y < z
        ^
------- line ##:
    x < y < z
        ^^^^^
------- line ##:
    x < y < z
        ^
======= PARSER TEST: {"": .operator = "=", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|= x
                          {"": .operator = "<", .terminator = ")",
                               .initiator = "("|< y z|}|}
======= line ##:
    x = ( y < z )
    ^^^^^^^^^^^^^
------- line ##:
    x = ( y < z )
        ^^^^^^^^^
======= PARSER TEST: {"": .operator = "=", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|= x
                          {"": .operator = "AND"|AND
                               {"": .operator = "<"|< w
                                    {"": .operator = "$"|$ 2 y|}|}
                               {"": .operator = "<"|<
                                    {"": .operator = "$"|$ 2|} z|}|}|}
======= line ##:
    x = w < y < z
    ^^^^^^^^^^^^^
------- line ##:
    x = w < y < z
        ^^^^^^^^^
------- line ##:
    x = w < y < z
        ^^^^^
------- line ##:
    x = w < y < z
            ^
------- line ##:
    x = w < y < z
            ^^^^^
------- line ##:
    x = w < y < z
            ^
======= PARSER TEST: {t: no d, e, f = (m ";" n ";" p), b =
                         (a "," b "," c)|1 2 3|t}
======= line ##:
    {t|1 2 3|b = (a, b, c), no d, e, f = (m; n; p): t}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ##:
    {t|1 2 3|b = (a, b, c), no d, e, f = (m; n; p): t}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= PARSER TEST: {X: Y = {* "C", "A", "B" *}|1 2 3|X}
======= line ##:
    {X: Y = {* A, B, C *} | 1 2 3 |}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ##:
    {X: Y = {* A, B, C *} | 1 2 3 |}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
======= PARSER TEST: {"": .operator = "+", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|+ a b
                          {"": .operator = "-"|- c|}|}
======= line ##:
    a + b - c
    ^^^^^^^^^
------- line ##:
    a + b - c
          ^^^
======= PARSER TEST: {"": .operator = "-", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|- a|}
======= line ##:
    - a
    ^^^
======= PARSER TEST: {"": .operator = "+", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|+
                          {"": .operator = "+"|+ a|}
                          {"": .operator = "-"|- b|}
                          {"": .operator = "-"|- c|}|}
======= line ##:
    + a - b - c
    ^^^^^^^^^^^
------- line ##:
    + a - b - c
    ^^^
------- line ##:
    + a - b - c
        ^^^
------- line ##:
    + a - b - c
            ^^^
======= PARSER TEST: {"": .operator = "+", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|+ a
                          {"": .operator = "*"|* b c|} d|}
======= line ##:
    a + b * c + d
    ^^^^^^^^^^^^^
------- line ##:
    a + b * c + d
        ^^^^^
======= PARSER TEST: {"": .operator = "+", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|+ a
                          {"": .operator = "/"|/
                               {"": .operator = "*"|* b c|}
                               {"": .operator = "*"|* d e|}|} f|}
======= line ##:
    a + b * c / d * e + f
    ^^^^^^^^^^^^^^^^^^^^^
------- line ##:
    a + b * c / d * e + f
        ^^^^^^^^^^^^^
------- line ##:
    a + b * c / d * e + f
        ^^^^^
------- line ##:
    a + b * c / d * e + f
                ^^^^^
======= PARSER TEST: {"": .operator = "+", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|+ a
                          {"": .operator = "*"|* b
                               {"": .operator = "**"|** e d|}
                               {"": .operator = "**"|** f g|}|}|}
======= line ##:
    a + b * e ** d * f ** g
    ^^^^^^^^^^^^^^^^^^^^^^^
------- line ##:
    a + b * e ** d * f ** g
        ^^^^^^^^^^^^^^^^^^^
------- line ##:
    a + b * e ** d * f ** g
            ^^^^^^
------- line ##:
    a + b * e ** d * f ** g
                     ^^^^^^
======= PARSER TEST: {"": .operator = "+", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|+ x
                          {"": .operator = "+"|+ y|}|}
======= line ##:
    x + + y
    ^^^^^^^
------- line ##:
    x + + y
        ^^^
======= PARSER TEST: {"": .operator = "+", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|+ x
                          {"": .operator = "+"|+ y|}|}
======= line ##:
    x + {|+ y|}
    ^^^^^^^^^^^
------- line ##:
    x + {|+ y|}
        ^^^^^^^
======= PARSER TEST: {"": .operator = "*", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|* x {|* y|}|}
======= line ##:
    x * * y
    ^^^^^^^
------- line ##:
    x * * y
        ^^^
======= PARSER TEST: {"": .operator = "*", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|* x {|* y|}|}
======= line ##:
    x * {|* y|}
    ^^^^^^^^^^^
------- line ##:
    x * {|* y|}
        ^^^^^^^
======= PARSER TEST: {"": .operator = "NOT", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|NOT
                          {"": .operator = "NOT"|NOT x|}|}
======= line ##:
    NOT NOT x
    ^^^^^^^^^
------- line ##:
    NOT NOT x
        ^^^^^
======= PARSER TEST: x NOT y
======= line ##:
    x NOT y
    ^^^^^^^
======= PARSER TEST: {"": .operator = "AND", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|AND x y z|}
======= line ##:
    x AND y AND z
    ^^^^^^^^^^^^^
======= PARSER TEST: {"": .operator = "AND", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|AND x
                          {"": .operator = "NOT"|NOT y|}
                          {"": .operator = "NOT"|NOT z|}|}
======= line ##:
    x AND NOT y AND NOT z
    ^^^^^^^^^^^^^^^^^^^^^
------- line ##:
    x AND NOT y AND NOT z
          ^^^^^
------- line ##:
    x AND NOT y AND NOT z
                    ^^^^^
======= PARSER TEST: {"": .operator = [< "BUT" "NOT" >], .terminator =
                          "<LF>", .initiator = [$ LOGICAL_LINE $]|
                          [< BUT NOT >] {"": .operator = "AND"|AND x y|}
                          {"": .operator = "OR"|OR z w v|}|}
======= line ##:
    x AND y BUT NOT z OR w OR v
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
------- line ##:
    x AND y BUT NOT z OR w OR v
    ^^^^^^^
------- line ##:
    x AND y BUT NOT z OR w OR v
                    ^^^^^^^^^^^
======= PARSER TEST: {"": .operator = "AND", .terminator = "<LF>",
                          .initiator = [$ LOGICAL_LINE $]|AND x y z|}
======= line ##:
    x AND y OR z
    ^^^^^^^^^^^^
======= END PARSER TEST(S)
