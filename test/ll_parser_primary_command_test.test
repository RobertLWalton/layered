*PARSER*:
    print selector ""
        block standard: data paragraph
        block standard: math
        block standard: text
        block standard: label
        block standard: code
        block TOP LEVEL: data
        block TOP LEVEL: LINE LEVEL
        block TOP LEVEL: TOP LEVEL
    print pass
        top
        operator [code, math]
        primary []
    trace [+ parser commands, + warnings ]
*PARSER*:
    begin block BLOCK1
    define primary variable ``X Y 1'' [code]
           with module M with location 100
    print primary variable ``''
        block BLOCK1: variable ``X Y 1'' [code] with location 100
                      in module M
    test primary:  X Y 1
    -- found variable: X Y 1 ===> M 100
    test primary:  X Y 1 FOO
    -- found variable: X Y 1 ===> M 100
    test primary:  X Y
    -- no definition found
    define primary variable ``X Y'' [code]
           with module M with location 200
    test primary:  X Y 1 FOO
    -- found variable: X Y 1 ===> M 100
    test primary:  X Y
    -- found variable: X Y ===> M 200
    test primary:  X
    -- no definition found
    print primary variable ``''
        block BLOCK1: variable ``X Y 1'' [code] with location 100
                      in module M
        block BLOCK1: variable ``X Y'' [code] with location 200
                      in module M
    end block BLOCK1
    print primary variable ``''
        nothing found
*PARSER*:
    begin block BLOCK1
    define primary function ``(A1) "+" (A2)'' [code]
    print primary function ``''
        block TOP LEVEL: function ``(X)">="(Y)'' with flags  1000004
        block TOP LEVEL: function ``"-"(A0)'' with flags 19000001
        block TOP LEVEL: function ``(X)OR(Y)'' with flags  3000004
        block TOP LEVEL: function ``(X)"*"(Y)'' with flags  3000002
        block BLOCK1: function ``(A1)"+"(A2)'' [code]
        block TOP LEVEL: function ``(X)"+"(Y)'' with flags  1050002
        block TOP LEVEL: function ``(X)"-"(Y)'' with flags  5010002
        block TOP LEVEL: function ``(X)"/"(Y)'' with flags  9000002
        block TOP LEVEL: function ``(X)"<"(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)">"(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)"!="(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)is string'' with flags  73B0004
        block TOP LEVEL: function ``(X)is infinite'' with flags  7380004
        block TOP LEVEL: function ``NOT(A0)'' with flags  4000004
        block TOP LEVEL: function ``(X)is finite'' with flags  7370004
        block TOP LEVEL: function ``(X)BUT NOT(Y)'' with flags  5000004
        block TOP LEVEL: function ``(X)is false'' with flags  7350004
        block TOP LEVEL: function ``(X)is integer'' with flags  7360004
        block TOP LEVEL: function ``(X)if(Y)'' with flags  6000004
        block TOP LEVEL: function ``(X)is object'' with flags  73C0004
        block TOP LEVEL: function ``(X)is number'' with flags  73A0004
        block TOP LEVEL: function ``(X)"<="(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)AND(Y)'' with flags  2000004
        block TOP LEVEL: function ``(X)"=="(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)is true'' with flags  7340004
    test primary:  (A) + (B)
    -- found function:  (A) "+" (B) ===> [$ MISSING $] 0
    test primary:  {|A|} + (B)
    -- found function:  {|A|} "+" (B) ===> [$ MISSING $] 0
    test primary:  {|A 1|} + (B)
    -- found function:  {|A 1|} "+" (B) ===> [$ MISSING $] 0
    test primary:  (A) + (B) + (C)
REJECTING: (A1)"+"(A2)
           expected function term just after (B) but found + instead
    -- found value op:  (A)"+" ===> [$ MISSING $] 0  1050002
    test primary:  (A) +
REJECTING: (A1)"+"(A2)
           prototype variable A2 was not given a value
    -- found value op:  (A)"+" ===> [$ MISSING $] 0  1050002
    test primary:  (A) + (B) - (C)
REJECTING: (A1)"+"(A2)
           expected function term just after (B) but found - instead
    -- found value op:  (A)"+" ===> [$ MISSING $] 0  1050002
    test primary:  (A) - (B) + (C)
    -- found value op:  (A)"-" ===> [$ MISSING $] 0  5010002
    test primary:  (A) * (B) * (C)
    -- found value op:  (A)"*" ===> [$ MISSING $] 0  3000002
    test primary:  (A) / (B)
    -- found value op:  (A)"/" ===> [$ MISSING $] 0  9000002
    test primary:  - (A)
    -- found function:  "-" (A) ===> [$ MISSING $] 0 19000001
    end block BLOCK1
*PARSER*:
    begin block BLOCK1
    define primary function ``F [X]'' [code]
    print primary function ``''
        block TOP LEVEL: function ``(X)">="(Y)'' with flags  1000004
        block TOP LEVEL: function ``"-"(A0)'' with flags 19000001
        block TOP LEVEL: function ``(X)OR(Y)'' with flags  3000004
        block BLOCK1: function ``F[X]'' [code]
        block TOP LEVEL: function ``(X)"*"(Y)'' with flags  3000002
        block TOP LEVEL: function ``(X)"+"(Y)'' with flags  1050002
        block TOP LEVEL: function ``(X)"-"(Y)'' with flags  5010002
        block TOP LEVEL: function ``(X)"/"(Y)'' with flags  9000002
        block TOP LEVEL: function ``(X)"<"(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)">"(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)"!="(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)is string'' with flags  73B0004
        block TOP LEVEL: function ``(X)is infinite'' with flags  7380004
        block TOP LEVEL: function ``NOT(A0)'' with flags  4000004
        block TOP LEVEL: function ``(X)is finite'' with flags  7370004
        block TOP LEVEL: function ``(X)BUT NOT(Y)'' with flags  5000004
        block TOP LEVEL: function ``(X)is false'' with flags  7350004
        block TOP LEVEL: function ``(X)is integer'' with flags  7360004
        block TOP LEVEL: function ``(X)if(Y)'' with flags  6000004
        block TOP LEVEL: function ``(X)is object'' with flags  73C0004
        block TOP LEVEL: function ``(X)is number'' with flags  73A0004
        block TOP LEVEL: function ``(X)"<="(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)AND(Y)'' with flags  2000004
        block TOP LEVEL: function ``(X)"=="(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)is true'' with flags  7340004
    test primary:  F [A]
    -- found function:  F [A] ===> [$ MISSING $] 0
    test primary:  F
REJECTING: F[X]
           [...] bracketed argument list expected but end of reference
           expression found
    -- no definition found
    end block BLOCK1
*PARSER*:
    begin block BLOCK1
    define primary function ``F (X) ({|Y|}?={|Z|})'' [code]
    print primary function ``''
        block TOP LEVEL: function ``(X)">="(Y)'' with flags  1000004
        block TOP LEVEL: function ``"-"(A0)'' with flags 19000001
        block TOP LEVEL: function ``(X)OR(Y)'' with flags  3000004
        block BLOCK1: function ``F(X)(Y ?= {|Z|})'' [code]
        block TOP LEVEL: function ``(X)"*"(Y)'' with flags  3000002
        block TOP LEVEL: function ``(X)"+"(Y)'' with flags  1050002
        block TOP LEVEL: function ``(X)"-"(Y)'' with flags  5010002
        block TOP LEVEL: function ``(X)"/"(Y)'' with flags  9000002
        block TOP LEVEL: function ``(X)"<"(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)">"(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)"!="(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)is string'' with flags  73B0004
        block TOP LEVEL: function ``(X)is infinite'' with flags  7380004
        block TOP LEVEL: function ``NOT(A0)'' with flags  4000004
        block TOP LEVEL: function ``(X)is finite'' with flags  7370004
        block TOP LEVEL: function ``(X)BUT NOT(Y)'' with flags  5000004
        block TOP LEVEL: function ``(X)is false'' with flags  7350004
        block TOP LEVEL: function ``(X)is integer'' with flags  7360004
        block TOP LEVEL: function ``(X)if(Y)'' with flags  6000004
        block TOP LEVEL: function ``(X)is object'' with flags  73C0004
        block TOP LEVEL: function ``(X)is number'' with flags  73A0004
        block TOP LEVEL: function ``(X)"<="(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)AND(Y)'' with flags  2000004
        block TOP LEVEL: function ``(X)"=="(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)is true'' with flags  7340004
    test primary:  F (A) (B)
    -- found function:  F (A) (B) ===> [$ MISSING $] 0
    test primary:  F (A)
    -- found function:  F (A) {|Z|} ===> [$ MISSING $] 0
    test primary:  F
REJECTING: F(X)(Y)
           prototype variable X was not given a value
    -- no definition found
    end block BLOCK1
*PARSER*:
    begin block BLOCK1
    define primary function ``F (X) G ({|Y|}?={|Q|}) H (Z)'' [code]
    print primary function ``''
        block TOP LEVEL: function ``(X)">="(Y)'' with flags  1000004
        block TOP LEVEL: function ``"-"(A0)'' with flags 19000001
        block TOP LEVEL: function ``(X)OR(Y)'' with flags  3000004
        block BLOCK1: function ``F(X)G(Y ?= {|Q|})H(Z)'' [code]
        block TOP LEVEL: function ``(X)"*"(Y)'' with flags  3000002
        block TOP LEVEL: function ``(X)"+"(Y)'' with flags  1050002
        block TOP LEVEL: function ``(X)"-"(Y)'' with flags  5010002
        block TOP LEVEL: function ``(X)"/"(Y)'' with flags  9000002
        block TOP LEVEL: function ``(X)"<"(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)">"(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)"!="(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)is string'' with flags  73B0004
        block TOP LEVEL: function ``(X)is infinite'' with flags  7380004
        block TOP LEVEL: function ``NOT(A0)'' with flags  4000004
        block TOP LEVEL: function ``(X)is finite'' with flags  7370004
        block TOP LEVEL: function ``(X)BUT NOT(Y)'' with flags  5000004
        block TOP LEVEL: function ``(X)is false'' with flags  7350004
        block TOP LEVEL: function ``(X)is integer'' with flags  7360004
        block TOP LEVEL: function ``(X)if(Y)'' with flags  6000004
        block TOP LEVEL: function ``(X)is object'' with flags  73C0004
        block TOP LEVEL: function ``(X)is number'' with flags  73A0004
        block TOP LEVEL: function ``(X)"<="(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)AND(Y)'' with flags  2000004
        block TOP LEVEL: function ``(X)"=="(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)is true'' with flags  7340004
    test primary:  F (A) G (B) H (C)
    -- found function:  F (A) G (B) H (C) ===> [$ MISSING $] 0
    test primary:  F (A) H (B) G (C)
    -- found function:  F (A) G (C) H (B) ===> [$ MISSING $] 0
    test primary:  F (A) H (B)
    -- found function:  F (A) G {|Q|} H (B) ===> [$ MISSING $] 0
    test primary:  F (A) G (B)
REJECTING: F(X)G(Y)H(Z)
           prototype variable Z was not given a value
    -- no definition found
    test primary:  F (A) H (B) G (C) H (D)
REJECTING: F(X)G(Y)H(Z)
           prototype variable Z given two values
    -- no definition found
    test primary:  F (A) H ({|B1|}, {|B2|})
REJECTING: F(X)G(Y)H(Z)
           argument list ({|B1|}, {|B2|}) for function term H is too
           long
    -- no definition found
    end block BLOCK1
*PARSER*:
    begin block BLOCK1
    define primary function
       ``{"": .separator = ",",
              .initiator = "(",
              .terminator = ")"|{|X1|} {|X2|}|} F
         {"": .separator = ",",
              .initiator = "(",
              .terminator = ")"|
               {|Z1|} {|{|Z2|} ?= {|D2|}|}|}''
         [code]
    print primary function ``''
        block TOP LEVEL: function ``(X)">="(Y)'' with flags  1000004
        block TOP LEVEL: function ``"-"(A0)'' with flags 19000001
        block TOP LEVEL: function ``(X)OR(Y)'' with flags  3000004
        block TOP LEVEL: function ``(X)"*"(Y)'' with flags  3000002
        block TOP LEVEL: function ``(X)"+"(Y)'' with flags  1050002
        block TOP LEVEL: function ``(X)"-"(Y)'' with flags  5010002
        block TOP LEVEL: function ``(X)"/"(Y)'' with flags  9000002
        block TOP LEVEL: function ``(X)"<"(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)">"(Y)'' with flags  1000004
        block BLOCK1: function ``(X1, X2)F(Z1, Z2 ?= {|D2|})'' [code]
        block TOP LEVEL: function ``(X)"!="(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)is string'' with flags  73B0004
        block TOP LEVEL: function ``(X)is infinite'' with flags  7380004
        block TOP LEVEL: function ``NOT(A0)'' with flags  4000004
        block TOP LEVEL: function ``(X)is finite'' with flags  7370004
        block TOP LEVEL: function ``(X)BUT NOT(Y)'' with flags  5000004
        block TOP LEVEL: function ``(X)is false'' with flags  7350004
        block TOP LEVEL: function ``(X)is integer'' with flags  7360004
        block TOP LEVEL: function ``(X)if(Y)'' with flags  6000004
        block TOP LEVEL: function ``(X)is object'' with flags  73C0004
        block TOP LEVEL: function ``(X)is number'' with flags  73A0004
        block TOP LEVEL: function ``(X)"<="(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)AND(Y)'' with flags  2000004
        block TOP LEVEL: function ``(X)"=="(Y)'' with flags  1000004
        block TOP LEVEL: function ``(X)is true'' with flags  7340004
    test primary:  ({|A1|}, {|A2|}) F ({|B1|}, {|B2|})
    -- found function:  {|A1|} {|A2|} F {|B1|} {|B2|}
        ===> [$ MISSING $] 0
    test primary:  ({|A1|}, {|A2|}) F (B)
    -- found function:  {|A1|} {|A2|} F (B) {|D2|} ===> [$ MISSING $] 0
    test primary:  (A) F ({|B1|}, {|B2|})
REJECTING: (X1, X2)F(Z1, Z2)
           prototype variable X2 was not given a value
    -- no definition found
    test primary:  ({|A1|}, {|A2|}, {|A3|}) F ({|B1|}, {|B2|})
REJECTING: (X1, X2)F(Z1, Z2)
           argument list ({|A1|}, {|A2|}, {|A3|}) before first function
           term name is too long
    -- no definition found
    test primary:  ({|A1|}, {|A2|}) F ({|B1|}, {|B2|}, {|B3|})
REJECTING: (X1, X2)F(Z1, Z2)
           argument list ({|B1|}, {|B2|}, {|B3|}) just after first
           function term name is too long
    -- no definition found
    end block BLOCK1
*PARSER*:
    begin block BLOCK1
ERROR: in line ###: argment with NO default found AFTER argument with
       default:
               {|Z1|} {|{|Z2|} ?= {|D2|}|} {|Z3|}|}''
                                           ^^^^^^
    end block BLOCK1
*PARSER*:
    begin block BLOCK1
    define primary function ``(A) F (B) G (C)'' [code]
    define primary function ``(A) F (B)'' [code]
    test primary:  (X) F (Y)
    -- found function:  (X) F (Y) ===> [$ MISSING $] 0
    test primary:  (X) F (Y) G (Z)
REJECTING: (A)F(B)
           expected function term just after (Y) but found G instead
    -- found function:  (X) F (Y) G (Z) ===> [$ MISSING $] 0
    end block BLOCK1
*PARSER*:
    begin block BLOCK1
    define primary function
        ``F1 (A) G ({|B|} ?= {|TRUE|})'' [code]
    test primary:  F1 (Y)
    -- found function:  F1 (Y) G {|TRUE|} ===> [$ MISSING $] 0
    test primary:  F1 (Y) NOT G
    -- found function:  F1 (Y) G {|FALSE|} ===> [$ MISSING $] 0
    test primary:  F1 (Y) G
    -- found function:  F1 (Y) G {|TRUE|} ===> [$ MISSING $] 0
    define primary function
        ``F2 (A) G ({|B|} ?= {|FALSE|})'' [code]
    test primary:  F2 (Y)
    -- found function:  F2 (Y) G {|FALSE|} ===> [$ MISSING $] 0
    test primary:  F2 (Y) NOT G
    -- found function:  F2 (Y) G {|FALSE|} ===> [$ MISSING $] 0
    test primary:  F2 (Y) G
    -- found function:  F2 (Y) G {|TRUE|} ===> [$ MISSING $] 0
    end block BLOCK1
