*PARSER*:
    print selector ""
        block standard: data paragraph
        block standard: math
        block standard: text
        block standard: label
        block standard: code
        block TOP LEVEL: data
        block TOP LEVEL: LINE LEVEL
        block TOP LEVEL: TOP LEVEL
    print pass
        top
        operator [code, math]
        primary []
    trace [+ parser commands, + warnings ]
*PARSER*:
    begin block BLOCK1
    define primary variable ``X Y 1'' [code]
           with module M with location 100
    print primary variable ``''
        block BLOCK1: variable ``X Y 1'' [code]
                      with location 100 in module M
    test primary ``X Y 1'' [code]
                   ^^^^^
        found variable ``X Y 1'' M 100
    test primary ``X Y 1 FOO'' [code]
                   ^^^^^
        found variable ``X Y 1'' M 100
ERROR: in line ##: no definition found:
    test primary ``X Y'' [code]
                 ^^^^^^^
    define primary variable ``X Y'' [code]
           with module M with location 200
    test primary ``X Y 1 FOO'' [code]
                   ^^^^^
        found variable ``X Y 1'' M 100
    test primary ``X Y'' [code]
                   ^^^
        found variable ``X Y'' M 200
ERROR: in line ##: no definition found:
    test primary ``X'' [code]
                 ^^^^^
    print primary variable ``''
        block BLOCK1: variable ``X Y 1'' [code]
                      with location 100 in module M
        block BLOCK1: variable ``X Y'' [code]
                      with location 200 in module M
    end block BLOCK1
    print primary variable ``''
        nothing found
*PARSER*:
    begin block BLOCK1
    define primary function ``(X) "+" (Y)'' [code]
    print primary function ``''
        block BLOCK1: function ``;;P "+"'' [code]
                      with location 0 in module [$ MISSING $]
    end block BLOCK1
